cscope 15 $HOME/Downloads/smpbios/sysbios-rpmsg/src               0000703952
	@host/omx_benchmark.c

59 
	~<sys/£À˘.h
>

60 
	~<sys/ty≥s.h
>

61 
	~<sys/°©.h
>

62 
	~<f˙é.h
>

63 
	~<î∫o.h
>

64 
	~<°dio.h
>

65 
	~<°rög.h
>

66 
	~<°dlib.h
>

67 
	~<uni°d.h
>

68 
	~<±hªad.h
>

69 
	~<time.h
>

70 
	~<sys/evítfd.h
>

72 
	~"../../ö˛ude/löux/Ωmsg_omx.h
"

74 
	~"omx_∑ckë.h
"

78 
	ma
;

79 } 
	tfxn_doubÀ_¨gs
;

86 
	mRPC_OMX_MAP_INFO_NONE
 = 0,

87 
	mRPC_OMX_MAP_INFO_ONE_BUF
 = 1,

88 
	mRPC_OMX_MAP_INFO_TWO_BUF
 = 2,

89 
	mRPC_OMX_MAP_INFO_THREE_BUF
 = 3,

90 
	mRPC_OMX_MAP_INFO_MAX
 = 0x7FFFFFFF

91 } 
	tm≠_öfo_ty≥
;

97 
	#FXN_IDX_FXNDOUBLE
 (3 | 0x80000000)

	)

99 
	$diff
(
time•ec
 
°¨t
, time•e¯
íd
)

101 
u£cs
;

103 
time•ec
 
ãmp
;

104 i‡((
íd
.
tv_n£c
-
°¨t
.tv_nsec)<0) {

105 
ãmp
.
tv_£c
 = 
íd
.tv_£c-
°¨t
.tv_sec-1;

106 
ãmp
.
tv_n£c
 = 1000000000+
íd
.tv_n£c-
°¨t
.tv_nsec;

108 
ãmp
.
tv_£c
 = 
íd
.tv_£c-
°¨t
.tv_sec;

109 
ãmp
.
tv_n£c
 = 
íd
.tv_n£c-
°¨t
.tv_nsec;

111 
u£cs
 = 
ãmp
.
tv_£c
 * 1000 +Åemp.
tv_n£c
 / 1000;

112  
u£cs
;

113 
	}
}

115 
	$exec_cmd
(
fd
, *
msg
, 
Àn
, *
ª∂y_msg
, *
ª∂y_Àn
)

117 
ªt
 = 0;

119 
ªt
 = 
	`wrôe
(
fd
, 
msg
, 
Àn
);

120 i‡(
ªt
 < 0) {

121 
	`≥º‹
("Can't writeÅo OMX instance");

127 
ªt
 = 
	`ªad
(
fd
, 
ª∂y_msg
, 
Àn
);

128 i‡(
ªt
 < 0) {

129 
	`≥º‹
("Can'tÑead from OMX instance");

133 *
ª∂y_Àn
 = 
ªt
;

136 
	}
}

139 
	$öô_omx_∑ckë
(
omx_∑ckë
 *
∑ckë
, 
uöt16_t
 
desc
)

142 
∑ckë
->
desc
 |des¯<< 
OMX_DESC_TYPE_SHIFT
;

143 
∑ckë
->
msg_id
 = 0;

144 
∑ckë
->
Êags
 = 
OMX_POOLID_JOBID_NONE
;

145 
∑ckë
->
fxn_idx
 = 
OMX_INVALIDFXNIDX
;

146 
∑ckë
->
ªsu…
 = 0;

147 
	}
}

149 
	$ã°_exec_ˇŒ
(
fd
, 
num_ôî©i⁄s
)

151 
i
;

152 
uöt16_t
 
£rvî_°©us
;

153 
∑ckë_Àn
;

154 
ª∂y_Àn
;

155 
∑ckë_buf
[512] = {0};

156 
ªtu∫_buf
[512] = {0};

157 
omx_∑ckë
 *
∑ckë
 = (omx_∑ckë *)
∑ckë_buf
;

158 
omx_∑ckë
 *
πn_∑ckë
 = (omx_∑ckë *)
ªtu∫_buf
;

159 
fxn_doubÀ_¨gs
 *
fxn_¨gs
 = 
NULL
;

160 
time•ec
 
°¨t
, 
íd
;

161 
ñ≠£d
 = 0, 
dñè
;

162 
m≠_öfo_ty≥
 
m≠_öfo
 = 
RPC_OMX_MAP_INFO_NONE
;

164 
i
 = 1; i <
num_ôî©i⁄s
; i++) {

167 
	`öô_omx_∑ckë
(
∑ckë
, 
OMX_DESC_MSG
);

170 
∑ckë
->
fxn_idx
 = 
FXN_IDX_FXNDOUBLE
;

173 
	`mem˝y
(
∑ckë
->
d©a
, &
m≠_öfo
, (map_info));

174 
∑ckë
->
d©a_size
 = (
fxn_doubÀ_¨gs
Ë+ (
m≠_öfo
) ;

175 
fxn_¨gs
 = (
fxn_doubÀ_¨gs
 *)((*)
∑ckë
->
d©a
 + (
m≠_öfo
));

176 
fxn_¨gs
->
a
 = 
i
;

179 
∑ckë_Àn
 = (
omx_∑ckë
Ë+ 
∑ckë
->
d©a_size
;

180 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
°¨t
);

181 
	`exec_cmd
(
fd
, (*)
∑ckë
, 
∑ckë_Àn
, (*)
πn_∑ckë
, &
ª∂y_Àn
);

182 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
íd
);

183 
dñè
 = 
	`diff
(
°¨t
,
íd
);

184 
ñ≠£d
 +
dñè
;

187 
£rvî_°©us
 = (
OMX_DESC_TYPE_MASK
 & 
πn_∑ckë
->
desc
) >>

188 
OMX_DESC_TYPE_SHIFT
;

189 i‡(
£rvî_°©us
 =
OMXSERVER_STATUS_SUCCESS
) {

191 
	`¥ötf
 ("omx_benchmarkex: called fxnDouble(%d)),Ñesult = %d\n",

192 
fxn_¨gs
->
a
, 
πn_∑ckë
->
ªsu…
);

193 
	`¥ötf
 ("exec_cmdÅimê(%d): %ld\n", 
i
, 
dñè
);

196 
	`¥ötf
("omx_benchmark: FailedÅoÉxecute fxnDouble: server status: %d\n",

197 
£rvî_°©us
);

201 
	`¥ötf
("exec_cmdávgÅime: %ld u£cs\n", 
ñ≠£d
/
num_ôî©i⁄s
);

202 
	}
}

204 
	$maö
(
¨gc
, *
¨gv
[])

206 
fd
;

207 
ªt
 = 0;

208 
num_ôî©i⁄s
 = 1;

209 
omx_c⁄n_ªq
 
c⁄ƒeq
 = { .
«me
 = "OMX" };

210 
Ωroc
 = 0;

211 
Ωmsg_dev
[20];

213 
¨gc
) {

215 
Ωroc
 = 
	`©oi
(
¨gv
[1]);

216 
num_ôî©i⁄s
 = 
	`©oi
(
¨gv
[2]);

219 
Ωroc
 = 
	`©oi
(
¨gv
[1]);

224 
ªt
 = 1;

228 i‡(
Ωroc
 < 0 ||Ñproc > 2) {

229 
	`¥ötf
("Incorrect inputárgument forÖrocessor, should be 0, 1 or 2\n");

230 
ªt
 = 1;

233 i‡(
ªt
) {

234 
	`¥ötf
("Usage: omx_sample [<processor> [<num_iterations>]]\n");

235  
ªt
;

238 
	`•rötf
(
Ωmsg_dev
, "/dev/Ωmsg-omx%d", 
Ωroc
);

241 
fd
 = 
	`›í
(
Ωmsg_dev
, 
O_RDWR
);

242 i‡(
fd
 < 0) {

243 
	`≥º‹
("Can't open OMX device");

250 
ªt
 = 
	`io˘l
(
fd
, 
OMX_IOCCONNECT
, &
c⁄ƒeq
);

251 i‡(
ªt
 < 0) {

252 
	`≥º‹
("Can't connectÅo OMX instance");

256 
	`¥ötf
("omx_ßm∂e: C⁄√˘edÅÿ%s\n", 
c⁄ƒeq
.
«me
);

257 
	`ã°_exec_ˇŒ
(
fd
, 
num_ôî©i⁄s
);

260 
ªt
 = 
	`˛o£
(
fd
);

261 i‡(
ªt
 < 0) {

262 
	`≥º‹
("Can't close OMX fd ??");

266 
	`¥ötf
("omx_ßm∂e: Clo£d c⁄√˘i⁄Åÿ%s!\n", 
c⁄ƒeq
.
«me
);

268 
	}
}

	@host/omx_packet.h

39 #i‚de‡
OMX_PACKET_H


40 
	#OMX_PACKET_H


	)

67 
	#OMX_DESC_MSG
 0x1

68 
	#OMX_DESC_SYM_ADD
 0x3

69 
	#OMX_DESC_SYM_IDX
 0x4

70 
	#OMX_DESC_CMD
 0x5

71 
	#OMX_DESC_TYPE_MASK
 0x0F00

72 
	#OMX_DESC_TYPE_SHIFT
 8

73 

	)

75 
	#OMXSERVER_STATUS_SUCCESS
 ((
uöt16_t
)0)

76 
	#OMXSERVER_STATUS_INVALID_FXN
 ((
uöt16_t
)1)

77 
	#OMXSERVER_STATUS_SYMBOL_NOT_FOUND
 ((
uöt16_t
)2)

78 
	#OMXSERVER_STATUS_INVALID_MSG_TYPE
 ((
uöt16_t
)3)

79 
	#OMXSERVER_STATUS_MSG_FXN_ERR
 ((
uöt16_t
)4)

80 
	#OMXSERVER_STATUS_ERROR
 ((
uöt16_t
)5)

81 
	#OMXSERVER_STATUS_UNPROCESSED
 ((
uöt16_t
)6)

82 

	)

85 
uöt16_t
 
	mdesc
;

86 
uöt16_t
 
	mmsg_id
;

87 
uöt32_t
 
	mÊags
;

88 
uöt32_t
 
	mfxn_idx
;

89 
öt32_t
 
	mªsu…
;

90 
uöt32_t
 
	md©a_size
;

91 
uöt32_t
 
	md©a
[0];

92 } 
	tomx_∑ckë
;

94 
	#OMX_POOLID_JOBID_NONE
 (0x00008000)

	)

95 
	#OMX_INVALIDFXNIDX
 ((
uöt32_t
)(0xFFFFFFFF))

	)

	@host/omx_sample.c

40 
	~<sys/£À˘.h
>

41 
	~<sys/time.h
>

42 
	~<sys/ty≥s.h
>

43 
	~<sys/°©.h
>

44 
	~<f˙é.h
>

45 
	~<î∫o.h
>

46 
	~<°dio.h
>

47 
	~<°rög.h
>

48 
	~<°dlib.h
>

49 
	~<uni°d.h
>

50 
	~<±hªad.h
>

51 
	~<sys/evítfd.h
>

53 
	~"../../ö˛ude/löux/Ωmsg_omx.h
"

55 
	~"omx_∑ckë.h
"

57 
	#CALLBACK_DATA
 "OMX_CÆlback"

	)

58 
	#SUCCESS
 0

	)

59 
	#ERROR
 -1

	)

62 
	#H264_DECODER_NAME
 "H264_decodî"

	)

67 
	#FXN_IDX_OMX_GETHANDLE
 (0 | 0x80000000)

	)

68 
	#FXN_IDX_OMX_SETPARAMETER
 (1 | 0x80000000)

	)

69 
	#FXN_IDX_OMX_GETPARAMETER
 (2 | 0x80000000)

	)

72 
uöt32_t
 
	tOMX_HANDLETYPE
;

79 
	mRPC_OMX_MAP_INFO_NONE
 = 0,

80 
	mRPC_OMX_MAP_INFO_ONE_BUF
 = 1,

81 
	mRPC_OMX_MAP_INFO_TWO_BUF
 = 2,

82 
	mRPC_OMX_MAP_INFO_THREE_BUF
 = 3,

83 
	mRPC_OMX_MAP_INFO_MAX
 = 0x7FFFFFFF

84 } 
	tm≠_öfo_ty≥
;

86 
	$exec_cmd
(
fd
, *
msg
, 
size_t
 
Àn
, *
ª∂y_msg
, *
ª∂y_Àn
, 
cb
)

88 
ªt
 = 0;

89 
cb_Àn
;

90 
ˇŒback_buf
[512] = {0};

91 
omx_∑ckë
 *
cb_∑ckë
 = (omx_∑ckë *)
ˇŒback_buf
;

93 
ªt
 = 
	`wrôe
(
fd
, 
msg
, 
Àn
);

94 i‡(
ªt
 < 0) {

95 
	`≥º‹
("Can't writeÅo OMX instance");

96  
ERROR
;

99 i‡(
cb
) {

101 
cb_Àn
 = (
omx_∑ckë
Ë+ (
CALLBACK_DATA
);

102 
ªt
 = 
	`ªad
(
fd
, 
ˇŒback_buf
, 
cb_Àn
);

103 i‡(
ªt
 < 0) {

104 
	`≥º‹
("DidÇot get callback OMX message");

105  
ERROR
;

108 
	`¥ötf
("\tmsg_id: %d, fxn_idx: %d, data_size: %d, data: %s\n",

109 
cb_∑ckë
->
msg_id
, cb_∑ckë->
fxn_idx
, cb_∑ckë->
d©a_size
,

110 
cb_∑ckë
->
d©a
);

117 
ªt
 = 
	`ªad
(
fd
, 
ª∂y_msg
, 
Àn
);

118 i‡(
ªt
 < 0) {

119 
	`≥º‹
("Can'tÑead from OMX instance");

120  
ERROR
;

123 *
ª∂y_Àn
 = 
ªt
;

125  
SUCCESS
;

126 
	}
}

129 
	$öô_omx_∑ckë
(
omx_∑ckë
 *
∑ckë
, 
uöt16_t
 
desc
)

132 
∑ckë
->
desc
 |des¯<< 
OMX_DESC_TYPE_SHIFT
;

133 
∑ckë
->
msg_id
 = 0;

134 
∑ckë
->
Êags
 = 
OMX_POOLID_JOBID_NONE
;

135 
∑ckë
->
fxn_idx
 = 
OMX_INVALIDFXNIDX
;

136 
∑ckë
->
ªsu…
 = 0;

137 
	}
}

139 
	$ã°_h264_decodî
(
fd
, 
i
)

141 
uöt16_t
 
£rvî_°©us
;

142 
size_t
 
∑ckë_Àn
;

143 
ª∂y_Àn
;

144 
ªt
;

145 
∑ckë_buf
[512] = {0};

146 
ªtu∫_buf
[512] = {0};

147 
omx_∑ckë
 *
∑ckë
 = (omx_∑ckë *)
∑ckë_buf
;

148 
omx_∑ckë
 *
πn_∑ckë
 = (omx_∑ckë *)
ªtu∫_buf
;

149 
OMX_HANDLETYPE
 
omx_h™dÀ
;

150 
m≠_öfo_ty≥
 
m≠_öfo
 = 
RPC_OMX_MAP_INFO_NONE
;

154 
	`öô_omx_∑ckë
(
∑ckë
, 
OMX_DESC_MSG
);

157 
∑ckë
->
fxn_idx
 = 
FXN_IDX_OMX_GETHANDLE
;

159 
∑ckë
->
d©a_size
 = 
	`°æí
(
H264_DECODER_NAME
Ë+ (
m≠_öfo
) + 1;

160 
	`mem˝y
(
∑ckë
->
d©a
, &
m≠_öfo
, (map_info));

161 
	`°r˝y
((*)&
∑ckë
->
d©a
 + (
m≠_öfo
), 
H264_DECODER_NAME
);

162 *(*)&
∑ckë
->
d©a
[∑ckë->
d©a_size
] = '\0';

165 
∑ckë_Àn
 = (
omx_∑ckë
Ë+ 
∑ckë
->
d©a_size
;

166 
	`¥ötf
("omx_ßm∂ê(%d): OMX_GëH™dÀ (%s).\n", 
i
, 
H264_DECODER_NAME
);

167 
ªt
 = 
	`exec_cmd
(
fd
, (*)
∑ckë
, 
∑ckë_Àn
, (*)
πn_∑ckë
, &
ª∂y_Àn
, 1);

168 i‡(
SUCCESS
 !
ªt
) {

169 
	`¥ötf
("omx_sampleÉxec cmd failed\n");

170  
ERROR
;

174 
£rvî_°©us
 = (
OMX_DESC_TYPE_MASK
 & 
πn_∑ckë
->
desc
) >>

175 
OMX_DESC_TYPE_SHIFT
;

176 i‡(
£rvî_°©us
 =
OMXSERVER_STATUS_SUCCESS
) {

177 
omx_h™dÀ
 = *(
OMX_HANDLETYPE
 *)
πn_∑ckë
->
d©a
;

178 
	`¥ötf
("omx_ßm∂ê(%d): GŸ omx_h™dÀ: 0x%x\n", 
i
, 
omx_h™dÀ
);

181 
	`¥ötf
("omx_sample: FailedÅoÉxecute OMX_GetHandle: server status: %d\n",

182 
£rvî_°©us
);

186 
	`öô_omx_∑ckë
(
∑ckë
, 
OMX_DESC_MSG
);

187 
∑ckë
->
fxn_idx
 = 
FXN_IDX_OMX_SETPARAMETER
;

188 
∑ckë
->
d©a_size
 = (
OMX_HANDLETYPE
Ë+ (
m≠_öfo
);

189 
	`mem˝y
(
∑ckë
->
d©a
, &
m≠_öfo
, (map_info));

190 
	`mem˝y
(
∑ckë
->
d©a
 + (
m≠_öfo
), &
omx_h™dÀ
, (
OMX_HANDLETYPE
));

193 
∑ckë_Àn
 = (
omx_∑ckë
Ë+ 
∑ckë
->
d©a_size
;

194 
	`¥ötf
("omx_ßm∂e(%d): OMX_SëP¨amëî (0x%x)\n", 
i
, 
omx_h™dÀ
);

195 
ªt
 = 
	`exec_cmd
(
fd
, (*)
∑ckë
, 
∑ckë_Àn
, (*)
πn_∑ckë
, &
ª∂y_Àn
, 0);

196 i‡(
SUCCESS
 !
ªt
) {

197 
	`¥ötf
("omx_sampleÉxec cmd failed\n");

198  
ERROR
;

202 
£rvî_°©us
 = (
OMX_DESC_TYPE_MASK
 & 
πn_∑ckë
->
desc
) >>

203 
OMX_DESC_TYPE_SHIFT
;

204 i‡(
£rvî_°©us
 =
OMXSERVER_STATUS_SUCCESS
) {

205 
	`¥ötf
("omx_ßm∂ê(%d): GŸÑesu… %d\n", 
i
, 
πn_∑ckë
->
ªsu…
);

208 
	`¥ötf
("omx_sample: FailedÅoÉxecute OMX_SetParameter: server status: %d\n",

209 
£rvî_°©us
);

212  
SUCCESS
;

213 
	}
}

216 
	$maö
(
¨gc
, *
¨gv
[])

218 
fd
;

219 
ªt
 = 0;

220 
uöt64_t
 
dõ_evít
 = 1;

221 
ssize_t
 
s
;

222 
omx_c⁄n_ªq
 
c⁄ƒeq
 = { .
«me
 = "OMX" };

223 
i
;

224 
num_ôî©i⁄s
 = 1;

225 
Ωroc
 = 0;

226 
Ωmsg_dev
[20];

228 
¨gc
) {

230 
Ωroc
 = 
	`©oi
(
¨gv
[1]);

231 
num_ôî©i⁄s
 = 
	`©oi
(
¨gv
[2]);

234 
Ωroc
 = 
	`©oi
(
¨gv
[1]);

239 
ªt
 = 
ERROR
;

243 i‡(
Ωroc
 < 0 ||Ñproc > 2) {

244 
	`¥ötf
("Incorrect inputárgument forÖrocessor, should be 0, 1 or 2\n");

245 
ªt
 = 
ERROR
;

248 i‡(
ªt
) {

249 
	`¥ötf
("Usage: omx_sample [<processor> [<num_iterations>]]\n");

250  
ªt
;

253 
	`•rötf
(
Ωmsg_dev
, "/dev/Ωmsg-omx%d", 
Ωroc
);

256 
fd
 = 
	`›í
(
Ωmsg_dev
, 
O_RDWR
);

257 i‡(
fd
 < 0) {

258 
	`≥º‹
("Can't open OMX device");

259  
ERROR
;

265 
ªt
 = 
	`io˘l
(
fd
, 
OMX_IOCCONNECT
, &
c⁄ƒeq
);

266 i‡(
ªt
 < 0) {

267 
	`≥º‹
("Can't connectÅo OMX instance");

268  
ERROR
;

270 
	`¥ötf
("omx_ßm∂e: C⁄√˘edÅÿ%s\n", 
c⁄ƒeq
.
«me
);

272 
i
 = 1; i <
num_ôî©i⁄s
; i++) {

273 
ªt
 = 
	`ã°_h264_decodî
(
fd
, 
i
);

274 i‡(
SUCCESS
 !
ªt
) {

275 
	`¥ötf
("dummy decoderÅest failed\n");

276  
ERROR
;

281 
ªt
 = 
	`˛o£
(
fd
);

282 i‡(
ªt
 < 0) {

283 
	`≥º‹
("Can't close OMX fd ??");

284  
ERROR
;

287 
	`¥ötf
("omx_ßm∂e: Clo£d c⁄√˘i⁄Åÿ%s!\n", 
c⁄ƒeq
.
«me
);

289  
SUCCESS
;

290 
	}
}

	@ti/deh/Deh.c

39 
	~<xdc/ru¡ime/As£π.h
>

40 
	~<xdc/ru¡ime/Sy°em.h
>

41 
	~<xdc/ru¡ime/Eº‹.h
>

42 
	~<xdc/ru¡ime/Sèπup.h
>

43 
	~<xdc/ru¡ime/Mem‹y.h
>

44 
	~<xdc/ru¡ime/Ty≥s.h
>

46 
	~<ti/sysbios/BIOS.h
>

47 
	~<ti/sysbios/k∆/Swi.h
>

48 
	#ti_sysbios_k∆_Task__öã∫Æac˚ss


	)

49 
	~<ti/sysbios/k∆/Task.h
>

50 
	~<ti/sysbios/hÆ/ammu/AMMU.h
>

51 
	~<ti/sysbios/Ámûy/¨m/m3/Hwi.h
>

53 
	~<ti/ùc/Mu…iProc.h
>

54 
	~<ti/ùc/Ωmsg/VútQueue.h
>

55 
	~<ti/åa˚/SèckDbg.h
>

56 
	~<ti/deh/W©chdog.h
>

58 
	~"∑ckage/öã∫Æ/Deh.xdc.h
"

63 
I¡
 
	$Deh_ModuÀ_°¨tup
(
I¡
 
pha£
)

65 i‡(
	`AMMU_ModuÀ_°¨tupD⁄e
(Ë=
TRUE
) {

66 
	`W©chdog_öô
(
ti_sysbios_Ámûy_¨m_m3_Hwi_excH™dÀrAsm__I
);

67  
Sèπup_DONE
;

70  
Sèπup_NOTDONE
;

71 
	}
}

76 
Void
 
	$Deh_idÀBegö
(
Void
)

78 
	`W©chdog_idÀBegö
();

79 
	}
}

84 
Void
 
	$dump_hex
(
UI¡
 
ba£
, UI¡ 
Àn
, UI¡ 
°¨t
)

86 
UI¡
 
t›
;

88 
Àn
 = (len + 7) & ~7;

89 
t›
 = 
ba£
 + 
Àn
 * (
UI¡
);

90 
°¨t
 = start & ~31;

91 ; 
°¨t
 < 
t›
; sèπ +8 * (
UI¡
)) {

92 
	`Sy°em_¥ötf
("%08x: %08x %08x %08x %08x %08x %08x %08x %08x\n",

93 
°¨t
, ((
UI¡
 *)start)[0], ((UInt *)start)[1],

94 ((
UI¡
 *)
°¨t
)[2], ((UInt *)start)[3], ((UInt *)start)[4],

95 ((
UI¡
 *)
°¨t
)[5], ((UInt *)start)[6], ((UInt *)start)[7]);

97 
	}
}

102 
Boﬁ
 
	$¥ötSèckE¡ry
(
SèckDbg_SèckE¡ry
 *
íåy
, 
Void
 *
u£r
)

104 
UI¡
 *
˙t
 = (UI¡ *)
u£r
;

106 i‡(
íåy
->
bogus
) {

107 
	`Sy°em_¥ötf
(" -- [› %08x] %08x\n", 
íåy
->
›
,É¡ry->
ªt
);

110 i‡(
íåy
->
èrgë
) {

111 
	`Sy°em_¥ötf
(" %02d [op %08x] %08x (ret from callÅo %08x)\n",

112 (*
˙t
)++, 
íåy
->
›
,É¡ry->
ªt
,É¡ry->
èrgë
);

115 
	`Sy°em_¥ötf
(" %02d [› %08x] %08x\n", (*
˙t
)++, 
íåy
->
›
,

116 
íåy
->
•
);

120  
TRUE
;

121 
	}
}

128 
Void
 
	$Deh_excH™dÀr
(
UI¡
 *
excSèck
, UI¡ 
Ã
)

130 
Hwi_ExcC⁄ãxt
 
exc
;

131 
Deh_ExcRegs
 *
excRegs
;

132 
Ch¨
 *
ây≥
;

133 
UI¡
 
excNum
;

134 
Ch¨
 *
ëy≥
;

135 
Ch¨
 *
«me
;

136 
UI¡
 
sC¡
 = 0;

138 
excRegs
 = (
Deh_ExcRegs
 *Ë
Deh_moduÀ
->
outbuf
;

141 
excRegs
->
r0
 = 
exc
.r0 = (
På
)
excSèck
[8];

142 
excRegs
->
r1
 = 
exc
.r1 = (
På
)
excSèck
[9];

143 
excRegs
->
r2
 = 
exc
.r2 = (
På
)
excSèck
[10];

144 
excRegs
->
r3
 = 
exc
.r3 = (
På
)
excSèck
[11];

145 
excRegs
->
r4
 = 
exc
.r4 = (
På
)
excSèck
[0];

146 
excRegs
->
r5
 = 
exc
.r5 = (
På
)
excSèck
[1];

147 
excRegs
->
r6
 = 
exc
.r6 = (
På
)
excSèck
[2];

148 
excRegs
->
r7
 = 
exc
.r7 = (
På
)
excSèck
[3];

149 
excRegs
->
r8
 = 
exc
.r8 = (
På
)
excSèck
[4];

150 
excRegs
->
r9
 = 
exc
.r9 = (
På
)
excSèck
[5];

151 
excRegs
->
r10
 = 
exc
.r10 = (
På
)
excSèck
[6];

152 
excRegs
->
r11
 = 
exc
.r11 = (
På
)
excSèck
[7];

153 
excRegs
->
r12
 = 
exc
.r12 = (
På
)
excSèck
[12];

154 
excRegs
->
•
 = 
exc
.• = (
På
)(
UI¡32
)(
excSèck
+16);

155 
excRegs
->
Ã
 = 
exc
.Ã = (
På
)
excSèck
[13];

156 
excRegs
->
pc
 = 
exc
.p¯(
På
)
excSèck
[14];

157 
excRegs
->
p§
 = 
exc
.p§ = (
På
)
excSèck
[15];

159 
exc
.
thªadTy≥
 = 
	`BIOS_gëThªadTy≥
();

160 
exc
.
thªadTy≥
) {

161 
BIOS_ThªadTy≥_Task
:

162 i‡(
BIOS_èskE«bÀd
 =
TRUE
) {

163 
exc
.
thªadH™dÀ
 = (
På
)
	`Task_£lf
();

164 
exc
.
thªadSèck
 = (
	`Task_£lf
())->
°ack
;

165 
exc
.
thªadSèckSize
 = (
	`Task_£lf
())->
°ackSize
;

168 
BIOS_ThªadTy≥_Swi
:

169 i‡(
BIOS_swiE«bÀd
 =
TRUE
) {

170 
exc
.
thªadH™dÀ
 = (
På
)
	`Swi_£lf
();

171 
exc
.
thªadSèck
 = 
Deh_moduÀ
->
i§SèckBa£
;

172 
exc
.
thªadSèckSize
 = 
Deh_moduÀ
->
i§SèckSize
;

175 
BIOS_ThªadTy≥_Hwi
:

176 
BIOS_ThªadTy≥_Maö
:

177 
exc
.
thªadH™dÀ
 = 
NULL
;

178 
exc
.
thªadSèck
 = 
Deh_moduÀ
->
i§SèckBa£
;

179 
exc
.
thªadSèckSize
 = 
Deh_moduÀ
->
i§SèckSize
;

182 
exc
.
thªadH™dÀ
 = 
NULL
;

183 
exc
.
thªadSèck
 = 
NULL
;

184 
exc
.
thªadSèckSize
 = 0;

188 
excRegs
->
ICSR
 = 
exc
.ICSR = (
På
)
Hwi_nvic
.ICSR;

189 
excRegs
->
MMFSR
 = 
exc
.MMFSR = (
På
)
Hwi_nvic
.MMFSR;

190 
excRegs
->
BFSR
 = 
exc
.BFSR = (
På
)
Hwi_nvic
.BFSR;

191 
excRegs
->
UFSR
 = 
exc
.UFSR = (
På
)
Hwi_nvic
.UFSR;

192 
excRegs
->
HFSR
 = 
exc
.HFSR = (
På
)
Hwi_nvic
.HFSR;

193 
excRegs
->
DFSR
 = 
exc
.DFSR = (
På
)
Hwi_nvic
.DFSR;

194 
excRegs
->
MMAR
 = 
exc
.MMAR = (
På
)
Hwi_nvic
.MMAR;

195 
excRegs
->
BFAR
 = 
exc
.BFAR = (
På
)
Hwi_nvic
.BFAR;

196 
excRegs
->
AFSR
 = 
exc
.AFSR = (
På
)
Hwi_nvic
.AFSR;

199 
	`BIOS_£tThªadTy≥
(
BIOS_ThªadTy≥_Maö
);

201 
excNum
 = 
Hwi_nvic
.
ICSR
 & 0xff;

202 i‡(
	`W©chdog_isEx˚±i⁄
(
excNum
)) {

203 
ëy≥
 = "Watchdog fired";

206 
	`VútQueue_po°CøshToMaûbox
();

207 
ëy≥
 = "Exception occurred";

210 
	`Sy°em_¥ötf
("%†© (PCË%08x\n", 
ëy≥
, 
exc
.
pc
);

212 
Ã
) {

214 
	`Sy°em_¥ötf
("CPU context: ISR\n");

218 
	`Sy°em_¥ötf
("CPU context:Åhread\n");

221 
	`Sy°em_¥ötf
("CPU c⁄ãxt: unknown. LR: %08x\n", 
Ã
);

225 
exc
.
thªadTy≥
) {

226 
BIOS_ThªadTy≥_Task
: {

227 
ây≥
 = "Task";

230 
BIOS_ThªadTy≥_Swi
: {

231 
ây≥
 = "Swi";

234 
BIOS_ThªadTy≥_Hwi
: {

235 
ây≥
 = "Hwi";

238 
BIOS_ThªadTy≥_Maö
: {

239 
ây≥
 = "Main";

243 
ây≥
 = "Invalid!";

247 i‡(
exc
.
thªadH™dÀ
) {

248 
«me
 = 
	`Task_H™dÀ_«me
(
exc
.
thªadH™dÀ
);

249 i‡(!
«me
) {

250 
«me
 = "(unnamed)";

254 
«me
 = "(nullÅask)";

256 
	`Sy°em_¥ötf
("BIOS %†«me: %†h™dÀ: 0x%x.\n", 
ây≥
, 
«me
,

257 
exc
.
thªadH™dÀ
);

259 
	`Sy°em_¥ötf
("BIOS %†°ack ba£: 0x%x.\n", 
ây≥
, 
exc
.
thªadSèck
);

260 
	`Sy°em_¥ötf
("BIOS %†°ack size: 0x%x.\n", 
ây≥
, 
exc
.
thªadSèckSize
);

262 
excNum
) {

264 
	`ti_sysbios_Ámûy_¨m_m3_Hwi_excNmi
(
excSèck
);

267 
	`ti_sysbios_Ámûy_¨m_m3_Hwi_excH¨dFau…
(
excSèck
);

270 
	`ti_sysbios_Ámûy_¨m_m3_Hwi_excMemFau…
(
excSèck
);

273 
	`ti_sysbios_Ámûy_¨m_m3_Hwi_excBusFau…
(
excSèck
);

276 
	`ti_sysbios_Ámûy_¨m_m3_Hwi_excUßgeFau…
(
excSèck
);

279 
	`ti_sysbios_Ámûy_¨m_m3_Hwi_excSvCÆl
(
excSèck
);

282 
	`ti_sysbios_Ámûy_¨m_m3_Hwi_excDebugM⁄
(
excSèck
);

289 
	`ti_sysbios_Ámûy_¨m_m3_Hwi_excRe£rved
(
excSèck
, 
excNum
);

292 i‡(!
	`W©chdog_isEx˚±i⁄
(
excNum
)) {

293 
	`ti_sysbios_Ámûy_¨m_m3_Hwi_excNoI§
(
excSèck
, 
excNum
);

298 
	`Sy°em_¥ötf
 ("R0 = 0x%08x R8 = 0x%08x\n", 
exc
.
r0
,Éxc.
r8
);

299 
	`Sy°em_¥ötf
 ("R1 = 0x%08x R9 = 0x%08x\n", 
exc
.
r1
,Éxc.
r9
);

300 
	`Sy°em_¥ötf
 ("R2 = 0x%08x R10 = 0x%08x\n", 
exc
.
r2
,Éxc.
r10
);

301 
	`Sy°em_¥ötf
 ("R3 = 0x%08x R11 = 0x%08x\n", 
exc
.
r3
,Éxc.
r11
);

302 
	`Sy°em_¥ötf
 ("R4 = 0x%08x R12 = 0x%08x\n", 
exc
.
r4
,Éxc.
r12
);

303 
	`Sy°em_¥ötf
 ("R5 = 0x%08x SP(R13Ë0x%08x\n", 
exc
.
r5
,Éxc.
•
);

304 
	`Sy°em_¥ötf
 ("R6 = 0x%08x LR(R14Ë0x%08x\n", 
exc
.
r6
,Éxc.
Ã
);

305 
	`Sy°em_¥ötf
 ("R7 = 0x%08x PC(R15Ë0x%08x\n", 
exc
.
r7
,Éxc.
pc
);

306 
	`Sy°em_¥ötf
 ("PSR = 0x%08x\n", 
exc
.
p§
);

307 
	`Sy°em_¥ötf
 ("ICSR = 0x%08x\n", 
Hwi_nvic
.
ICSR
);

308 
	`Sy°em_¥ötf
 ("MMFSR = 0x%02x\n", 
Hwi_nvic
.
MMFSR
);

309 
	`Sy°em_¥ötf
 ("BFSR = 0x%02x\n", 
Hwi_nvic
.
BFSR
);

310 
	`Sy°em_¥ötf
 ("UFSR = 0x%04x\n", 
Hwi_nvic
.
UFSR
);

311 
	`Sy°em_¥ötf
 ("HFSR = 0x%08x\n", 
Hwi_nvic
.
HFSR
);

312 
	`Sy°em_¥ötf
 ("DFSR = 0x%08x\n", 
Hwi_nvic
.
DFSR
);

313 
	`Sy°em_¥ötf
 ("MMAR = 0x%08x\n", 
Hwi_nvic
.
MMAR
);

314 
	`Sy°em_¥ötf
 ("BFAR = 0x%08x\n", 
Hwi_nvic
.
BFAR
);

315 
	`Sy°em_¥ötf
 ("AFSR = 0x%08x\n", 
Hwi_nvic
.
AFSR
);

317 
	`Sy°em_¥ötf
 ("StackÅrace\n");

318 
	`SèckDbg_wÆkSèck
((
UI¡
)
exc
.
thªadSèck
, (UI¡Îxc.
thªadSèckSize
,

319 (
UI¡
)
exc
.
•
, 
¥ötSèckE¡ry
, &
sC¡
);

321 
	`Sy°em_¥ötf
 ("Sèck dum∞ba£ %08x sizê%ld s∞%08x:\n", 
exc
.
thªadSèck
,

322 
exc
.
thªadSèckSize
,Éxc.
•
);

323 
	`dump_hex
((
UI¡
)
exc
.
thªadSèck
,Éxc.
thªadSèckSize
 / (UInt),

324 (
UI¡
)
exc
.
•
);

326 
	`Sy°em_ab‹t
("TerminatingÉxecution...\n");

328 
	}
}

	@ti/deh/DehDsp.c

39 
	~<xdc/ru¡ime/Sy°em.h
>

40 
	~<xdc/ru¡ime/Sèπup.h
>

42 
	~<ti/sysbios/BIOS.h
>

43 
	~<ti/sysbios/hÆ/ammu/AMMU.h
>

44 
	~<ti/sysbios/Ámûy/c64p/Hwi.h
>

45 
	~<ti/sysbios/Ámûy/c64p/Ex˚±i⁄.h
>

47 
	~<ti/ùc/Mu…iProc.h
>

48 
	~<ti/deh/W©chdog.h
>

50 
	~"∑ckage/öã∫Æ/Deh.xdc.h
"

55 
I¡
 
	$Deh_ModuÀ_°¨tup
(
I¡
 
pha£
)

57 i‡(
	`AMMU_ModuÀ_°¨tupD⁄e
(Ë=
TRUE
) {

58 
	`W©chdog_öô
(
ti_sysbios_Ámûy_c64p_Ex˚±i⁄_di•©ch__E
);

59  
Sèπup_DONE
;

62  
Sèπup_NOTDONE
;

63 
	}
}

68 
Void
 
	$Deh_idÀBegö
(
Void
)

70 
	`W©chdog_idÀBegö
();

71 
	}
}

77 
Void
 
	$Deh_excH™dÀrD•
()

79 
Ex˚±i⁄_Sètus
 
excSètus
;

80 
	`Ex˚±i⁄_gëLa°Sètus
(&
excSètus
);

81 
	`mem˝y
(
moduÀ
->
outbuf
, 
excSètus
.
excC⁄ãxt
, (*excStatus.excContext));

83 
	`Sy°em_ab‹t
("TerminatingÉxecution...\n");

84 
	}
}

	@ti/deh/Watchdog.c

39 
	~<xdc/ru¡ime/As£π.h
>

40 
	~<xdc/ru¡ime/Sy°em.h
>

41 
	~<xdc/ru¡ime/Eº‹.h
>

42 
	~<xdc/ru¡ime/Sy°em.h
>

43 
	~<xdc/ru¡ime/Sèπup.h
>

44 
	~<xdc/ru¡ime/Mem‹y.h
>

45 
	~<xdc/ru¡ime/Ty≥s.h
>

47 
	~<ti/sysbios/BIOS.h
>

48 
	~<ti/sysbios/k∆/Swi.h
>

49 
	~<ti/sysbios/k∆/Task.h
>

50 
	~<ti/sysbios/öãrÁ˚s/ITimî.h
>

51 
	~<ti/sysbios/timîs/dmtimî/Timî.h
>

53 #ifde‡
DSP


54 
	~<ti/sysbios/Ámûy/c64p/Hwi.h
>

57 #ifde‡
M3_ONLY


58 
	~<ti/sysbios/Ámûy/¨m/m3/Hwi.h
>

61 #ifde‡
SMP


62 
	~<ti/sysbios/hÆ/C‹e.h
>

65 
	~<ti/pm/IpcPowî.h
>

67 
	~"∑ckage/öã∫Æ/W©chdog.xdc.h
"

70 
	#REG32
(
A
Ë(*(vﬁ©ûê
UI¡32
 *Ë(A))

	)

73 
	#WATCHDOG_TIMER_TWPS_W_PEND_TGRR
 0x8

	)

76 
	#WATCHDOG_TIMER_TWPS_W_PEND_TLDR
 0x4

	)

79 
	#WATCHDOG_TIMER_TWPS_W_PEND_TCRR
 0x2

	)

82 
	#WATCHDOG_TIMER_TWPS_W_PEND_TCLR
 0x1

	)

85 
	#WATCHDOG_WDT_CLKCTRL_IDLEST_MASK
 (3 << 16)

	)

90 
Void
 
	$öôTimî
(
W©chdog_TimîRegs
 *
timî
, 
Boﬁ
 
boŸ
)

92 
Timî_H™dÀ
 
tH™dÀ
;

93 
Ty≥s_FªqHz
 
tFªq
;

96 
tH™dÀ
 = 
	`Timî_Obje˘_gë
(
NULL
, 0);

97 
	`Timî_gëFªq
(
tH™dÀ
, &
tFªq
);

99 
timî
->
ti§
 = ~0;

100 
timî
->
tõr
 = 2;

101 
timî
->
twî
 = 2;

102 
timî
->
édr
 = (0 - (
tFªq
.
lo
 * 
W©chdog_TIME_SEC
));

105 i‡(
boŸ
) {

106 
timî
->
t¸r
 = (0 - (
tFªq
.
lo
 * 
W©chdog_BOOT_TIME_SEC
));

109 
timî
->
t¸r
 = (0 - (
tFªq
.
lo
 * 
W©chdog_TIME_SEC
));

112 
timî
->
tsi¸
 |= 4;

113 
	}
}

118 
Void
 
W©chdog_öô
–
	$Void
 (*
timîFxn
)(
Void
) )

120 
Hwi_P¨ams
 
hwiP¨ams
;

121 
UI¡
 
key
;

122 
Timî_H™dÀ
 
tH™dÀ
;

123 
Ty≥s_FªqHz
 
tFªq
;

124 
W©chdog_TimîRegs
 *
timî
;

125 
I¡
 
i
;

127 
tH™dÀ
 = 
	`Timî_Obje˘_gë
(
NULL
, 0);

128 
	`Timî_gëFªq
(
tH™dÀ
, &
tFªq
);

130 
i
 = 0; i < 
W©chdog_moduÀ
->
wdtC‹es
; i++) {

131 
timî
 = (
W©chdog_TimîRegs
 *Ë
W©chdog_moduÀ
->
devi˚
[
i
].
ba£Addr
;

134 i‡((
	`REG32
(
W©chdog_moduÀ
->
devi˚
[
i
].
˛kCål
) &

135 
WATCHDOG_WDT_CLKCTRL_IDLEST_MASK
) ==

136 
WATCHDOG_WDT_CLKCTRL_IDLEST_MASK
) {

137 
	`Sy°em_¥ötf
("Watchdog disabled: TimerBase = 0x%x ClkCtrl = 0x%x\n",

138 
timî
, 
W©chdog_moduÀ
->
devi˚
[
i
].
˛kCål
);

143 
	`öôTimî
(
timî
, 
TRUE
);

146 
	`Hwi_P¨ams_öô
(&
hwiP¨ams
);

147 
hwiP¨ams
.
¥i‹ôy
 = 1;

148 
hwiP¨ams
.
evítId
 = 
W©chdog_moduÀ
->
devi˚
[
i
].eventId;

149 
hwiP¨ams
.
maskSëtög
 = 
Hwi_MaskögO±i⁄_LOWER
;

150 
key
 = 
	`Hwi_dißbÀ
();

151 
	`Hwi_¸óã
(
W©chdog_moduÀ
->
devi˚
[
i
].
ötNum
, (
Hwi_FuncPå
Ë
timîFxn
,

152 &
hwiP¨ams
, 
NULL
);

153 
	`Hwi_íabÀI¡îru±
(
W©chdog_moduÀ
->
devi˚
[
i
].
ötNum
);

154 
	`Hwi_ª°‹e
(
key
);

157 
timî
->
twps
 & 
WATCHDOG_TIMER_TWPS_W_PEND_TCLR
);

158 
timî
->
t˛r
 |= 1;

159 
W©chdog_moduÀ
->
°©us
[
i
] = 
W©chdog_Mode_ENABLED
;

161 #ifde‡
SMP


162 
	`Sy°em_¥ötf
("WatchdogÉnabled: TimerBase = 0x%x SMP-Core = %d "

163 "Fªq = %d\n", 
timî
, 
i
, 
tFªq
.
lo
);

165 
	`Sy°em_¥ötf
("WatchdogÉnabled: TimerBase = 0x%x Freq = %d\n",

166 
timî
, 
tFªq
.
lo
);

171 i‡(!
	`IpcPowî_ªgi°îCÆlback
(
IpcPowî_Evít_RESUME
, 
W©chdog_ª°‹e
,

172 
NULL
)) {

173 
	`Sy°em_¥ötf
("Watchdog_restoreÑegisteredásáÑesume callback\n");

177 
	}
}

182 
Void
 
	$W©chdog_idÀBegö
(
Void
)

184 
I¡
 
c‹e
 = 0;

186 #ifde‡
SMP


187 
c‹e
 = 
	`C‹e_gëId
();

189 i‡(
c‹e
 != 0) {

190 
	`W©chdog_°›
(
c‹e
);

195 
	`W©chdog_kick
(
c‹e
);

197 
	}
}

202 
Void
 
	$W©chdog_swiPªhook
(
Swi_H™dÀ
 
swi
)

204 
I¡
 
c‹e
 = 0;

206 #ifde‡
SMP


207 
c‹e
 = 
	`C‹e_gëId
();

209 i‡(
c‹e
 != 0) {

210 
	`W©chdog_°¨t
(
c‹e
);

215 
	`W©chdog_kick
(
c‹e
);

217 
	}
}

223 
Void
 
	$W©chdog_èskSwôch
(
Task_H™dÀ
 
p
, Task_H™dÀ 
n
)

225 
I¡
 
c‹e
 = 0;

227 #ifde‡
SMP


228 
c‹e
 = 
	`C‹e_gëId
();

230 i‡(
c‹e
 != 0) {

231 
	`W©chdog_°¨t
(
c‹e
);

236 
	`W©chdog_kick
(
c‹e
);

238 
	}
}

243 
Boﬁ
 
	$W©chdog_isEx˚±i⁄
(
UI¡
 
excNum
)

245 
I¡
 
i
;

246 
Boﬁ
 
found
 = 
FALSE
;

248 
i
 = 0; i < 
W©chdog_moduÀ
->
wdtC‹es
; i++) {

249 i‡(
excNum
 =
W©chdog_moduÀ
->
devi˚
[
i
].
ötNum
) {

250 
found
 = 
TRUE
;

255  
found
;

256 
	}
}

261 
Void
 
	$W©chdog_°›
(
I¡
 
c‹e
)

263 
W©chdog_TimîRegs
 *
timî
 = 
W©chdog_moduÀ
->
devi˚
[
c‹e
].
ba£Addr
;

265 i‡((
W©chdog_moduÀ
->
°©us
[
c‹e
] =
W©chdog_Mode_ENABLED
Ë&& 
timî
) {

266 
timî
->
twps
 & 
WATCHDOG_TIMER_TWPS_W_PEND_TCLR
);

267 
timî
->
t˛r
 &= ~1;

269 
	}
}

274 
Void
 
	$W©chdog_°¨t
(
I¡
 
c‹e
)

276 
W©chdog_TimîRegs
 *
timî
 = 
W©chdog_moduÀ
->
devi˚
[
c‹e
].
ba£Addr
;

278 i‡((
W©chdog_moduÀ
->
°©us
[
c‹e
] =
W©chdog_Mode_ENABLED
Ë&& 
timî
) {

279 
timî
->
twps
 & 
WATCHDOG_TIMER_TWPS_W_PEND_TCLR
);

280 
timî
->
t˛r
 |= 1;

282 
timî
->
twps
 & 
WATCHDOG_TIMER_TWPS_W_PEND_TGRR
);

283 
timî
->
âgr
 = 0;

285 
	}
}

291 
Void
 
	$W©chdog_kick
(
I¡
 
c‹e
)

293 
W©chdog_TimîRegs
 *
timî
 = 
W©chdog_moduÀ
->
devi˚
[
c‹e
].
ba£Addr
;

295 i‡((
W©chdog_moduÀ
->
°©us
[
c‹e
] =
W©chdog_Mode_ENABLED
Ë&& 
timî
) {

296 
timî
->
twps
 & 
WATCHDOG_TIMER_TWPS_W_PEND_TGRR
);

297 
timî
->
âgr
 = 0;

299 
	}
}

305 
Void
 
	$W©chdog_ª°‹e
(
I¡
 
evít
, 
På
 
d©a
)

307 
I¡
 
i
;

308 
W©chdog_TimîRegs
 *
timî
;

310 
i
 = 0; i < 
W©chdog_moduÀ
->
wdtC‹es
; i++) {

311 
timî
 = (
W©chdog_TimîRegs
 *Ë
W©chdog_moduÀ
->
devi˚
[
i
].
ba£Addr
;

313 i‡(
W©chdog_moduÀ
->
°©us
[
i
] =
W©chdog_Mode_ENABLED
) {

315 
	`öôTimî
(
timî
, 
FALSE
);

318 
timî
->
twps
 & 
WATCHDOG_TIMER_TWPS_W_PEND_TCLR
);

319 
timî
->
t˛r
 |= 1;

322 
	}
}

	@ti/examples/srvmgr/hwspinlock_task.c

38 
	~<xdc/°d.h
>

39 
	~<xdc/cfg/globÆ.h
>

40 
	~<xdc/ru¡ime/Sy°em.h
>

42 
	~<ti/sysbios/BIOS.h
>

43 
	~<ti/sysbios/k∆/Task.h
>

45 
	~<°dio.h
>

46 
	~<°rög.h
>

47 
	~<°dlib.h
>

49 
	~<ti/g©es/hw•ölock/HwSpölock.h
>

50 
	~<ti/sysbios/hÆ/Hwi.h
>

52 
Såög
 
	gHwSpölockSèãsName
[] = {

58 
Void
 
	$ã°HwSpölock
(
HwSpölock_H™dÀ
 
h™dÀ
, 
HwSpölock_Pªem±G©e
 
Õ
,

59 
I¡
 
timeout
)

61 
I¡
 
id
, 
°©us
;

62 
UI¡
 
t
 = 0xFFFF;

63 
HwSpölock_Key
 
key
;

65 i‡(
h™dÀ
) {

66 
id
 = 
	`HwSpölock_gëId
(
h™dÀ
);

67 
	`Sy°em_¥ötf
(" HwSpinlock id(%d)Åsk(0x%x)Öri(%d)\n",

68 
id
, 
	`Task_£lf
(), 
	`Task_gëPri
(Task_self()));

71 
	`Sy°em_¥ötf
("Error Handle is NULLÅsk(0x%x)Öri(%d)\n",

72 
	`Task_£lf
(), 
	`Task_gëPri
(Task_self()));

76 
	`Sy°em_¥ötf
("Acquiring HwSpinlock(%d) ...tsk(0x%x)Öri(%d) \n",

77 
id
, 
	`Task_£lf
(), 
	`Task_gëPri
(Task_self()));

78 
°©us
 = 
	`HwSpölock_íãr
(
h™dÀ
, 
Õ
, 
timeout
, &
key
);

79 
	`Sy°em_¥ötf
("HwSpölock(%dË°©e(%sËtsk(0x%xË¥i(%d)\n", 
id
,

80 
HwSpölockSèãsName
[
	`HwSpölock_gëSèã
(
h™dÀ
)],

81 
	`Task_£lf
(), 
	`Task_gëPri
(Task_self()));

84 i‡(
°©us
) {

85 
	`Sy°em_¥ötf
("TIMEOUT: HwSpinlock(%d)Åsk(0x%x)Öri(%d)\n",

86 
id
, 
	`Task_£lf
(), 
	`Task_gëPri
(Task_self()));

89 i‡(
Õ
 =
HwSpölock_Pªem±G©e_NONE
) {

90 
	`Task_¶ìp
(1);

93 
t
--);

97 
	`Sy°em_¥ötf
("Releasing HwSpinlock(%d)...tsk(0x%x)Öri(%d)\n",

98 
id
, 
	`Task_£lf
(), 
	`Task_gëPri
(Task_self()));

99 
	`HwSpölock_Àave
(
h™dÀ
, &
key
);

100 
	`Sy°em_¥ötf
("HwSpölock(%dË°©e(%sËtsk(0x%xË¥i(%d)\n", 
id
,

101 
HwSpölockSèãsName
[
	`HwSpölock_gëSèã
(
h™dÀ
)],

102 
	`Task_£lf
(), 
	`Task_gëPri
(Task_self()));

103 
	}
}

105 
Void
 
	$dñëeHwSpölock
(
HwSpölock_H™dÀ
 
h™dÀ
)

107 
I¡
 
°©us
, 
id
;

109 
id
 = 
	`HwSpölock_gëId
(
h™dÀ
);

111 
	`Sy°em_¥ötf
("Deleting HwSpinlockÅsk(0x%x)Öri(%d)\n",

112 
	`Task_£lf
(), 
	`Task_gëPri
(Task_self()));

113 
°©us
 = 
	`HwSpölock_dñëe
(
h™dÀ
);

114 i‡(
°©us
) {

115 
	`Sy°em_¥ötf
("Del Error(%d) spinlock(%d) state(%s)Åsk(0x%x)Öri(%d)",

116 
°©us
, 
id
,

117 
HwSpölockSèãsName
[
	`HwSpölock_gëSèã
(
h™dÀ
)],

118 
	`Task_£lf
(), 
	`Task_gëPri
(Task_self()));

120 
	}
}

122 
Void
 
	$hwSpölockTe°TaskFxn
(
UArg
 
¨g0
, UArg 
¨g1
)

124 
HwSpölock_P¨ams
 
∑øms
;

125 
HwSpölock_H™dÀ
 
h™dÀ1
, 
h™dÀ2
, 
h™dÀ3
, 
h™dÀ4
;

127 
	`HwSpölock_P¨ams_öô
(&
∑øms
);

128 
	`Sy°em_¥ötf
("Create 4 HwSpinlock instancesÅsk(0x%x)Öri(%d)\n",

129 
	`Task_£lf
(), 
	`Task_gëPri
(Task_self()));

130 
∑øms
.
id
 = 0;

131 
h™dÀ1
 = 
	`HwSpölock_¸óã
(&
∑øms
);

133 
∑øms
.
id
 = 1;

134 
h™dÀ2
 = 
	`HwSpölock_¸óã
(&
∑øms
);

136 
∑øms
.
id
 = 2;

137 
h™dÀ3
 = 
	`HwSpölock_¸óã
(&
∑øms
);

139 
∑øms
.
id
 = 3;

140 
h™dÀ4
 = 
	`HwSpölock_¸óã
(&
∑øms
);

142 
	`ã°HwSpölock
(
h™dÀ1
, 
HwSpölock_Pªem±G©e_NONE
,

143 
HwSpölock_WAIT_FOREVER
);

144 
	`ã°HwSpölock
(
h™dÀ1
, 
HwSpölock_Pªem±G©e_TASK
,

145 
HwSpölock_WAIT_FOREVER
);

146 
	`ã°HwSpölock
(
h™dÀ1
, 
HwSpölock_Pªem±G©e_NONE
,

147 
HwSpölock_WAIT_FOREVER
);

148 
	`ã°HwSpölock
(
h™dÀ2
, 
HwSpölock_Pªem±G©e_HWI
, 200);

149 
	`ã°HwSpölock
(
h™dÀ3
, 
HwSpölock_Pªem±G©e_TASK
, 200);

150 
	`ã°HwSpölock
(
h™dÀ4
, 
HwSpölock_Pªem±G©e_TASK
, 200);

151 
	`ã°HwSpölock
(
h™dÀ1
, 
HwSpölock_Pªem±G©e_TASK
, 500);

152 
	`ã°HwSpölock
(
h™dÀ2
, 
HwSpölock_Pªem±G©e_HWI
, 200);

153 
	`ã°HwSpölock
(
h™dÀ3
, 
HwSpölock_Pªem±G©e_TASK
,500);

154 
	`ã°HwSpölock
(
h™dÀ4
, 
HwSpölock_Pªem±G©e_NONE
, 3000);

156 
	`Sy°em_¥ötf
("Delete 4 HwSpinlock instancesÅsk(0x%x)Öri(%d)\n",

157 
	`Task_£lf
(), 
	`Task_gëPri
(Task_self()));

159 
	`dñëeHwSpölock
(
h™dÀ1
);

160 
	`dñëeHwSpölock
(
h™dÀ2
);

161 
	`dñëeHwSpölock
(
h™dÀ3
);

162 
	`dñëeHwSpölock
(
h™dÀ4
);

164 
	`Sy°em_¥ötf
("End ofÅsk(0x%x)Öri(%d) ...\n",

165 
	`Task_£lf
(), 
	`Task_gëPri
(Task_self()));

167 
	}
}

169 
Void
 
	$°¨t_hwSpölock_èsk
()

171 #ifde‡
CORE0


172 
Task_P¨ams
 
∑øms
;

174 
	`Task_P¨ams_öô
(&
∑øms
);

175 
∑øms
.
ö°™˚
->
«me
 = "HwSpinlockTest1";

176 
∑øms
.
¥i‹ôy
 = 3;

177 
	`Task_¸óã
(
hwSpölockTe°TaskFxn
, &
∑øms
, 
NULL
);

179 
	`Task_P¨ams_öô
(&
∑øms
);

180 
∑øms
.
ö°™˚
->
«me
 = "HwSpinlockTest2";

181 
∑øms
.
¥i‹ôy
 = 4;

182 
	`Task_¸óã
(
hwSpölockTe°TaskFxn
, &
∑øms
, 
NULL
);

185 
	`Task_P¨ams_öô
(&
∑øms
);

186 
∑øms
.
ö°™˚
->
«me
 = "HwSpinlockTest3";

187 
∑øms
.
¥i‹ôy
 = 3;

188 
	`Task_¸óã
(
hwSpölockTe°TaskFxn
, &
∑øms
, 
NULL
);

190 
	}
}

	@ti/examples/srvmgr/ping_tasks.c

38 
	~<xdc/°d.h
>

39 
	~<xdc/cfg/globÆ.h
>

40 
	~<xdc/ru¡ime/Sy°em.h
>

42 
	~<ti/ùc/Mu…iProc.h
>

43 
	~<ti/sysbios/BIOS.h
>

44 
	~<ti/sysbios/k∆/Task.h
>

46 
	~<°dio.h
>

47 
	~<°rög.h
>

48 
	~<°dlib.h
>

50 
	~<ti/ùc/Ωmsg/MesßgeQC›y.h
>

51 
	~<ti/§vmgr/NameM≠.h
>

52 
	~<ti/ªsmgr/IpcResour˚.h
>

54 
	#APP_NUM_ITERATIONS
 100000

	)

56 
Void
 
	$c›yTaskFxn
(
UArg
 
¨g0
, UArg 
¨g1
)

58 
MesßgeQC›y_H™dÀ
 
h™dÀ
;

59 
Ch¨
 
buf„r
[128];

60 
UI¡32
 
myEndpoöt
 = 0;

61 
UI¡32
 
ªmŸeEndpoöt
;

62 
UI¡16
 
d°Proc
;

63 
UI¡16
 
Àn
;

64 
I¡
 
i
;

66 
	`Sy°em_¥ötf
("c›yTask %d: E¡îed...:\n", 
¨g0
);

68 
d°Proc
 = 
	`Mu…iProc_gëId
("HOST");

70 
	`MesßgeQC›y_öô
(
d°Proc
);

73 
h™dÀ
 = 
	`MesßgeQC›y_¸óã
(
¨g0
, &
myEndpoöt
);

75 
	`NameM≠_ªgi°î
("Ωmsg-˛õ¡-ßm∂e", 
¨g0
);

77 
i
 = 0; i < 
APP_NUM_ITERATIONS
; i++) {

79 
	`MesßgeQC›y_ªcv
(
h™dÀ
, (
På
)
buf„r
, &
Àn
, &
ªmŸeEndpoöt
,

80 
MesßgeQC›y_FOREVER
);

82 
buf„r
[
Àn
] = '\0';

83 
	`Sy°em_¥ötf
("c›yTask %d: Re˚ived d©a: %s,Üí:%d\n", 
i
 + 1,

84 
buf„r
, 
Àn
);

87 
	`MesßgeQC›y_£nd
(
d°Proc
, 
ªmŸeEndpoöt
, 
myEndpoöt
, (
På
)
buf„r
, 
Àn
);

91 
	`MesßgeQC›y_dñëe
(&
h™dÀ
);

94 
	`MesßgeQC›y_föÆize
();

95 
	}
}

97 
	$°¨t_pög_èsks
()

99 
Task_P¨ams
 
∑øms
;

102 
	`Task_P¨ams_öô
(&
∑øms
);

103 
∑øms
.
ö°™˚
->
«me
 = "copy0";

104 
∑øms
.
¥i‹ôy
 = 3;

105 
∑øms
.
¨g0
 = 50;

106 
	`Task_¸óã
(
c›yTaskFxn
, &
∑øms
, 
NULL
);

108 
	`Task_P¨ams_öô
(&
∑øms
);

109 
∑øms
.
ö°™˚
->
«me
 = "copy1";

110 
∑øms
.
¥i‹ôy
 = 3;

111 
∑øms
.
¨g0
 = 51;

112 
	`Task_¸óã
(
c›yTaskFxn
, &
∑øms
, 
NULL
);

113 
	}
}

	@ti/examples/srvmgr/resmgr_task.c

38 
	~<xdc/°d.h
>

39 
	~<xdc/cfg/globÆ.h
>

40 
	~<xdc/ru¡ime/Sy°em.h
>

42 
	~<ti/sysbios/BIOS.h
>

43 
	~<ti/sysbios/k∆/Task.h
>

45 
	~<°dio.h
>

46 
	~<°rög.h
>

47 
	~<°dlib.h
>

49 
	~<ti/ªsmgr/IpcResour˚.h
>

53 
	#SLEEP_TICKS
 1000

	)

57 
	$IpcResour˚TaskFxn
(
UArg
 
¨g0
, UArg 
¨g1
)

59 
UI¡32
 
°©us
;

60 
IpcResour˚_H™dÀ
 
ùcResH™dÀ
;

61 #ifde‡
GPT


62 
IpcResour˚_G±
 
g±
;

63 
IpcResour˚_ResH™dÀ
 
g±Id
;

65 
IpcResour˚_I2c
 
i2c
;

66 
IpcResour˚_Aux˛k
 
aux˛k
;

67 
IpcResour˚_Reguœt‹
 
ªguœt‹
;

68 
IpcResour˚_Gpio
 
gpio
;

69 
IpcResour˚_Sdma
 
sdma
;

70 
IpcResour˚_ResH™dÀ
 
ivaId
, 
ivasq0Id
, 
ivasq1Id
;

71 
IpcResour˚_C⁄°øötD©a
 
ivaC⁄°øöts
;

72 
IpcResour˚_ResH™dÀ
 
issId
;

73 
IpcResour˚_C⁄°øötD©a
 
issC⁄°øöts
;

74 
IpcResour˚_ResH™dÀ
 
fdifId
;

75 
IpcResour˚_C⁄°øötD©a
 
fdifC⁄°øöts
;

76 
IpcResour˚_ResH™dÀ
 
¶2ifId
;

77 
IpcResour˚_ResH™dÀ
 
auxClkId
;

78 
IpcResour˚_ResH™dÀ
 
i2cId
;

79 
IpcResour˚_ResH™dÀ
 
ªguœt‹Id
;

80 
IpcResour˚_ResH™dÀ
 
gpioId
;

81 
IpcResour˚_ResH™dÀ
 
sdmaId
;

82 #i‡
	`deföed
(
CORE0
Ë|| deföed(
CORE1
)

83 
IpcResour˚_ResH™dÀ
 
ùuId
;

84 
IpcResour˚_C⁄°øötD©a
 
ùuC⁄°øöts
;

86 #ifde‡
DSP


87 
IpcResour˚_ResH™dÀ
 
d•Id
;

88 
IpcResour˚_C⁄°øötD©a
 
d•C⁄°øöts
;

90 
I¡
 
lo›
 = 1;

92 
	`Task_¶ìp
(
SLEEP_TICKS
);

93 
	`Sy°em_¥ötf
("\nConnectingÅoÑesmgr server...\n");

94 
ùcResH™dÀ
 = 
	`IpcResour˚_c⁄√˘
(0);

95 i‡(!
ùcResH™dÀ
) {

96 
	`Sy°em_¥ötf
("FailedÅo connectÅoÅheÑesmgr server\n");

99 
	`Sy°em_¥ötf
("...connectedÅoÑesmgr server\n");

101 
lo›
--) {

102 #i‡
	`deföed
(
CORE0
Ë|| deföed(
CORE1
)

103 
	`Sy°em_¥ötf
("\nRequesting IPU...");

104 
°©us
 = 
	`IpcResour˚_ªque°
(
ùcResH™dÀ
, &
ùuId
,

105 
IpcResour˚_TYPE_IPU
, 
NULL
);

106 i‡(!
°©us
) {

107 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

110 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

113 
	`Task_¶ìp
(
SLEEP_TICKS
);

115 
ùuC⁄°øöts
.
mask
 = 
IpcResour˚_C_LAT
 | 
IpcResour˚_C_BW
;

116 
ùuC⁄°øöts
.
œãncy
 = 10;

117 
ùuC⁄°øöts
.
b™dwidth
 = 1000;

118 
	`Sy°em_¥ötf
("Requesting Constraints for IPU: BW = %d LAT = %d...",

119 
ùuC⁄°øöts
.
b™dwidth
, ipuC⁄°øöts.
œãncy
);

120 
°©us
 = 
	`IpcResour˚_ªque°C⁄°øöts
(
ùcResH™dÀ
, 
ùuId
,

121 &
ùuC⁄°øöts
);

122 i‡(!
°©us
) {

123 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

126 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

129 
	`Task_¶ìp
(
SLEEP_TICKS
);

131 
ùuC⁄°øöts
.
mask
 = 
IpcResour˚_C_FREQ
 | 
IpcResour˚_C_BW
;

132 
ùuC⁄°øöts
.
‰equícy
 = 400000000;

133 
ùuC⁄°øöts
.
b™dwidth
 = 1000;

134 
	`Sy°em_¥ötf
("Requesting Constraints for IPU: BW = %d FREQ = %d...",

135 
ùuC⁄°øöts
.
b™dwidth
, ipuC⁄°øöts.
‰equícy
);

136 
°©us
 = 
	`IpcResour˚_ªque°C⁄°øöts
(
ùcResH™dÀ
, 
ùuId
,

137 &
ùuC⁄°øöts
);

138 i‡(
°©us
) {

139 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

142 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

145 
	`Task_¶ìp
(
SLEEP_TICKS
);

147 
ùuC⁄°øöts
.
mask
 = 
IpcResour˚_C_FREQ
 | 
IpcResour˚_C_BW
 |

148 
IpcResour˚_C_LAT
;

149 
ùuC⁄°øöts
.
œãncy
 = 10;

150 
ùuC⁄°øöts
.
‰equícy
 = 400000000;

151 
ùuC⁄°øöts
.
b™dwidth
 = 1000;

152 
	`Sy°em_¥ötf
("Requesting Constraints for IPU: BW = %d LAT = %d "

153 "FREQ = %d...", 
ùuC⁄°øöts
.
b™dwidth
,

154 
ùuC⁄°øöts
.
œãncy
, ipuC⁄°øöts.
‰equícy
);

155 
°©us
 = 
	`IpcResour˚_ªque°C⁄°øöts
(
ùcResH™dÀ
, 
ùuId
,

156 &
ùuC⁄°øöts
);

157 i‡(
°©us
) {

158 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

161 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

164 
	`Task_¶ìp
(
SLEEP_TICKS
);

166 
ùuC⁄°øöts
.
mask
 = 
IpcResour˚_C_BW
 | 
IpcResour˚_C_LAT
;

167 
ùuC⁄°øöts
.
œãncy
 = -1;

168 
ùuC⁄°øöts
.
b™dwidth
 = -1;

169 
	`Sy°em_¥ötf
("Releasing Constraints for IPU: BW = %d LAT = %d ",

170 
ùuC⁄°øöts
.
b™dwidth
, ipuC⁄°øöts.
œãncy
);

171 
°©us
 = 
	`IpcResour˚_ªque°C⁄°øöts
(
ùcResH™dÀ
, 
ùuId
,

172 &
ùuC⁄°øöts
);

173 i‡(!
°©us
) {

174 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

177 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

180 
	`Task_¶ìp
(
SLEEP_TICKS
);

182 
ùuC⁄°øöts
.
mask
 = 
IpcResour˚_C_FREQ
;

183 
ùuC⁄°øöts
.
‰equícy
 = -1;

184 
	`Sy°em_¥ötf
("Releasing Constraints for IPU: FREQ = %d...",

185 
ùuC⁄°øöts
.
‰equícy
);

186 
°©us
 = 
	`IpcResour˚_ªque°C⁄°øöts
(
ùcResH™dÀ
, 
ùuId
,

187 &
ùuC⁄°øöts
);

188 i‡(
°©us
) {

189 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

192 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

195 
	`Task_¶ìp
(
SLEEP_TICKS
);

197 
	`Sy°em_¥ötf
("Releasing IPU...");

198 
°©us
 = 
	`IpcResour˚_ªÀa£
(
ùcResH™dÀ
, 
ùuId
);

199 i‡(!
°©us
) {

200 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

203 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

206 
	`Task_¶ìp
(
SLEEP_TICKS
);

209 #ifde‡
DSP


210 
	`Sy°em_¥ötf
("\nRequesting DSP...");

211 
°©us
 = 
	`IpcResour˚_ªque°
(
ùcResH™dÀ
, &
d•Id
,

212 
IpcResour˚_TYPE_DSP
, 
NULL
);

213 i‡(!
°©us
) {

214 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

217 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

220 
	`Task_¶ìp
(
SLEEP_TICKS
);

222 
d•C⁄°øöts
.
mask
 = 
IpcResour˚_C_LAT
 | 
IpcResour˚_C_BW
;

223 
d•C⁄°øöts
.
œãncy
 = 10;

224 
d•C⁄°øöts
.
b™dwidth
 = 1000;

225 
	`Sy°em_¥ötf
("Requesting Constraints for DSP: BW = %d LAT = %d...",

226 
d•C⁄°øöts
.
b™dwidth
, d•C⁄°øöts.
œãncy
);

227 
°©us
 = 
	`IpcResour˚_ªque°C⁄°øöts
(
ùcResH™dÀ
, 
d•Id
,

228 &
d•C⁄°øöts
);

229 i‡(!
°©us
) {

230 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

233 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

236 
	`Task_¶ìp
(
SLEEP_TICKS
);

238 
d•C⁄°øöts
.
mask
 = 
IpcResour˚_C_FREQ
 | 
IpcResour˚_C_LAT
 |

239 
IpcResour˚_C_BW
;

240 
d•C⁄°øöts
.
mask
 = 
IpcResour˚_C_FREQ
 | 
IpcResour˚_C_BW
;

241 
d•C⁄°øöts
.
‰equícy
 = 465500000;

242 
d•C⁄°øöts
.
œãncy
 = 10;

243 
d•C⁄°øöts
.
b™dwidth
 = 1000;

244 
	`Sy°em_¥ötf
("Requesting Constraints for DSP: BW = %d LAT = %d "

245 "FREQ = %d...", 
d•C⁄°øöts
.
b™dwidth
,

246 
d•C⁄°øöts
.
œãncy
, d•C⁄°øöts.
‰equícy
);

247 
°©us
 = 
	`IpcResour˚_ªque°C⁄°øöts
(
ùcResH™dÀ
, 
d•Id
,

248 &
d•C⁄°øöts
);

249 i‡(!
°©us
) {

250 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

253 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

256 
	`Task_¶ìp
(
SLEEP_TICKS
);

258 
d•C⁄°øöts
.
mask
 = 
IpcResour˚_C_FREQ
 | 
IpcResour˚_C_BW
 |

259 
IpcResour˚_C_LAT
;

260 
d•C⁄°øöts
.
œãncy
 = -1;

261 
d•C⁄°øöts
.
‰equícy
 = -1;

262 
d•C⁄°øöts
.
b™dwidth
 = -1;

263 
	`Sy°em_¥ötf
("Releasing Constraints for DSP: BW = %d LAT = %d "

264 "FREQ = %d...", 
d•C⁄°øöts
.
b™dwidth
,

265 
d•C⁄°øöts
.
œãncy
, d•C⁄°øöts.
‰equícy
);

266 
°©us
 = 
	`IpcResour˚_ªque°C⁄°øöts
(
ùcResH™dÀ
, 
d•Id
,

267 &
d•C⁄°øöts
);

268 i‡(!
°©us
) {

269 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

272 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

275 
	`Task_¶ìp
(
SLEEP_TICKS
);

277 
	`Sy°em_¥ötf
("Releasing DSP...");

278 
°©us
 = 
	`IpcResour˚_ªÀa£
(
ùcResH™dÀ
, 
d•Id
);

279 i‡(!
°©us
) {

280 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

283 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

286 
	`Task_¶ìp
(
SLEEP_TICKS
);

289 #ifde‡
GPT


290 
g±
.
id
 = 6;

291 
g±
.
§cClk
 = 0;

292 
	`Sy°em_¥ötf
("\nReque°ög GPT #%d...", 
g±
.
id
);

293 
°©us
 = 
	`IpcResour˚_ªque°
(
ùcResH™dÀ
, &
g±Id
,

294 
IpcResour˚_TYPE_GPTIMER
, &
g±
);

295 i‡(!
°©us
) {

296 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

299 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

302 
	`Task_¶ìp
(
SLEEP_TICKS
);

304 
	`Sy°em_¥ötf
("Rñósög GPT #%d...", 
g±
.
id
);

305 
°©us
 = 
	`IpcResour˚_ªÀa£
(
ùcResH™dÀ
, 
g±Id
);

306 i‡(
°©us
) {

307 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

310 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

313 
	`Task_¶ìp
(
SLEEP_TICKS
);

315 
g±
.
id
 = 9;

316 
g±
.
§cClk
 = 0;

317 
	`Sy°em_¥ötf
("\nReque°ög GPT #%d...", 
g±
.
id
);

318 
°©us
 = 
	`IpcResour˚_ªque°
(
ùcResH™dÀ
, &
g±Id
,

319 
IpcResour˚_TYPE_GPTIMER
, &
g±
);

320 i‡(!
°©us
) {

321 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

324 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

327 
	`Task_¶ìp
(
SLEEP_TICKS
);

329 
	`Sy°em_¥ötf
("Rñósög GPT #%d...", 
g±
.
id
);

330 
°©us
 = 
	`IpcResour˚_ªÀa£
(
ùcResH™dÀ
, 
g±Id
);

331 i‡(!
°©us
) {

332 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

335 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

338 
	`Task_¶ìp
(
SLEEP_TICKS
);

341 
aux˛k
.
˛kId
 = 1;

342 
aux˛k
.
˛kR©e
 = 24000000;

343 
aux˛k
.
∑ª¡SrcClk
 = 0x2;

344 
aux˛k
.
∑ª¡SrcClkR©e
 = 192000000;

345 
	`Sy°em_¥ötf
("\nReque°ög AuxClk #%d...", 
aux˛k
.
˛kId
);

346 
°©us
 = 
	`IpcResour˚_ªque°
(
ùcResH™dÀ
, &
auxClkId
,

347 
IpcResour˚_TYPE_AUXCLK
, &
aux˛k
);

348 i‡(!
°©us
) {

349 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

352 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

355 
	`Task_¶ìp
(
SLEEP_TICKS
);

357 
	`Sy°em_¥ötf
("Rñósög AuxClk #%d...", 
aux˛k
.
˛kId
);

358 
°©us
 = 
	`IpcResour˚_ªÀa£
(
ùcResH™dÀ
, 
auxClkId
);

359 i‡(!
°©us
) {

360 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

363 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

366 
	`Task_¶ìp
(
SLEEP_TICKS
);

368 #ifde‡
OMAP5xxx


369 
aux˛k
.
˛kId
 = 2;

370 
aux˛k
.
˛kR©e
 = 24000000;

371 
aux˛k
.
∑ª¡SrcClk
 = 0x2;

372 
aux˛k
.
∑ª¡SrcClkR©e
 = 192000000;

373 
	`Sy°em_¥ötf
("Reque°ög AuxClk #%d...", 
aux˛k
.
˛kId
);

374 
°©us
 = 
	`IpcResour˚_ªque°
(
ùcResH™dÀ
, &
auxClkId
,

375 
IpcResour˚_TYPE_AUXCLK
, &
aux˛k
);

376 i‡(!
°©us
) {

377 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

380 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

383 
	`Task_¶ìp
(
SLEEP_TICKS
);

385 
	`Sy°em_¥ötf
("Rñósög AuxClk #%d...", 
aux˛k
.
˛kId
);

386 
°©us
 = 
	`IpcResour˚_ªÀa£
(
ùcResH™dÀ
, 
auxClkId
);

387 i‡(
°©us
) {

388 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

391 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

394 
	`Task_¶ìp
(
SLEEP_TICKS
);

397 
aux˛k
.
˛kId
 = 3;

398 
aux˛k
.
˛kR©e
 = 24000000;

399 
aux˛k
.
∑ª¡SrcClk
 = 0x2;

400 
aux˛k
.
∑ª¡SrcClkR©e
 = 192000000;

401 
	`Sy°em_¥ötf
("Reque°ög AuxClk #%d...", 
aux˛k
.
˛kId
);

402 
°©us
 = 
	`IpcResour˚_ªque°
(
ùcResH™dÀ
, &
auxClkId
,

403 
IpcResour˚_TYPE_AUXCLK
, &
aux˛k
);

404 i‡(!
°©us
) {

405 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

408 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

411 
	`Task_¶ìp
(
SLEEP_TICKS
);

413 
	`Sy°em_¥ötf
("Rñósög AuxClk #%d...", 
aux˛k
.
˛kId
);

414 
°©us
 = 
	`IpcResour˚_ªÀa£
(
ùcResH™dÀ
, 
auxClkId
);

415 i‡(!
°©us
) {

416 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

419 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

422 
	`Task_¶ìp
(
SLEEP_TICKS
);

424 #i‡
OMAP4xxx


425 
ªguœt‹
.
ªguœt‹Id
 = 0;

426 
ªguœt‹
.
möUV
 = 2000000;

427 
ªguœt‹
.
maxUV
 = 2500000;

428 
	`Sy°em_¥ötf
("\nReque°ögÑeguœt‹ #%d...", 
ªguœt‹
.
ªguœt‹Id
);

429 
°©us
 = 
	`IpcResour˚_ªque°
(
ùcResH™dÀ
, &
ªguœt‹Id
,

430 
IpcResour˚_TYPE_REGULATOR
, &
ªguœt‹
);

431 i‡(
°©us
) {

432 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

435 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

438 
	`Task_¶ìp
(
SLEEP_TICKS
);

440 
	`Sy°em_¥ötf
("RñósögÑeguœt‹ #%d...", 
ªguœt‹
.
ªguœt‹Id
);

441 
°©us
 = 
	`IpcResour˚_ªÀa£
(
ùcResH™dÀ
, 
ªguœt‹Id
);

442 i‡(
°©us
) {

443 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

446 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

449 
	`Task_¶ìp
(
SLEEP_TICKS
);

452 
ªguœt‹
.
ªguœt‹Id
 = 1;

453 #ifde‡
OMAP5xxx


454 
ªguœt‹
.
möUV
 = 2800000;

455 
ªguœt‹
.
maxUV
 = 2800000;

457 #ifde‡
OMAP4xxx


458 
ªguœt‹
.
möUV
 = 2000000;

459 
ªguœt‹
.
maxUV
 = 2500000;

461 
	`Sy°em_¥ötf
("\nReque°ögÑeguœt‹ #%d...", 
ªguœt‹
.
ªguœt‹Id
);

462 
°©us
 = 
	`IpcResour˚_ªque°
(
ùcResH™dÀ
, &
ªguœt‹Id
,

463 
IpcResour˚_TYPE_REGULATOR
, &
ªguœt‹
);

464 i‡(!
°©us
) {

465 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

468 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

471 
	`Task_¶ìp
(
SLEEP_TICKS
);

473 
i2c
.
id
 = 2;

475 
	`Sy°em_¥ötf
("Reque°ög I2C #%d...", 
i2c
.
id
);

476 
°©us
 = 
	`IpcResour˚_ªque°
(
ùcResH™dÀ
, &
i2cId
,

477 
IpcResour˚_TYPE_I2C
, &
i2c
);

478 i‡(!
°©us
) {

479 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

482 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

485 
	`Task_¶ìp
(
SLEEP_TICKS
);

487 
	`Sy°em_¥ötf
("Rñósög I2C #%d...", 
i2c
.
id
);

488 
°©us
 = 
	`IpcResour˚_ªÀa£
(
ùcResH™dÀ
, 
i2cId
);

489 i‡(!
°©us
) {

490 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

493 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

496 
	`Task_¶ìp
(
SLEEP_TICKS
);

498 
	`Sy°em_¥ötf
("RñósögÑeguœt‹ #%d...", 
ªguœt‹
.
ªguœt‹Id
);

499 
°©us
 = 
	`IpcResour˚_ªÀa£
(
ùcResH™dÀ
, 
ªguœt‹Id
);

500 i‡(!
°©us
) {

501 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

504 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

507 
	`Task_¶ìp
(
SLEEP_TICKS
);

509 #i‡
OMAP5xxx


510 
ªguœt‹
.
ªguœt‹Id
 = 2;

511 
ªguœt‹
.
möUV
 = 1500000;

512 
ªguœt‹
.
maxUV
 = 1500000;

513 
	`Sy°em_¥ötf
("Reque°ögÑeguœt‹ #%d...", 
ªguœt‹
.
ªguœt‹Id
);

514 
°©us
 = 
	`IpcResour˚_ªque°
(
ùcResH™dÀ
, &
ªguœt‹Id
,

515 
IpcResour˚_TYPE_REGULATOR
, &
ªguœt‹
);

516 i‡(!
°©us
) {

517 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

520 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

523 
	`Task_¶ìp
(
SLEEP_TICKS
);

525 
	`Sy°em_¥ötf
("RñósögÑeguœt‹ #%d...", 
ªguœt‹
.
ªguœt‹Id
);

526 
°©us
 = 
	`IpcResour˚_ªÀa£
(
ùcResH™dÀ
, 
ªguœt‹Id
);

527 i‡(!
°©us
) {

528 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

531 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

534 
	`Task_¶ìp
(
SLEEP_TICKS
);

537 
gpio
.
gpioId
 = 50;

538 
	`Sy°em_¥ötf
("\nReque°ög GPIO #%d...", 
gpio
.
gpioId
);

539 
°©us
 = 
	`IpcResour˚_ªque°
(
ùcResH™dÀ
, &
gpioId
,

540 
IpcResour˚_TYPE_GPIO
, &
gpio
);

541 i‡(!
°©us
) {

542 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

545 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

548 
	`Task_¶ìp
(
SLEEP_TICKS
);

550 
	`Sy°em_¥ötf
("Rñósög GPIO #%d...", 
gpio
.
gpioId
);

551 
°©us
 = 
	`IpcResour˚_ªÀa£
(
ùcResH™dÀ
, 
gpioId
);

552 i‡(!
°©us
) {

553 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

556 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

559 
	`Task_¶ìp
(
SLEEP_TICKS
);

561 
sdma
.
numCh
 = 5;

562 
	`Sy°em_¥ötf
("\nReque°ög %d SDMA ch™√ls...", 
sdma
.
numCh
);

563 
°©us
 = 
	`IpcResour˚_ªque°
(
ùcResH™dÀ
, &
sdmaId
,

564 
IpcResour˚_TYPE_SDMA
, &
sdma
);

565 i‡(!
°©us
) {

566 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

569 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

572 
	`Task_¶ìp
(
SLEEP_TICKS
);

574 
	`Sy°em_¥ötf
("Rñósög %d SDMA ch™√ls...", 
sdma
.
numCh
);

575 
°©us
 = 
	`IpcResour˚_ªÀa£
(
ùcResH™dÀ
, 
sdmaId
);

576 i‡(!
°©us
) {

577 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

580 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

583 
	`Task_¶ìp
(
SLEEP_TICKS
);

585 
	`Sy°em_¥ötf
("\nRequesting IVAHD...");

586 
°©us
 = 
	`IpcResour˚_ªque°
(
ùcResH™dÀ
, &
ivaId
,

587 
IpcResour˚_TYPE_IVAHD
, 
NULL
);

588 i‡(!
°©us
) {

589 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

592 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

595 
	`Task_¶ìp
(
SLEEP_TICKS
);

597 
	`Sy°em_¥ötf
("Requesting IVASEQ0...");

598 
°©us
 = 
	`IpcResour˚_ªque°
(
ùcResH™dÀ
, &
ivasq0Id
,

599 
IpcResour˚_TYPE_IVASEQ0
, 
NULL
);

600 i‡(!
°©us
) {

601 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

604 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

607 
	`Task_¶ìp
(
SLEEP_TICKS
);

608 
	`Sy°em_¥ötf
("Requesting IVASEQ1...");

609 
°©us
 = 
	`IpcResour˚_ªque°
(
ùcResH™dÀ
, &
ivasq1Id
,

610 
IpcResour˚_TYPE_IVASEQ1
, 
NULL
);

611 i‡(!
°©us
) {

612 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

615 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

618 
	`Task_¶ìp
(
SLEEP_TICKS
);

620 
	`Sy°em_¥ötf
("Requesting SL2IF...");

621 
°©us
 = 
	`IpcResour˚_ªque°
(
ùcResH™dÀ
, &
¶2ifId
,

622 
IpcResour˚_TYPE_SL2IF
, 
NULL
);

623 i‡(!
°©us
) {

624 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

627 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

630 
	`Task_¶ìp
(
SLEEP_TICKS
);

632 
ivaC⁄°øöts
.
mask
 = 
IpcResour˚_C_FREQ
 | 
IpcResour˚_C_LAT
 |

633 
IpcResour˚_C_BW
;

634 
ivaC⁄°øöts
.
‰equícy
 = 266100000;

635 
ivaC⁄°øöts
.
œãncy
 = 10;

636 
ivaC⁄°øöts
.
b™dwidth
 = 1000;

637 
	`Sy°em_¥ötf
("Requesting Constraints for IVA: BW = %d LAT = %d "

638 "Fªquícy = %d...", 
ivaC⁄°øöts
.
b™dwidth
,

639 
ivaC⁄°øöts
.
œãncy
, ivaC⁄°øöts.
‰equícy
);

640 
°©us
 = 
	`IpcResour˚_ªque°C⁄°øöts
(
ùcResH™dÀ
, 
ivaId
,

641 &
ivaC⁄°øöts
);

642 i‡(!
°©us
) {

643 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

646 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

648 
	`Task_¶ìp
(
SLEEP_TICKS
);

650 
ivaC⁄°øöts
.
mask
 = 
IpcResour˚_C_FREQ
 | 
IpcResour˚_C_BW
 |

651 
IpcResour˚_C_LAT
;

652 
ivaC⁄°øöts
.
œãncy
 = -1;

653 
ivaC⁄°øöts
.
‰equícy
 = -1;

654 
ivaC⁄°øöts
.
b™dwidth
 = -1;

655 
	`Sy°em_¥ötf
("Releasing Constraints for IVA: BW = %d LAT = %d "

656 "Fªquícy = %d...", 
ivaC⁄°øöts
.
b™dwidth
,

657 
ivaC⁄°øöts
.
œãncy
, ivaC⁄°øöts.
‰equícy
);

658 
°©us
 = 
	`IpcResour˚_ªque°C⁄°øöts
(
ùcResH™dÀ
, 
ivaId
,

659 &
ivaC⁄°øöts
);

660 i‡(!
°©us
) {

661 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

664 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

667 
	`Task_¶ìp
(
SLEEP_TICKS
);

669 
	`Sy°em_¥ötf
("Releasing IVASEQ1...");

670 
°©us
 = 
	`IpcResour˚_ªÀa£
(
ùcResH™dÀ
, 
ivasq1Id
);

671 i‡(!
°©us
) {

672 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

675 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

678 
	`Task_¶ìp
(
SLEEP_TICKS
);

680 
	`Sy°em_¥ötf
("Releasing IVASEQ0...");

681 
°©us
 = 
	`IpcResour˚_ªÀa£
(
ùcResH™dÀ
, 
ivasq0Id
);

682 i‡(!
°©us
) {

683 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

686 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

689 
	`Task_¶ìp
(
SLEEP_TICKS
);

691 
	`Sy°em_¥ötf
("Releasing SL2IF...");

692 
°©us
 = 
	`IpcResour˚_ªÀa£
(
ùcResH™dÀ
, 
¶2ifId
);

693 i‡(!
°©us
) {

694 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

697 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

700 
	`Task_¶ìp
(
SLEEP_TICKS
);

702 
	`Sy°em_¥ötf
("Releasing IVAHD...");

703 
°©us
 = 
	`IpcResour˚_ªÀa£
(
ùcResH™dÀ
, 
ivaId
);

704 i‡(!
°©us
) {

705 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

708 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

711 
	`Task_¶ìp
(
SLEEP_TICKS
);

713 
	`Sy°em_¥ötf
("\nRequesting ISS...");

714 
°©us
 = 
	`IpcResour˚_ªque°
(
ùcResH™dÀ
, &
issId
,

715 
IpcResour˚_TYPE_ISS
, 
NULL
);

716 i‡(!
°©us
) {

717 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

720 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

723 
	`Task_¶ìp
(
SLEEP_TICKS
);

725 
issC⁄°øöts
.
mask
 = 
IpcResour˚_C_LAT
 | 
IpcResour˚_C_BW
;

726 
issC⁄°øöts
.
œãncy
 = 10;

727 
issC⁄°øöts
.
b™dwidth
 = 1000;

728 
	`Sy°em_¥ötf
("Requesting Constraints for ISS: BW = %d LAT = %d...",

729 
issC⁄°øöts
.
b™dwidth
, issC⁄°øöts.
œãncy
);

730 
°©us
 = 
	`IpcResour˚_ªque°C⁄°øöts
(
ùcResH™dÀ
, 
issId
,

731 &
issC⁄°øöts
);

732 i‡(!
°©us
) {

733 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

736 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

739 
	`Task_¶ìp
(
SLEEP_TICKS
);

741 
issC⁄°øöts
.
mask
 = 
IpcResour˚_C_FREQ
 | 
IpcResour˚_C_LAT
 |

742 
IpcResour˚_C_BW
;

743 
issC⁄°øöts
.
‰equícy
 = 400000000;

744 
issC⁄°øöts
.
œãncy
 = 10;

745 
issC⁄°øöts
.
b™dwidth
 = 1000;

746 
	`Sy°em_¥ötf
("Requesting Constraints for ISS: BW = %d LAT = %d "

747 "FREQ = %d...", 
issC⁄°øöts
.
b™dwidth
,

748 
issC⁄°øöts
.
œãncy
, issC⁄°øöts.
‰equícy
);

749 
°©us
 = 
	`IpcResour˚_ªque°C⁄°øöts
(
ùcResH™dÀ
, 
issId
,

750 &
issC⁄°øöts
);

751 i‡(
°©us
) {

752 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

755 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

758 
	`Task_¶ìp
(
SLEEP_TICKS
);

760 
issC⁄°øöts
.
mask
 = 
IpcResour˚_C_LAT
 | 
IpcResour˚_C_BW
;

761 
issC⁄°øöts
.
œãncy
 = -1;

762 
issC⁄°øöts
.
b™dwidth
 = -1;

763 
	`Sy°em_¥ötf
("Releasing Constraints for ISS: BW = %d LAT = %d ...",

764 
issC⁄°øöts
.
b™dwidth
, issC⁄°øöts.
œãncy
);

765 
°©us
 = 
	`IpcResour˚_ªque°C⁄°øöts
(
ùcResH™dÀ
, 
issId
,

766 &
issC⁄°øöts
);

767 i‡(!
°©us
) {

768 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

771 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

774 
	`Task_¶ìp
(
SLEEP_TICKS
);

776 
	`Sy°em_¥ötf
("Releasing ISS...");

777 
°©us
 = 
	`IpcResour˚_ªÀa£
(
ùcResH™dÀ
, 
issId
);

778 i‡(!
°©us
) {

779 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

782 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

785 
	`Task_¶ìp
(
SLEEP_TICKS
);

787 
	`Sy°em_¥ötf
("\nRequesting FDIF...");

788 
°©us
 = 
	`IpcResour˚_ªque°
(
ùcResH™dÀ
, &
fdifId
,

789 
IpcResour˚_TYPE_FDIF
, 
NULL
);

790 i‡(!
°©us
) {

791 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

794 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

797 
	`Task_¶ìp
(
SLEEP_TICKS
);

799 
fdifC⁄°øöts
.
mask
 = 
IpcResour˚_C_BW
;

800 
fdifC⁄°øöts
.
b™dwidth
 = 1000;

801 
	`Sy°em_¥ötf
("Requesting Constraints for FDIF: BW = %d...",

802 
fdifC⁄°øöts
.
b™dwidth
);

803 
°©us
 = 
	`IpcResour˚_ªque°C⁄°øöts
(
ùcResH™dÀ
, 
fdifId
,

804 &
fdifC⁄°øöts
);

805 i‡(!
°©us
) {

806 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

809 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

812 
	`Task_¶ìp
(
SLEEP_TICKS
);

814 
fdifC⁄°øöts
.
mask
 = 
IpcResour˚_C_LAT
;

815 
fdifC⁄°øöts
.
œãncy
 = 1000;

816 
	`Sy°em_¥ötf
("Requesting Constraints for FDIF: LAT = %d...",

817 
fdifC⁄°øöts
.
œãncy
);

818 
°©us
 = 
	`IpcResour˚_ªque°C⁄°øöts
(
ùcResH™dÀ
, 
fdifId
,

819 &
fdifC⁄°øöts
);

820 i‡(!
°©us
) {

821 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

824 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

827 
	`Task_¶ìp
(
SLEEP_TICKS
);

829 
fdifC⁄°øöts
.
mask
 = 
IpcResour˚_C_LAT
;

830 
fdifC⁄°øöts
.
œãncy
 = -1;

831 
	`Sy°em_¥ötf
("Releasing Constraints for FDIF:: LAT = %d...",

832 
fdifC⁄°øöts
.
œãncy
);

833 
°©us
 = 
	`IpcResour˚_ªque°C⁄°øöts
(
ùcResH™dÀ
, 
fdifId
,

834 &
fdifC⁄°øöts
);

835 i‡(!
°©us
) {

836 
	`Sy°em_¥ötf
("Suc˚eded, sètu†0x%x\n", 
°©us
);

839 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

842 
	`Task_¶ìp
(
SLEEP_TICKS
);

844 
	`Sy°em_¥ötf
("Releasing FDIF...");

845 
°©us
 = 
	`IpcResour˚_ªÀa£
(
ùcResH™dÀ
, 
fdifId
);

846 i‡(!
°©us
) {

847 
	`Sy°em_¥ötf
("Succeeded\n");

850 
	`Sy°em_¥ötf
("Faûed, sètu†0x%x\n", 
°©us
);

853 
	`Task_¶ìp
(
SLEEP_TICKS
);

856 
	`Sy°em_¥ötf
("\nDisconnecting From ResMgr...");

857 
	`IpcResour˚_disc⁄√˘
(
ùcResH™dÀ
);

858 
	`Sy°em_¥ötf
("ResMgr Sample Done!!!\n");

861 
	}
}

863 
	$°¨t_ªsmgr_èsk
()

865 
Task_P¨ams
 
∑øms
;

867 
	`Task_P¨ams_öô
(&
∑øms
);

868 
∑øms
.
ö°™˚
->
«me
 = "IpcResource";

869 
∑øms
.
¥i‹ôy
 = 3;

870 
	`Task_¸óã
(
IpcResour˚TaskFxn
, &
∑øms
, 
NULL
);

871 
	}
}

	@ti/examples/srvmgr/test_omx.c

42 
	~<xdc/°d.h
>

43 
	~<xdc/cfg/globÆ.h
>

44 
	~<xdc/ru¡ime/Sy°em.h
>

45 
	~<xdc/ru¡ime/Dügs.h
>

47 
	~<ti/ùc/Mu…iProc.h
>

48 
	~<ti/sysbios/BIOS.h
>

50 
	~<ti/grcm/RcmTy≥s.h
>

51 
	~<ti/grcm/RcmSîvî.h
>

53 
	~<°dio.h
>

54 
	~<°rög.h
>

55 
	~<°dlib.h
>

57 
	~<ti/§vmgr/Sîvi˚Mgr.h
>

58 
	~<ti/§vmgr/Ωmsg_omx.h
>

59 
	~<ti/§vmgr/omx_∑ckë.h
>

60 
	~<ti/sysbios/hÆ/Cache.h
>

61 
	~<ti/sysbios/k∆/Evít.h
>

62 
	~<xdc/ru¡ime/Eº‹.h
>

63 
	~<ti/sysbios/k∆/Task.h
>

66 
	#CHATTER
 0

	)

68 
	#SIZE
 2048

	)

70 
	#K
 3

	)

71 
	#N
 
SIZE


	)

72 
	#T
 127

	)

74 
	#GAUSSIAN
 1

	)

75 
	#VERTICAL_SOBEL
 2

	)

76 
	#HORIZONTAL_SOBEL
 3

	)

78 
	gfûãr
[
K
][K] ;

81 
°¨t_pög_èsks
();

82 
°¨t_ªsmgr_èsk
();

83 
°¨t_hwSpölock_èsk
();

91 
	mRPC_OMX_MAP_INFO_NONE
 = 0,

92 
	mRPC_OMX_MAP_INFO_ONE_BUF
 = 1,

93 
	mRPC_OMX_MAP_INFO_TWO_BUF
 = 2,

94 
	mRPC_OMX_MAP_INFO_THREE_BUF
 = 3,

95 
	mRPC_OMX_MAP_INFO_MAX
 = 0x7FFFFFFF

96 } 
	tm≠_öfo_ty≥
;

99 
UI¡32
 
	ma
;

100 
UI¡32
 
	mb
;

101 
UI¡32
 
	mc
;

102 
UI¡32
 
	m°¨t_ödx
 ;

103 
UI¡32
 
	míd_ödx
 ;

104 } 
	tFxnArgs
;

106 
I¡32
 
fxnInô
(
UI¡32
 
size
, UI¡32 *
d©a
) ;

107 
I¡32
 
fxnC⁄vﬁveGauss
(
UI¡32
 
size
, UI¡32 *
d©a
) ;

108 
I¡32
 
fxnC⁄vﬁveVîtiˇlH‹iz⁄èl
(
UI¡32
 
size
, UI¡32 *
d©a
) ;

109 
I¡32
 
fxnThªshﬁd
(
UI¡32
 
size
, UI¡32 *
d©a
) ;

117 
	#H264_DECODER_NAME
 "H264_decodî"

	)

119 
	#OMX_VIDEO_THREAD_PRIORITY
 5

	)

121 
I¡32
 
	tRPC_OMX_ERRORTYPE
;

122 
UI¡32
 
	tOMX_HANDLETYPE
;

124 
RPC_OMX_ERRORTYPE
 
RPC_SKEL_GëH™dÀ
(
Void
 *, 
UI¡32
 
size
, UI¡32 *
d©a
);

125 
RPC_OMX_ERRORTYPE
 
RPC_SKEL_SëP¨amëî
(
UI¡32
 
size
, UI¡32 *
d©a
);

126 
RPC_OMX_ERRORTYPE
 
RPC_SKEL_GëP¨amëî
(
UI¡32
 
size
, UI¡32 *
d©a
);

128 
Evít_H™dÀ
 
	gedgeDëe˘Evít
;

131 
RcmSîvî_FxnDesc
 
	gOMXSîvîFxnAry
[] = {

133 {"RPC_SKEL_GëH™dÀ" , 
NULL
},

134 {"RPC_SKEL_SëP¨amëî", 
RPC_SKEL_SëP¨amëî
},

135 {"RPC_SKEL_GëP¨amëî", 
RPC_SKEL_GëP¨amëî
},

136 {"fxnInô", 
fxnInô
},

137 {"fxnC⁄vﬁveGauss", 
fxnC⁄vﬁveGauss
},

138 {"fxnC⁄vﬁveVîtiˇlH‹iz⁄èl", 
fxnC⁄vﬁveVîtiˇlH‹iz⁄èl
},

139 {"fxnThªshﬁd", 
fxnThªshﬁd
},

142 
	#OMXSîvîFxnAryLí
 ( 
OMXSîvîFxnAry
 /  OMXSîvîFxnAry[0])

	)

144 c⁄° 
RcmSîvî_FxnDescAry
 
	gOMXSîvî_fxnTab
 = {

145 
OMXSîvîFxnAryLí
,

146 
OMXSîvîFxnAry


150 
RPC_OMX_ERRORTYPE
 
	$RPC_SKEL_SëP¨amëî
(
UI¡32
 
size
, UI¡32 *
d©a
)

152 #i‡
CHATTER


153 
	`Sy°em_¥ötf
("RPC_SKEL_SetParameter: Called\n");

157 
	}
}

159 
RPC_OMX_ERRORTYPE
 
	$RPC_SKEL_GëP¨amëî
(
UI¡32
 
size
, UI¡32 *
d©a
)

161 #i‡
CHATTER


162 
	`Sy°em_¥ötf
("RPC_SKEL_GetParameter: Called\n");

166 
	}
}

168 
	#CALLBACK_DATA
 "OMX_CÆlback"

	)

169 
	#PAYLOAD_SIZE
 (
CALLBACK_DATA
)

	)

170 
	#CALLBACK_DATA_SIZE
 (
HDRSIZE
 + 
OMXPACKETSIZE
 + 
PAYLOAD_SIZE
)

	)

172 
RPC_OMX_ERRORTYPE
 
	$RPC_SKEL_GëH™dÀ
(
Void
 *
§vc
, 
UI¡32
 
size
,

173 
UI¡32
 *
d©a
)

175 
cComp⁄ítName
[128] = {0};

176 
OMX_HANDLETYPE
 
hComp
;

177 
Ch¨
 
cb_d©a
[
HDRSIZE
 + 
OMXPACKETSIZE
 + 
PAYLOAD_SIZE
] = {0};

183 
omx_msg_hdr
 * 
hdr
 = (omx_msg_hd∏*)
cb_d©a
;

184 
omx_∑ckë
 * 
∑ckë
 = (omx_∑ckë *)
hdr
->
d©a
;

191 
	`°r˝y
(
cComp⁄ítName
, (*)
d©a
 + (
m≠_öfo_ty≥
));

193 #i‡
CHATTER


194 
	`Sy°em_¥ötf
("RPC_SKEL_GetHandle: Component NameÑeceived: %s\n",

195 
cComp⁄ítName
);

201 
∑ckë
->
msg_id
 = 99;

202 
∑ckë
->
fxn_idx
 = 5;

203 
∑ckë
->
d©a_size
 = 
PAYLOAD_SIZE
;

204 
	`°r˝y
((*)
∑ckë
->
d©a
, 
CALLBACK_DATA
);

206 #i‡
CHATTER


207 
	`Sy°em_¥ötf
("RPC_SKEL_GetHandle: Sending callback message id: %d, "

209 
∑ckë
->
msg_id
,Öackë->
fxn_idx
,Öackë->
d©a
);

211 
	`Sîvi˚Mgr_£nd
(
§vc
, 
cb_d©a
, 
CALLBACK_DATA_SIZE
);

215 
hComp
 = 0x5C0FFEE5;

216 
d©a
[0] = 
hComp
;

218 #i‡
CHATTER


219 
	`Sy°em_¥ötf
("RPC_SKEL_GëH™dÀ:Ñëu∫ög hComp: 0x%x\n", 
hComp
);

223 
	}
}

225 
	$my_abs
(
n
)

227  (
n
<0) ? (-n) :Ç ;

228 
	}
}

230 
	$öôülize
(
image_buf„r1
[
N
][N], 
image_buf„r2
[N][N], 
image_buf„r3
[N][N],

231 
°¨t_ödx
, 
íd_ödx
)

233 
i
, 
j
 ;

235 
	`¥ötf
("Beginning initialization\n") ;

241 
i
 = 
°¨t_ödx
; i < 
íd_ödx
; i++) {

242 
j
 = 0; j < 
N
; ++j) {

243 
image_buf„r1
[
i
][
j
] = i+j ;

245 
image_buf„r2
[
i
][
j
] = 0;

247 
image_buf„r3
[
i
][
j
] = 0;

250 
	`¥ötf
("Finishing initialization\n") ;

251 
	}
}

255 
	$c⁄vﬁve2d
(
öput_image
[
N
][N], 
kî√l
[
K
][K], 
ouçut_image
[N][N],

256 
°¨t_ödx
, 
íd_ödx
)

258 
i
;

259 
j
;

260 
c
;

261 
r
;

262 
n‹mÆ_Á˘‹
;

263 
sum
;

264 
dód_rows
;

265 
dód_cﬁs
;

274 
dód_rows
 = 
K
 / 2;

275 
dód_cﬁs
 = 
K
 / 2;

279 
n‹mÆ_Á˘‹
 = 0;

280 
r
 = 0;Ñ < 
K
;Ñ++) {

281 
c
 = 0; c < 
K
; c++) {

282 
n‹mÆ_Á˘‹
 +
	`my_abs
(
kî√l
[
r
][
c
]);

286 i‡(
n‹mÆ_Á˘‹
 == 0)

287 
n‹mÆ_Á˘‹
 = 1;

290 
r
 = 
°¨t_ödx
;Ñ < 
íd_ödx
 - 
K
 + 1;Ñ++) {

291 
c
 = 0; c < 
N
 - 
K
 + 1; c++) {

292 
sum
 = 0;

293 
i
 = 0; i < 
K
; i++) {

294 
j
 = 0; j < 
K
; j++) {

295 
sum
 +
öput_image
[
r
+
i
][
c
+
j
] * 
kî√l
[i][j];

298 
ouçut_image
[
r
+
dód_rows
][
c
+
dód_cﬁs
] = (
sum
 / 
n‹mÆ_Á˘‹
);

301 
	}
}

303 
	$£t_fûãr
(
fûãr
[
K
][K], 
ty≥
)

305 if(
ty≥
 =
GAUSSIAN
) {

306 
fûãr
[0][0] = 1;

307 
fûãr
[0][1] = 2;

308 
fûãr
[0][2] = 1;

309 
fûãr
[1][0] = 2;

310 
fûãr
[1][1] = 4;

311 
fûãr
[1][2] = 2;

312 
fûãr
[2][0] = 1;

313 
fûãr
[2][1] = 2;

314 
fûãr
[2][2] = 1;

315 } if(
ty≥
 =
VERTICAL_SOBEL
) {

316 
fûãr
[0][0] = 1;

317 
fûãr
[0][1] = 0;

318 
fûãr
[0][2] = -1;

319 
fûãr
[1][0] = 2;

320 
fûãr
[1][1] = 0;

321 
fûãr
[1][2] = -2;

322 
fûãr
[2][0] = 1;

323 
fûãr
[2][1] = 0;

324 
fûãr
[2][2] = -1;

325 } if(
ty≥
 =
HORIZONTAL_SOBEL
) {

326 
fûãr
[0][0] = 1;

327 
fûãr
[0][1] = 2;

328 
fûãr
[0][2] = 1;

329 
fûãr
[1][0] = 0;

330 
fûãr
[1][1] = 0;

331 
fûãr
[1][2] = 0;

332 
fûãr
[2][0] = -1;

333 
fûãr
[2][1] = -2;

334 
fûãr
[2][2] = -1;

336 
	}
}

338 
	$≠∂y_thªshﬁd
(
öput_image1
[
N
][N], 
öput_image2
[N][N], 
ouçut_image
[N][N],

339 
°¨t_ödx
, 
íd_ödx
)

344 
i
, 
j
 ;

345 
ãmp1
, 
ãmp2
, 
ãmp3
 ;

347 
i
 = 
°¨t_ödx
; i < 
íd_ödx
; i++) {

348 
j
 = 0; j < 
N
; ++j) {

349 
ãmp1
 = 
	`my_abs
(
öput_image1
[
i
][
j
]);

350 
ãmp2
 = 
	`my_abs
(
öput_image2
[
i
][
j
]);

351 
ãmp3
 = (
ãmp1
 > 
ãmp2
) ?Åemp1 :Åemp2;

352 
ouçut_image
[
i
][
j
] = (
ãmp3
 > 
T
) ? 255 : 0;

355 
	}
}

357 
	$wb_övÆid©e_ˇches
(*
ib1
, * 
ib2
, * 
ib3
, 
num_byãs
)

359 
	`Cache_wbInv
 (
ib1
, 
num_byãs
, 
Cache_Ty≥_ALL
, 
FALSE
);

360 
	`Cache_wbInv
 (
ib2
, 
num_byãs
, 
Cache_Ty≥_ALL
, 
FALSE
);

361 
	`Cache_wbInv
 (
ib3
, 
num_byãs
, 
Cache_Ty≥_ALL
, 
FALSE
);

362 
	}
}

364 
	$övÆid©e_ˇches
(*
ib1
, * 
ib2
, * 
ib3
, 
num_byãs
)

366 
	`Cache_öv
 (
ib1
, 
SIZE
*SIZE*4, 
Cache_Ty≥_ALL
, 
FALSE
) ;

367 
	`Cache_öv
 (
ib2
, 
SIZE
*SIZE*4, 
Cache_Ty≥_ALL
, 
FALSE
) ;

368 
	`Cache_öv
 (
ib3
, 
SIZE
*SIZE*4, 
Cache_Ty≥_ALL
, 
FALSE
);

369 
	}
}

371 
	$gë_öfo
(
UI¡32
* 
d©a
, UI¡32* 
a
, UI¡32* 
b
, UI¡32* 
c
, UI¡32* 
°¨t_ödx
, UI¡32* 
íd_ödx
)

373 
FxnArgs
 *
¨gs
 = (FxnArg†*)((
UI¡32
)
d©a
 + (
m≠_öfo_ty≥
));

374 *
a
 = 
¨gs
->a;

375 *
b
 = 
¨gs
->b;

376 *
c
 = 
¨gs
->c;

377 *
°¨t_ödx
 = 
¨gs
->start_indx;

378 *
íd_ödx
 = 
¨gs
->end_indx;

379 
	}
}

381 
I¡32
 
	$fxnC⁄vﬁveGauss
(
UI¡32
 
size
, UI¡32 *
d©a
)

383 
UI¡32
 
a
,
b
,
c
,
°¨t_ödx
,
íd_ödx
 ;

385 #i‡
CHATTER


386 
	`Sy°em_¥ötf
("fxnInit : Executing fxnConvolveGauss \n") ;

389 
	`gë_öfo
(
d©a
, &
a
, &
b
, &
c
, &
°¨t_ödx
, &
íd_ödx
) ;

391 (*
image_buf„r1
)[
SIZE
] = ((*)[SIZE])(
a
) ;

392 (*
image_buf„r2
)[
SIZE
] = ((*)[SIZE])(
b
) ;

393 (*
image_buf„r3
)[
SIZE
] = ((*)[SIZE])(
c
) ;

395 
num_byãs
 = (&(
image_buf„r1
[
íd_ödx
-1][
SIZE
-1]Ë- &(image_buf„r1[
°¨t_ödx
][0]) + 1) * () ;

397 
	`övÆid©e_ˇches
(
image_buf„r1
, 
image_buf„r2
, 
image_buf„r3
, 
num_byãs
) ;

399 if(
°¨t_ödx
 != 0)

400 
°¨t_ödx
 = start_indx - 1 ;

401 if(
íd_ödx
 !
SIZE
)

402 
íd_ödx
 =Énd_indx + 1 ;

408 
	`£t_fûãr
(
fûãr
, 
GAUSSIAN
) ;

411 
	`c⁄vﬁve2d
(
image_buf„r1
, 
fûãr
, 
image_buf„r3
, 
°¨t_ödx
, 
íd_ödx
);

413 
	`wb_övÆid©e_ˇches
(&(
image_buf„r1
[
°¨t_ödx
][0]), &(
image_buf„r2
[start_indx][0]),

414 &(
image_buf„r3
[
°¨t_ödx
][0]), 
num_byãs
) ;

416 
a
 = 1 ;

417  
a
 ;

418 
	}
}

420 
I¡32
 
	$fxnC⁄vﬁveVîtiˇlH‹iz⁄èl
(
UI¡32
 
size
, UI¡32 *
d©a
)

422 
UI¡32
 
a
,
b
,
c
,
°¨t_ödx
,
íd_ödx
 ;

424 #i‡
CHATTER


425 
	`Sy°em_¥ötf
("fxnInit : Executing fxnConvolveVerticalHorizontal \n") ;

428 
	`gë_öfo
(
d©a
, &
a
, &
b
, &
c
, &
°¨t_ödx
, &
íd_ödx
) ;

430 (*
image_buf„r1
)[
SIZE
] = ((*)[SIZE])(
a
) ;

431 (*
image_buf„r2
)[
SIZE
] = ((*)[SIZE])(
b
) ;

432 (*
image_buf„r3
)[
SIZE
] = ((*)[SIZE])(
c
) ;

434 
num_byãs
 = (&(
image_buf„r1
[
íd_ödx
-1][
SIZE
-1]Ë- &(image_buf„r1[
°¨t_ödx
][0]) + 1) * () ;

436 
	`övÆid©e_ˇches
(
image_buf„r1
, 
image_buf„r2
, 
image_buf„r3
, 
num_byãs
) ;

438 if(
°¨t_ödx
 != 0)

439 
°¨t_ödx
 = start_indx - 1 ;

440 if(
íd_ödx
 !
SIZE
)

441 
íd_ödx
 =Énd_indx + 1 ;

444 
	`£t_fûãr
(
fûãr
, 
VERTICAL_SOBEL
) ;

446 
	`c⁄vﬁve2d
(
image_buf„r3
, 
fûãr
, 
image_buf„r1
, 
°¨t_ödx
, 
íd_ödx
);

449 
	`£t_fûãr
(
fûãr
, 
HORIZONTAL_SOBEL
) ;

451 
	`c⁄vﬁve2d
(
image_buf„r3
, 
fûãr
, 
image_buf„r2
, 
°¨t_ödx
, 
íd_ödx
);

453 
	`wb_övÆid©e_ˇches
(&(
image_buf„r1
[
°¨t_ödx
][0]), &(
image_buf„r2
[start_indx][0]),

454 &(
image_buf„r3
[
°¨t_ödx
][0]), 
num_byãs
) ;

456 
a
 = 1 ;

457  
a
 ;

458 
	}
}

460 
I¡32
 
	$fxnThªshﬁd
(
UI¡32
 
size
, UI¡32 *
d©a
)

462 
UI¡32
 
a
,
b
,
c
,
°¨t_ödx
,
íd_ödx
 ;

464 #i‡
CHATTER


465 
	`Sy°em_¥ötf
("fxnInit : Executing fxnThreshold \n") ;

468 
	`gë_öfo
(
d©a
, &
a
, &
b
, &
c
, &
°¨t_ödx
, &
íd_ödx
) ;

470 (*
image_buf„r1
)[
SIZE
] = ((*)[SIZE])(
a
) ;

471 (*
image_buf„r2
)[
SIZE
] = ((*)[SIZE])(
b
) ;

472 (*
image_buf„r3
)[
SIZE
] = ((*)[SIZE])(
c
) ;

474 
num_byãs
 = (&(
image_buf„r1
[
íd_ödx
-1][
SIZE
-1]Ë- &(image_buf„r1[
°¨t_ödx
][0]) + 1) * () ;

476 
	`övÆid©e_ˇches
(
image_buf„r1
, 
image_buf„r2
, 
image_buf„r3
, 
num_byãs
) ;

478 
	`≠∂y_thªshﬁd
(
image_buf„r1
, 
image_buf„r2
, 
image_buf„r3
, 
°¨t_ödx
, 
íd_ödx
) ;

480 
	`wb_övÆid©e_ˇches
(&(
image_buf„r1
[
°¨t_ödx
][0]), &(
image_buf„r2
[start_indx][0]),

481 &(
image_buf„r3
[
°¨t_ödx
][0]), 
num_byãs
) ;

483 
a
 = 1 ;

484  
a
 ;

485 
	}
}

487 
I¡32
 
	$fxnInô
(
UI¡32
 
size
, UI¡32 *
d©a
)

489 
UI¡32
 
a
,
b
,
c
,
°¨t_ödx
,
íd_ödx
;

491 #i‡
CHATTER


492 
	`Sy°em_¥ötf
("fxnInit : Executing fxnInit \n");

495 
	`gë_öfo
(
d©a
, &
a
, &
b
, &
c
, &
°¨t_ödx
, &
íd_ödx
) ;

497 (*
image_buf„r1
)[
SIZE
] = ((*)[SIZE])(
a
) ;

498 (*
image_buf„r2
)[
SIZE
] = ((*)[SIZE])(
b
) ;

499 (*
image_buf„r3
)[
SIZE
] = ((*)[SIZE])(
c
) ;

501 
num_byãs
 = (&(
image_buf„r1
[
íd_ödx
-1][
SIZE
-1]Ë- &(image_buf„r1[
°¨t_ödx
][0]) + 1) * () ;

503 
	`övÆid©e_ˇches
(
image_buf„r1
, 
image_buf„r2
, 
image_buf„r3
, 
num_byãs
) ;

505 
	`öôülize
(
image_buf„r1
, 
image_buf„r2
, 
image_buf„r3
, 
°¨t_ödx
, 
íd_ödx
) ;

507 
	`wb_övÆid©e_ˇches
(&(
image_buf„r1
[
°¨t_ödx
][0]), &(
image_buf„r2
[start_indx][0]),

508 &(
image_buf„r3
[
°¨t_ödx
][0]), 
num_byãs
) ;

510 
a
 = 1 ;

511  
a
 ;

512 
	}
}

514 
I¡
 
	$maö
(
I¡
 
¨gc
, * 
¨gv
[])

516 
RcmSîvî_P¨ams
 
rcmSîvîP¨ams
;

518 
	`Sy°em_¥ötf
("%†°¨tög..\n", 
	`Mu…iProc_gëName
(
	`Mu…iProc_£lf
()));

525 
	`Dügs_£tMask
("ti.ipc.rpmsg.MessageQCopy=EXLFS");

530 
	`Sîvi˚Mgr_öô
();

533 
	`RcmSîvî_P¨ams_öô
(&
rcmSîvîP¨ams
);

540 
OMXSîvî_fxnTab
.
ñem
[0].
addr
.
¸óãFxn
 = 
RPC_SKEL_GëH™dÀ
;

542 
rcmSîvîP¨ams
.
¥i‹ôy
 = 
Thªad_Pri‹ôy_ABOVE_NORMAL
;

543 
rcmSîvîP¨ams
.
fxns
.
Àngth
 = 
OMXSîvî_fxnTab
.length;

544 
rcmSîvîP¨ams
.
fxns
.
ñem
 = 
OMXSîvî_fxnTab
.elem;

547 
	`Sîvi˚Mgr_ªgi°î
("OMX", &
rcmSîvîP¨ams
);

550 
	`°¨t_pög_èsks
();

554 
	`°¨t_ªsmgr_èsk
();

559 
	`°¨t_hwSpölock_èsk
();

563 
Eº‹_Block
 
eb
;

564 
	`Eº‹_öô
(&
eb
);

565 
edgeDëe˘Evít
 = 
	`Evít_¸óã
(
NULL
, &
eb
);

566 i‡(
edgeDëe˘Evít
 =
NULL
) {

567 
	`Sy°em_ab‹t
("Event create failed");

571 
	`Sîvi˚Mgr_°¨t
(0);

573 
	`BIOS_°¨t
();

576 
	}
}

	@ti/gates/hwspinlock/HwSpinlock.c

36 
	~<xdc/°d.h
>

37 
	~<xdc/ru¡ime/As£π.h
>

38 
	~<xdc/ru¡ime/Eº‹.h
>

39 
	~<xdc/ru¡ime/Mem‹y.h
>

40 
	~<xdc/ru¡ime/IG©eProvidî.h
>

41 
	~<xdc/ru¡ime/Log.h
>

42 
	~<xdc/ru¡ime/Dügs.h
>

43 
	~<xdc/ru¡ime/G©e.h
>

45 
	~<ti/sysbios/k∆/Task.h
>

46 
	~<ti/sysbios/k∆/Clock.h
>

48 
	~<ti/g©es/hw•ölock/HwSpölock.h
>

49 
	~"_HwSpölock.h
"

52 
HwSpölock_ModuÀ_Sèã
 
	gHwSpölock_moduÀ
 = { 0 };

55 
Bôs32
 
	gti_g©es_HwSpölock_sh¨edSèã


56 [(
HwSpölock_NUMLOCKS
/(
Bôs32
))] = { 0 };

57 c⁄° 
UI¡32
 
	gti_g©es_HwSpölock_numLocks
 = 
HwSpölock_NUMLOCKS
;

61 
ölöe
 
Void
 
	$_HwSpölock_£t
(
I¡
 
hwlockId
)

63 
ti_g©es_HwSpölock_sh¨edSèã
[
hwlockId
 >> 5] |= (1 << (hwlockId % 32));

64 
	}
}

66 
ölöe
 
Void
 
	$_HwSpölock_˛r
(
I¡
 
hwlockId
)

68 
ti_g©es_HwSpölock_sh¨edSèã
[
hwlockId
 >> 5] &= ~(1 << (hwlockId % 32));

69 
	}
}

80 
Void
 
	$HwSpölock_P¨ams_öô
(
HwSpölock_P¨ams
 *
∑øms
)

82 
∑øms
->
id
 = 
HwSpölock_NO_SPINLOCK
;

83 
∑øms
->
ªqFxn

NULL
;

84 
∑øms
->
ªlFxn

NULL
;

85 
∑øms
->
¨g1
 = 
NULL
;

86 
∑øms
->
¨g2
 = 
NULL
;

87 
	}
}

92 
	#FXNN
 "HwSpölock_¸óã"

	)

93 
HwSpölock_H™dÀ
 
	$HwSpölock_¸óã
(
HwSpölock_P¨ams
 *
∑øms
)

95 
HwSpölock_H™dÀ
 
h™dÀ
;

96 
I¡
 
i
;

97 
IArg
 
key
;

100 i‡(
∑øms
->
ªqFxn
) {

101 i‡(
∑øms
->
	`ªqFxn
(params)) {

102  
NULL
;

107 i‡((
∑øms
->
id
 < 0Ë|| (∑øms->id >
HwSpölock_NUMLOCKS
)) {

108 
	`Log_îr‹0
(
FXNN
": HwSpinlock Id isÇot valid");

109  
NULL
;

113 
key
 = 
	`G©e_íãrSy°em
();

114 
h™dÀ
 = 
HwSpölock_moduÀ
.
locks
[
∑øms
->
id
];

115 i‡(
h™dÀ
) {

116 
h™dÀ
->
ªfC¡
++;

117 
	`G©e_ÀaveSy°em
(
key
);

118  
h™dÀ
;

122 
h™dÀ
 = 
	`Mem‹y_Æloc
(
NULL
, (*handle), 0, NULL);

123 i‡(!
h™dÀ
) {

124 
	`Log_îr‹0
(
FXNN
": UnableÅoállocate handle");

125 
	`G©e_ÀaveSy°em
(
key
);

126  
NULL
;

130 
i
 = 0; i < 
HwSpölock_NUMPREEMPTGATES
; i++) {

131 
h™dÀ
->
¥ìm±G©es
[
i
] = (
IG©eProvidî_H™dÀ
)

132 
HwSpölock_G©eFxns
[
i
].
	`¸óã
(
NULL
, NULL);

135 
h™dÀ
->
muãx
 = 
	`G©eMuãxPri_¸óã
(
NULL
, NULL);

138 
h™dÀ
->
∑øms
 = *params;

139 
h™dÀ
->
ba£Addr
 = (vﬁ©ûê
UI¡32
 *)
HwSpölock_BASEADDR
;

140 
h™dÀ
->
ªfC¡
 = 1;

141 
h™dÀ
->
°©e
 = 
HwSpölock_STATE_FREE
;

144 
HwSpölock_moduÀ
.
locks
[
∑øms
->
id
] = 
h™dÀ
;

145 
	`G©e_ÀaveSy°em
(
key
);

147  
h™dÀ
;

148 
	}
}

149 #unde‡
FXNN


154 
	#FXNN
 "HwSpölock_dñëe"

	)

155 
I¡
 
	$HwSpölock_dñëe
(
HwSpölock_H™dÀ
 
h™dÀ
)

157 
I¡
 
i
;

158 
IArg
 
key
;

160 
	`As£π_isTrue
(
h™dÀ
, 
NULL
);

161 
key
 = 
	`G©e_íãrSy°em
();

164 i‡(
h™dÀ
->
ªfC¡
) {

165 
h™dÀ
->
ªfC¡
--;

168 i‡(!
h™dÀ
->
ªfC¡
) {

170 i‡(
h™dÀ
->
°©e
 =
HwSpölock_STATE_TAKEN
) {

171 
	`Log_îr‹0
(
FXNN
": Error: HwSpinlock still in use");

172 
	`G©e_ÀaveSy°em
(
key
);

173  
HwSpölock_STILL_IN_USE
;

176 i‡(
h™dÀ
->
∑øms
.
ªlFxn
) {

177 
h™dÀ
->
∑øms
.
	`ªlFxn
(&handle->params);

181 
i
 = 0; i < 
HwSpölock_NUMPREEMPTGATES
; i++) {

182 
HwSpölock_G©eFxns
[
i
].
	`dñëe
(&
h™dÀ
->
¥ìm±G©es
[i]);

183 
h™dÀ
->
¥ìm±G©es
[
i
] = 
NULL
;

186 
	`G©eMuãxPri_dñëe
(&
h™dÀ
->
muãx
);

187 
h™dÀ
->
muãx
 = 
NULL
;

190 
HwSpölock_moduÀ
.
locks
[
h™dÀ
->
∑øms
.
id
] = 
NULL
;

193 
	`Mem‹y_‰ì
(
NULL
, 
h™dÀ
, (*handle));

194 
h™dÀ
 = 
NULL
;

196 
	`G©e_ÀaveSy°em
(
key
);

198  
HwSpölock_S_SUCCESS
;

199 
	}
}

200 #unde‡
FXNN


205 
I¡
 
	$HwSpölock_íãr
(
HwSpölock_H™dÀ
 
h™dÀ
, 
HwSpölock_Pªem±G©e
 
pTy≥
,

206 
UI¡
 
timeout
, 
HwSpölock_Key
 *
hkey
)

208 
UI¡
 
°¨t
, 
ñ≠£d
;

210 
	`As£π_isTrue
(
h™dÀ
, 
NULL
);

213 i‡(
timeout
 !
HwSpölock_WAIT_FOREVER
) {

214 
°¨t
 = 
	`Clock_gëTicks
();

219 
h™dÀ
->
mkey
 = 
	`G©eMuãxPri_íãr
(h™dÀ->
muãx
);

222 i‡(
h™dÀ
->
ba£Addr
[h™dÀ->
∑øms
.
id
] == 0) {

223 
h™dÀ
->
°©e
 = 
HwSpölock_STATE_TAKEN
;

225 
hkey
->
key
 = 
	`IG©eProvidî_íãr
(
h™dÀ
->
¥ìm±G©es
[
pTy≥
]);

226 
hkey
->
vÆid
 = 
TRUE
;

227 
h™dÀ
->
pTy≥
 =ÖType;

228 
	`_HwSpölock_£t
(
h™dÀ
->
∑øms
.
id
);

229  (
HwSpölock_S_SUCCESS
);

233 
	`G©eMuãxPri_Àave
(
h™dÀ
->
muãx
, h™dÀ->
mkey
);

236 i‡(
timeout
 !
HwSpölock_WAIT_FOREVER
) {

237 
ñ≠£d
 = 
	`Clock_gëTicks
(Ë- 
°¨t
;

238 i‡(
ñ≠£d
 > 
timeout
) {

240 
hkey
->
vÆid
 = 
FALSE
;

241  (
HwSpölock_E_TIMEOUT
);

245 
	}
}

250 
Void
 
	$HwSpölock_Àave
(
HwSpölock_H™dÀ
 
h™dÀ
, 
HwSpölock_Key
 *
hkey
)

252 
	`As£π_isTrue
(
h™dÀ
, 
NULL
);

255 i‡(
h™dÀ
->
°©e
 =
HwSpölock_STATE_TAKEN
 && 
hkey
->
vÆid
) {

257 
h™dÀ
->
ba£Addr
[h™dÀ->
∑øms
.
id
] = 0;

258 
h™dÀ
->
°©e
 = 
HwSpölock_STATE_FREE
;

259 
	`_HwSpölock_˛r
(
h™dÀ
->
∑øms
.
id
);

262 
	`IG©eProvidî_Àave
(
h™dÀ
->
¥ìm±G©es
[h™dÀ->
pTy≥
], 
hkey
->
key
);

263 
hkey
->
vÆid
 = 
FALSE
;

266 
	`G©eMuãxPri_Àave
(
h™dÀ
->
muãx
, h™dÀ->
mkey
);

268 
	}
}

273 
I¡
 
	$HwSpölock_gëId
(
HwSpölock_H™dÀ
 
h™dÀ
)

275 
	`As£π_isTrue
(
h™dÀ
, 
NULL
);

276  (
h™dÀ
->
∑øms
.
id
);

277 
	}
}

282 
HwSpölock_Sèã
 
	$HwSpölock_gëSèã
(
HwSpölock_H™dÀ
 
h™dÀ
)

284 
	`As£π_isTrue
(
h™dÀ
, 
NULL
);

285  (
h™dÀ
->
°©e
);

286 
	}
}

	@ti/gates/hwspinlock/HwSpinlock.h

33 #i‚de‡
ti_g©es_HwSpölock__ö˛ude


34 
	#ti_g©es_HwSpölock__ö˛ude


	)

36 #i‡
deföed
 (
__˝lu•lus
)

40 
UI¡32
 
ti_g©es_HwSpölock_sh¨edSèã
[];

41 c⁄° 
UI¡32
 
ti_g©es_HwSpölock_numLocks
;

52 
	#HwSpölock_S_SUCCESS
 0

	)

58 
	#HwSpölock_NO_SPINLOCK
 -1

	)

64 
	#HwSpölock_E_FAIL
 -2

	)

70 
	#HwSpölock_E_TIMEOUT
 -3

	)

76 
	#HwSpölock_STILL_IN_USE
 -4

	)

82 
	#HwSpölock_WAIT_FOREVER
 0xFFFFFFFF

	)

94 
	gHwSpölock_STATE_FREE
,

95 
	gHwSpölock_STATE_TAKEN


96 } 
	tHwSpölock_Sèã
;

104 
	eHwSpölock_Pªem±G©e
 {

105 
	gHwSpölock_Pªem±G©e_NONE
 = 0,

106 
	gHwSpölock_Pªem±G©e_HWI
 = 1,

107 
	gHwSpölock_Pªem±G©e_SWI
 = 2,

108 
	gHwSpölock_Pªem±G©e_TASK
 = 3

109 } 
	tHwSpölock_Pªem±G©e
;

111 
	gVoid
 * (*
	tHwSpölock_hookFxn
)(
	tVoid
 *);

116 
	sHwSpölock_P¨ams
 {

117 
I¡
 
	gid
;

118 
HwSpölock_hookFxn
 
	gªqFxn
;

119 
HwSpölock_hookFxn
 
	gªlFxn
;

120 
Void
 *
	g¨g1
;

121 
Void
 *
	g¨g2
;

122 } 
	tHwSpölock_P¨ams
;

127 
	sHwSpölock_Key
 {

128 
IArg
 
	gkey
;

129 
Boﬁ
 
	gvÆid
;

130 } 
	tHwSpölock_Key
;

135 
HwSpölock_Obje˘
 *
	tHwSpölock_H™dÀ
;

150 
Void
 
HwSpölock_P¨ams_öô
(
HwSpölock_P¨ams
 *
∑øms
);

159 
HwSpölock_H™dÀ
 
HwSpölock_¸óã
(
HwSpölock_P¨ams
 *
∑øms
);

168 
I¡
 
HwSpölock_dñëe
(
HwSpölock_H™dÀ
 
h™dÀ
);

177 
I¡
 
HwSpölock_íãr
(
HwSpölock_H™dÀ
 
h™dÀ
, 
HwSpölock_Pªem±G©e
 
pTy≥
,

178 
UI¡
 
timeout
, 
HwSpölock_Key
 *
key
);

187 
Void
 
HwSpölock_Àave
(
HwSpölock_H™dÀ
 
h™dÀ
, 
HwSpölock_Key
 *
key
);

196 
I¡
 
HwSpölock_gëId
(
HwSpölock_H™dÀ
 
h™dÀ
);

205 
HwSpölock_Sèã
 
HwSpölock_gëSèã
(
HwSpölock_H™dÀ
 
h™dÀ
);

207 #i‡
deföed
 (
__˝lu•lus
)

	@ti/gates/hwspinlock/_HwSpinlock.h

37 #i‚de‡
ti_g©es__HwSpölock__ö˛ude


38 
	#ti_g©es__HwSpölock__ö˛ude


	)

40 #i‡
deföed
 (
__˝lu•lus
)

44 
	~<xdc/ru¡ime/G©eNuŒ.h
>

45 
	~<ti/sysbios/g©es/G©eMuãxPri.h
>

46 
	~<ti/sysbios/g©es/G©eHwi.h
>

47 
	~<ti/sysbios/g©es/G©eSwi.h
>

48 
	~<ti/sysbios/g©es/G©eTask.h
>

56 
Void
 * (*
	tHwSpölock_¸óãFxn
)(
	tIG©eProvidî_P¨ams
 *, 
	tEº‹_Block
 *);

57 
Void
 * (*
	tHwSpölock_dñëeFxn
)(
	tIG©eProvidî_H™dÀ
 *);

63 
HwSpölock_¸óãFxn
 
¸óã
;

64 
HwSpölock_dñëeFxn
 
dñëe
;

65 } 
	tHwSpölock_Pªem±G©eFxn
;

70 
HwSpölock_Pªem±G©eFxn
 
HwSpölock_G©eFxns
[] = {

71 {(
HwSpölock_¸óãFxn
)
G©eNuŒ_¸óã
,

72 (
HwSpölock_dñëeFxn
)
G©eNuŒ_dñëe
},

73 {(
HwSpölock_¸óãFxn
)
G©eHwi_¸óã
,

74 (
HwSpölock_dñëeFxn
)
G©eHwi_dñëe
},

75 {(
HwSpölock_¸óãFxn
)
G©eSwi_¸óã
,

76 (
HwSpölock_dñëeFxn
)
G©eSwi_dñëe
},

77 {(
HwSpölock_¸óãFxn
)
G©eTask_¸óã
,

78 (
HwSpölock_dñëeFxn
)
G©eTask_dñëe
},

81 
	#HwSpölock_NUMLOCKS
 32

	)

82 #ifde‡
DSP


83 
	#HwSpölock_BASEADDR
 0x4A0F6800

	)

85 
	#HwSpölock_BASEADDR
 0xAA0F6800

	)

87 
	#HwSpölock_NUMPREEMPTGATES
 ((
HwSpölock_G©eFxns
) / \

88 (
HwSpölock_Pªem±G©eFxn
))

	)

95 
HwSpölock_H™dÀ
 
locks
[
HwSpölock_NUMLOCKS
];

96 } 
	tHwSpölock_ModuÀ_Sèã
;

101 
	sHwSpölock_Obje˘
 {

102 
HwSpölock_P¨ams
 
∑øms
;

103 vﬁ©ûê
UI¡32
 *
ba£Addr
;

104 
I¡
 
lockNum
;

105 
HwSpölock_Pªem±G©e
 
pTy≥
;

106 
IArg
 
mkey
;

107 
IG©eProvidî_H™dÀ
 
¥ìm±G©es
[
HwSpölock_NUMPREEMPTGATES
];

108 
G©eMuãxPri_H™dÀ
 
muãx
;

109 
I¡
 
ªfC¡
;

110 
HwSpölock_Sèã
 
°©e
;

113 #i‡
deföed
 (
__˝lu•lus
)

	@ti/grcm/RcmClient.c

38 
	#Regi°ry_CURDESC
 
ti_rcm_RcmClõ¡__Desc


	)

39 
	#MODULE_NAME
 "ti.rcm.RcmClõ¡"

	)

41 
	#xdc_ru¡ime_Mem‹y__nﬁoˇ ames


	)

44 
	~<xdc/°d.h
>

45 
	~<xdc/ru¡ime/As£π.h
>

46 
	~<xdc/ru¡ime/Dügs.h
>

47 
	~<xdc/ru¡ime/Eº‹.h
>

48 
	~<xdc/ru¡ime/IHóp.h
>

49 
	~<xdc/ru¡ime/Log.h
>

50 
	~<xdc/ru¡ime/Mem‹y.h
>

51 
	~<xdc/ru¡ime/Regi°ry.h
>

52 
	~<xdc/ru¡ime/Sèπup.h
>

53 
	~<xdc/ru¡ime/k∆/G©eThªad.h
>

54 
	~<xdc/ru¡ime/k∆/Sem≠h‹e.h
>

55 
	~<xdc/ru¡ime/k∆/SemThªad.h
>

56 
	~<xdc/ru¡ime/k∆/SyncSemThªad.h
>

57 
	~<xdc/ru¡ime/k∆/ISem≠h‹e.h
>

60 
	~<ti/ùc/MesßgeQ.h
>

62 #i‡
deföed
(
RCM_ti_ùc
)

63 
	~<ti/sdo/utûs/Li°.h
>

65 #ñi‡
deföed
(
RCM_ti_sy¶ök
)

66 
	~<ti/sy¶ök/utûs/Li°.h
>

73 
	~<ti/rcm/RcmSîvî.h
>

74 
	~"RcmTy≥s.h
"

75 
	~"RcmClõ¡.h
"

79 
Li°_EÀm
 
	mñem
;

80 
UI¡16
 
	mmsgId
;

81 
RcmClõ¡_Mesßge
 *
	mmsg
;

82 
SemThªad_Såu˘
 
	mevít
;

83 } 
	tRecùõ¡
;

85 
	sRcmClõ¡_Obje˘_èg
 {

86 
G©eThªad_Såu˘
 
	mg©e
;

87 
MesßgeQ_H™dÀ
 
	mmsgQue
;

88 
MesßgeQ_H™dÀ
 
	mîr‹MsgQue
;

89 
UI¡16
 
	mhópId
;

90 
På
 
	msync
;

91 
UI¡32
 
	m£rvîMsgQ
;

92 
Boﬁ
 
	mcbNŸify
;

93 
UI¡16
 
	mmsgId
;

94 
ISem≠h‹e_H™dÀ
 
	mmbxLock
;

95 
ISem≠h‹e_H™dÀ
 
	mqueueLock
;

96 
Li°_H™dÀ
 
	mªcùõ¡s
;

97 
Li°_H™dÀ
 
	m√wMaû
;

98 } 
	tRcmClõ¡_Obje˘
;

100 
	sRcmClõ¡_ModuÀ_èg
 {

101 
Såög
 
	m«me
;

102 
Bôs16
 
	mid
;

103 
Bôs16
 
	mdügsMask
;

104 
IHóp_H™dÀ
 
	mhóp
;

105 } 
	tRcmClõ¡_ModuÀ
;

109 
UI¡16
 
RcmClõ¡_gíMsgId_P
(

110 
RcmClõ¡_Obje˘
 * 
obj


113 
ölöe


114 
RcmClõ¡_Packë
 *
RcmClõ¡_gëPackëAddr_P
(

115 
RcmClõ¡_Mesßge
 * 
msg


118 
ölöe


119 
RcmClõ¡_Packë
 *
gëPackëAddrMsgqMsg
(

120 
MesßgeQ_Msg
 
msg


123 
ölöe


124 
RcmClõ¡_Packë
 *
gëPackëAddrEÀm
(

125 
Li°_EÀm
 * 
ñem


128 
I¡
 
RcmClõ¡_gëRëu∫Msg_P
(

129 
RcmClõ¡_Obje˘
 * 
obj
,

130 c⁄° 
UI¡16
 
msgId
,

131 
RcmClõ¡_Mesßge
 ** 
ªtu∫Msg


135 
I¡
 
RcmClõ¡_In°™˚_öô
(

136 
RcmClõ¡_Obje˘
 * 
obj
,

137 
Såög
 
£rvî
,

138 c⁄° 
RcmClõ¡_P¨ams
 * 
∑øms


142 
I¡
 
RcmClõ¡_In°™˚_föÆize
(

143 
RcmClõ¡_Obje˘
 * 
obj


147 
	#RcmClõ¡_ModuÀ_hóp
(Ë(
RcmClõ¡_Mod
.
hóp
)

	)

150 
I¡
 
	gcurInô
 = 0;

152 
RcmClõ¡_ModuÀ
 
	gRcmClõ¡_Mod
 = {

154 (
Bôs16
)0,

155 (
Bôs16
)0,

156 (
IHóp_H™dÀ
)
NULL


160 
Regi°ry_Desc
 
	gRegi°ry_CURDESC
;

168 
Void
 
	$RcmClõ¡_öô
(
Void
)

170 
Regi°ry_Resu…
 
ªsu…
;

173 i‡(
curInô
++ != 0) {

178 
ªsu…
 = 
	`Regi°ry_addModuÀ
(&
Regi°ry_CURDESC
, 
MODULE_NAME
);

179 
	`As£π_isTrue
(
ªsu…
 =
Regi°ry_SUCCESS
, (
As£π_Id
)
NULL
);

182 
	`As£π_isTrue
((
RcmClõ¡_Obje˘
Ë=(
RcmClõ¡_Såu˘
), 
NULL
);

183 
	}
}

191 
Void
 
	$RcmClõ¡_exô
(
Void
)

196 i‡(--
curInô
 != 0) {

203 
	}
}

209 
Void
 
	$RcmClõ¡_P¨ams_öô
(
RcmClõ¡_P¨ams
 *
∑øms
)

211 
∑øms
->
hópId
 = 
RcmClõ¡_INVALIDHEAPID
;

212 
∑øms
->
ˇŒbackNŸifiˇti⁄
 = 
FALSE
;

213 
	}
}

219 
	#FXNN
 "RcmClõ¡_¸óã"

	)

220 
I¡
 
	$RcmClõ¡_¸óã
(
Såög
 
£rvî
, c⁄° 
RcmClõ¡_P¨ams
 *
∑øms
,

221 
RcmClõ¡_H™dÀ
 *
h™dÀ
)

223 
RcmClõ¡_Obje˘
 *
obj
;

224 
Eº‹_Block
 
eb
;

225 
I¡
 
°©us
 = 
RcmClõ¡_S_SUCCESS
;

228 
	`Log_¥öt1
(
Dügs_ENTRY
, "--> %s: ()", (
IArg
)
FXNN
);

231 
	`Eº‹_öô
(&
eb
);

232 *
h™dÀ
 = (
RcmClõ¡_H™dÀ
)
NULL
;

237 
obj
 = (
RcmClõ¡_H™dÀ
)
	`xdc_ru¡ime_Mem‹y_ˇŒoc
(
	`RcmClõ¡_ModuÀ_hóp
(),

238 (
RcmClõ¡_Obje˘
), (
I¡
), &
eb
);

240 i‡(
NULL
 =
obj
) {

241 
	`Log_îr‹2
(
FXNN
": out of memory: heap=0x%x, size=%u",

242 (
IArg
)
	`RcmClõ¡_ModuÀ_hóp
(), (
RcmClõ¡_Obje˘
));

243 
°©us
 = 
RcmClõ¡_E_NOMEMORY
;

244 
Àave
;

247 
	`Log_¥öt1
(
Dügs_LIFECYCLE
, 
FXNN
": in°™˚ cª©e: 0x%x", (
IArg
)
obj
);

250 
°©us
 = 
	`RcmClõ¡_In°™˚_öô
(
obj
, 
£rvî
, 
∑øms
);

252 i‡(
°©us
 < 0) {

253 
	`RcmClõ¡_In°™˚_föÆize
(
obj
);

254 
	`xdc_ru¡ime_Mem‹y_‰ì
(
	`RcmClõ¡_ModuÀ_hóp
(),

255 (
På
)
obj
, (
RcmClõ¡_Obje˘
));

256 
Àave
;

260 *
h™dÀ
 = (
RcmClõ¡_H™dÀ
)
obj
;

263 
Àave
:

264 
	`Log_¥öt2
(
Dügs_EXIT
, "<-- %s: %d", (
IArg
)
FXNN
, (IArg)
°©us
);

265 (
°©us
);

266 
	}
}

267 #unde‡
FXNN


273 
	#FXNN
 "RcmClõ¡_c⁄°ru˘"

	)

274 
I¡
 
	$RcmClõ¡_c⁄°ru˘
(
RcmClõ¡_Såu˘
 *
°ru˘På
, 
Såög
 
£rvî
,

275 c⁄° 
RcmClõ¡_P¨ams
 *
∑øms
)

277 
RcmClõ¡_Obje˘
 *
obj
 = (RcmClõ¡_Obje˘*)
°ru˘På
;

278 
I¡
 
°©us
 = 
RcmClõ¡_S_SUCCESS
;

281 
	`Log_¥öt1
(
Dügs_ENTRY
, "--> %s: ()", (
IArg
)
FXNN
);

285 
	`Log_¥öt1
(
Dügs_LIFECYCLE
, 
FXNN
": in°™˚ c⁄°ru˘: 0x%x", (
IArg
)
obj
);

288 
	`_mem£t
((
Void
 *)
obj
, 0, (
RcmClõ¡_Obje˘
));

291 
°©us
 = 
	`RcmClõ¡_In°™˚_öô
(
obj
, 
£rvî
, 
∑øms
);

293 i‡(
°©us
 < 0) {

294 
	`RcmClõ¡_In°™˚_föÆize
(
obj
);

295 
Àave
;

299 
Àave
:

300 
	`Log_¥öt2
(
Dügs_EXIT
, "<-- %s: %d", (
IArg
)
FXNN
, (IArg)
°©us
);

301 (
°©us
);

302 
	}
}

303 #unde‡
FXNN


309 
	#FXNN
 "RcmClõ¡_In°™˚_öô"

	)

310 
I¡
 
	$RcmClõ¡_In°™˚_öô
(
RcmClõ¡_Obje˘
 *
obj
, 
Såög
 
£rvî
,

311 c⁄° 
RcmClõ¡_P¨ams
 *
∑øms
)

313 
Eº‹_Block
 
eb
;

314 
MesßgeQ_P¨ams
 
mqP¨ams
;

315 
SyncSemThªad_P¨ams
 
syncP¨ams
;

316 
SemThªad_P¨ams
 
£mP¨ams
;

317 
SemThªad_H™dÀ
 
£mHndl
;

318 
Li°_P¨ams
 
li°P
;

319 
I¡
 
rvÆ
;

320 
I¡
 
°©us
 = 
RcmClõ¡_S_SUCCESS
;

323 
	`Log_¥öt2
(
Dügs_ENTRY
, "--> %s: (obj=0x%x)", (
IArg
)
FXNN
, (IArg)
obj
);

326 
	`Eº‹_öô
(&
eb
);

329 
obj
->
msgId
 = 0xFFFF;

330 
obj
->
sync
 = 
NULL
;

331 
obj
->
£rvîMsgQ
 = 
MesßgeQ_INVALIDMESSAGEQ
;

332 
obj
->
msgQue
 = 
NULL
;

333 
obj
->
îr‹MsgQue
 = 
NULL
;

334 
obj
->
mbxLock
 = 
NULL
;

335 
obj
->
queueLock
 = 
NULL
;

336 
obj
->
ªcùõ¡s
 = 
NULL
;

337 
obj
->
√wMaû
 = 
NULL
;

340 
	`G©eThªad_c⁄°ru˘
(&
obj
->
g©e
, 
NULL
, &
eb
);

342 i‡(
	`Eº‹_check
(&
eb
)) {

343 
	`Log_îr‹0
(
FXNN
": couldÇot create gate object");

344 
°©us
 = 
RcmClõ¡_E_FAIL
;

345 
Àave
;

349 
	`SyncSemThªad_P¨ams_öô
(&
syncP¨ams
);

350 
obj
->
sync
 = 
	`SyncSemThªad_¸óã
(&
syncP¨ams
, &
eb
);

352 i‡(
	`Eº‹_check
(&
eb
)) {

353 
°©us
 = 
RcmClõ¡_E_FAIL
;

354 
Àave
;

358 
	`MesßgeQ_P¨ams_öô
(&
mqP¨ams
);

359 
obj
->
msgQue
 = 
	`MesßgeQ_¸óã
(
NULL
, &
mqP¨ams
);

361 i‡(
obj
->
msgQue
 =
NULL
) {

362 
	`Log_îr‹0
(
FXNN
": couldÇot createÑeturn message queue");

363 
°©us
 = 
RcmClõ¡_E_MSGQCREATEFAILED
;

364 
Àave
;

368 
	`MesßgeQ_P¨ams_öô
(&
mqP¨ams
);

369 
obj
->
îr‹MsgQue
 = 
	`MesßgeQ_¸óã
(
NULL
, &
mqP¨ams
);

371 i‡(
NULL
 =
obj
->
îr‹MsgQue
) {

372 
	`Log_îr‹0
(
FXNN
": couldÇot createÉrror message queue");

373 
°©us
 = 
RcmClõ¡_E_MSGQCREATEFAILED
;

374 
Àave
;

378 
rvÆ
 = 
	`MesßgeQ_›í
(
£rvî
, (
MesßgeQ_QueueId
 *)(&
obj
->
£rvîMsgQ
));

380 i‡(
MesßgeQ_E_NOTFOUND
 =
rvÆ
) {

381 
	`Log_îr‹1
(
FXNN
": giví sîvîÇŸ found, sîvî=0x%x", (
IArg
)
£rvî
);

382 
°©us
 = 
RcmClõ¡_E_SERVERNOTFOUND
;

383 
Àave
;

385 i‡(
°©us
 < 0) {

386 
	`Log_îr‹1
(
FXNN
": couldÇot open server message queue, server=0x%x",

387 (
IArg
)
£rvî
);

388 
°©us
 = 
RcmClõ¡_E_MSGQOPENFAILED
;

389 
Àave
;

393 i‡((
obj
->
cbNŸify
 = 
∑øms
->
ˇŒbackNŸifiˇti⁄
)) {

396 
	`Eº‹_øi£
(&
eb
, 
Eº‹_E_gíîic
, "Not Implemented", 0);

397 
Àave
;

401 i‡((
obj
->
hópId
 = 
∑øms
->hópIdË=
RcmClõ¡_INVALIDHEAPID
) {

402 
	`Log_îr‹0
(
FXNN
": must specifyá heap id in createÖarams");

403 
°©us
 = 
RcmClõ¡_E_INVALIDHEAPID
;

404 
Àave
;

408 
	`SemThªad_P¨ams_öô
(&
£mP¨ams
);

409 
£mHndl
 = 
	`SemThªad_¸óã
(1, &
£mP¨ams
, &
eb
);

410 i‡(
	`Eº‹_check
(&
eb
)) {

411 
°©us
 = 
RcmClõ¡_E_FAIL
;

412 
Àave
;

414 
obj
->
mbxLock
 = 
	`SemThªad_H™dÀ_upCa°
(
£mHndl
);

417 
	`SemThªad_P¨ams_öô
(&
£mP¨ams
);

418 
£mHndl
 = 
	`SemThªad_¸óã
(1, &
£mP¨ams
, &
eb
);

419 i‡(
	`Eº‹_check
(&
eb
)) {

420 
°©us
 = 
RcmClõ¡_E_FAIL
;

421 
Àave
;

423 
obj
->
queueLock
 = 
	`SemThªad_H™dÀ_upCa°
(
£mHndl
);

426 #i‡
	`deföed
(
RCM_ti_ùc
)

427 
	`Li°_P¨ams_öô
(&
li°P
);

428 
obj
->
ªcùõ¡s
 = 
	`Li°_¸óã
(&
li°P
, &
eb
);

430 i‡(
	`Eº‹_check
(&
eb
)) {

431 
	`Log_îr‹0
(
FXNN
": couldÇot createÜist object");

432 
°©us
 = 
RcmClõ¡_E_LISTCREATEFAILED
;

433 
Àave
;

435 #ñi‡
	`deföed
(
RCM_ti_sy¶ök
)

436 
	`Li°_P¨ams_öô
(&
li°P
);

437 
obj
->
ªcùõ¡s
 = 
	`Li°_¸óã
(&
li°P
, 
NULL
);

439 i‡(
NULL
 =
obj
->
ªcùõ¡s
) {

440 
	`Log_îr‹0
(
FXNN
": couldÇot createÜist object");

441 
°©us
 = 
RcmClõ¡_E_LISTCREATEFAILED
;

442 
Àave
;

447 #i‡
	`deföed
(
RCM_ti_ùc
)

448 
	`Li°_P¨ams_öô
(&
li°P
);

449 
obj
->
√wMaû
 = 
	`Li°_¸óã
(&
li°P
, &
eb
);

451 i‡(
	`Eº‹_check
(&
eb
)) {

452 
	`Log_îr‹0
(
FXNN
": couldÇot createÜist object");

453 
°©us
 = 
RcmClõ¡_E_LISTCREATEFAILED
;

454 
Àave
;

456 #ñi‡
	`deföed
(
RCM_ti_sy¶ök
)

457 
	`Li°_P¨ams_öô
(&
li°P
);

458 
obj
->
√wMaû
 = 
	`Li°_¸óã
(&
li°P
, 
NULL
);

460 i‡(
NULL
 =
obj
->
√wMaû
) {

461 
	`Log_îr‹0
(
FXNN
": couldÇot createÜist object");

462 
°©us
 = 
RcmClõ¡_E_LISTCREATEFAILED
;

463 
Àave
;

467 
Àave
:

468 
	`Log_¥öt2
(
Dügs_EXIT
, "<-- %s: %d", (
IArg
)
FXNN
, (IArg)
°©us
);

469 (
°©us
);

470 
	}
}

471 #unde‡
FXNN


477 
	#FXNN
 "RcmClõ¡_dñëe"

	)

478 
I¡
 
	$RcmClõ¡_dñëe
(
RcmClõ¡_H™dÀ
 *
h™dÀPå
)

480 
RcmClõ¡_Obje˘
 *
obj
 = (RcmClõ¡_Obje˘ *)(*
h™dÀPå
);

481 
I¡
 
°©us
 = 
RcmClõ¡_S_SUCCESS
;

484 
	`Log_¥öt1
(
Dügs_ENTRY
, "--> %s: ()", (
IArg
)
FXNN
);

487 
°©us
 = 
	`RcmClõ¡_In°™˚_föÆize
(
obj
);

490 
	`Log_¥öt1
(
Dügs_LIFECYCLE
, 
FXNN
": in°™˚ dñëe: 0x%x", (
IArg
)
obj
);

492 
	`xdc_ru¡ime_Mem‹y_‰ì
(
	`RcmClõ¡_ModuÀ_hóp
(),

493 (
På
)
obj
, (
RcmClõ¡_Obje˘
));

494 *
h™dÀPå
 = 
NULL
;

496 
	`Log_¥öt2
(
Dügs_EXIT
, "<-- %s: %d", (
IArg
)
FXNN
, (IArg)
°©us
);

497 (
°©us
);

498 
	}
}

499 #unde‡
FXNN


505 
	#FXNN
 "RcmClõ¡_de°ru˘"

	)

506 
I¡
 
	$RcmClõ¡_de°ru˘
(
RcmClõ¡_Såu˘
 *
°ru˘På
)

508 
RcmClõ¡_Obje˘
 *
obj
 = (RcmClõ¡_Obje˘ *)(
°ru˘På
);

509 
I¡
 
°©us
 = 
RcmClõ¡_S_SUCCESS
;

512 
	`Log_¥öt1
(
Dügs_ENTRY
, "--> %s: ()", (
IArg
)
FXNN
);

513 
	`Log_¥öt1
(
Dügs_LIFECYCLE
, 
FXNN
": in°™˚ de°ru˘: 0x%x", (
IArg
)
obj
);

516 
°©us
 = 
	`RcmClõ¡_In°™˚_föÆize
(
obj
);

518 
	`Log_¥öt2
(
Dügs_EXIT
, "<-- %s: %d", (
IArg
)
FXNN
, (IArg)
°©us
);

519 (
°©us
);

520 
	}
}

521 #unde‡
FXNN


527 
	#FXNN
 "RcmClõ¡_In°™˚_föÆize"

	)

528 
I¡
 
	$RcmClõ¡_In°™˚_föÆize
(
RcmClõ¡_Obje˘
 *
obj
)

530 
SemThªad_H™dÀ
 
£mH
;

531 
I¡
 
°©us
 = 
RcmClõ¡_S_SUCCESS
;

534 
	`Log_¥öt1
(
Dügs_ENTRY
, "--> "
FXNN
": (obj=0x%x)", (
IArg
)
obj
);

536 i‡(
NULL
 !
obj
->
√wMaû
) {

537 
	`Li°_dñëe
(&
obj
->
√wMaû
);

540 i‡(
NULL
 !
obj
->
ªcùõ¡s
) {

541 
	`Li°_dñëe
(&
obj
->
ªcùõ¡s
);

544 i‡(
NULL
 !
obj
->
queueLock
) {

545 
£mH
 = 
	`SemThªad_H™dÀ_downCa°
(
obj
->
queueLock
);

546 
	`SemThªad_dñëe
(&
£mH
);

547 
obj
->
queueLock
 = 
NULL
;

550 i‡(
NULL
 !
obj
->
mbxLock
) {

551 
£mH
 = 
	`SemThªad_H™dÀ_downCa°
(
obj
->
mbxLock
);

552 
	`SemThªad_dñëe
(&
£mH
);

553 
obj
->
mbxLock
 = 
NULL
;

556 i‡(
MesßgeQ_INVALIDMESSAGEQ
 !
obj
->
£rvîMsgQ
) {

557 
	`MesßgeQ_˛o£
((
MesßgeQ_QueueId
 *)(&
obj
->
£rvîMsgQ
));

560 i‡(
NULL
 !
obj
->
îr‹MsgQue
) {

561 
	`MesßgeQ_dñëe
(&
obj
->
îr‹MsgQue
);

564 i‡(
NULL
 !
obj
->
msgQue
) {

565 
	`MesßgeQ_dñëe
(&
obj
->
msgQue
);

568 i‡(
NULL
 !
obj
->
sync
) {

569 
	`SyncSemThªad_dñëe
((
SyncSemThªad_H™dÀ
 *)(&
obj
->
sync
));

573 
	`G©eThªad_de°ru˘
(&
obj
->
g©e
);

575 
	`Log_¥öt1
(
Dügs_EXIT
, "<-- "
FXNN
": %d", (
IArg
)
°©us
);

576 (
°©us
);

577 
	}
}

578 #unde‡
FXNN


584 
	#FXNN
 "RcmClõ¡_acquúeJobId"

	)

585 
I¡
 
	$RcmClõ¡_acquúeJobId
(
RcmClõ¡_Obje˘
 *
obj
, 
UI¡16
 *
jobIdPå
)

587 
RcmClõ¡_Mesßge
 *
msg
;

588 
RcmClõ¡_Packë
 *
∑ckë
;

589 
MesßgeQ_Msg
 
msgqMsg
;

590 
UI¡16
 
msgId
;

591 
I¡
 
rvÆ
;

592 
UI¡16
 
£rvîSètus
;

593 
I¡
 
°©us
 = 
RcmClõ¡_S_SUCCESS
;

596 
	`Log_¥öt2
(
Dügs_ENTRY
,

597 "--> "
FXNN
": (obj=0x%x, jobIdPå=0x%x)", (
IArg
)
obj
, (IArg)
jobIdPå
);

600 
°©us
 = 
	`RcmClõ¡_Æloc
(
obj
, (
UI¡16
), &
msg
);

602 i‡(
°©us
 < 0) {

603 
Àave
;

607 
∑ckë
 = 
	`RcmClõ¡_gëPackëAddr_P
(
msg
);

608 
∑ckë
->
desc
 |
RcmClõ¡_Desc_JOB_ACQ
 << 
RcmClõ¡_Desc_TYPE_SHIFT
;

609 
msgId
 = 
∑ckë
->msgId;

612 
msgqMsg
 = (
MesßgeQ_Msg
)
∑ckë
;

613 
	`MesßgeQ_£tRïlyQueue
(
obj
->
msgQue
, 
msgqMsg
);

616 
rvÆ
 = 
	`MesßgeQ_put
((
MesßgeQ_QueueId
)
obj
->
£rvîMsgQ
, 
msgqMsg
);

618 i‡(
rvÆ
 < 0) {

619 
	`Log_îr‹0
(
FXNN
": unableÅoÅhe send messageÅoÅhe server");

620 
°©us
 = 
RcmClõ¡_E_FAIL
;

621 
Àave
;

625 
°©us
 = 
	`RcmClõ¡_gëRëu∫Msg_P
(
obj
, 
msgId
, &
msg
);

627 i‡(
°©us
 < 0) {

628 
Àave
;

632 
∑ckë
 = 
	`RcmClõ¡_gëPackëAddr_P
(
msg
);

633 
£rvîSètus
 = (
RcmClõ¡_Desc_TYPE_MASK
 & 
∑ckë
->
desc
) >>

634 
RcmClõ¡_Desc_TYPE_SHIFT
;

636 
£rvîSètus
) {

637 
RcmSîvî_Sètus_SUCCESS
:

641 
	`Log_îr‹1
(
FXNN
": sîvîÑëu∫edÉº‹ %d", (
IArg
)
£rvîSètus
);

642 
°©us
 = 
RcmClõ¡_E_SERVERERROR
;

643 
Àave
;

647 *
jobIdPå
 = (
UI¡16
)(
msg
->
d©a
[0]);

650 
Àave
:

651 i‡(
msg
 !
NULL
) {

652 
	`RcmClõ¡_‰ì
(
obj
, 
msg
);

654 
	`Log_¥öt1
(
Dügs_EXIT
, "<-- "
FXNN
": %d", (
IArg
)
°©us
);

655 (
°©us
);

656 
	}
}

657 #unde‡
FXNN


663 
	#FXNN
 "RcmClõ¡_addSymbﬁ"

	)

664 
I¡
 
	$RcmClõ¡_addSymbﬁ
(
RcmClõ¡_Obje˘
 *
obj
, 
Såög
 
«me
,

665 
Fxn
 
addªss
, 
UI¡32
 *
ödex
)

668 
I¡
 
°©us
 = 
RcmClõ¡_E_FAIL
;

671 
	`Log_¥öt2
(
Dügs_ENTRY
, "--> %s: (obj=0x%x)", (
IArg
)
FXNN
, (IArg)
obj
);

675 
	`Log_¥öt2
(
Dügs_EXIT
, "<-- %s: %d", (
IArg
)
FXNN
, (IArg)
°©us
);

676 (
°©us
);

677 
	}
}

678 #unde‡
FXNN


684 
	#FXNN
 "RcmClõ¡_Æloc"

	)

685 
I¡
 
	$RcmClõ¡_Æloc
(
RcmClõ¡_Obje˘
 *
obj
, 
UI¡32
 
d©aSize
,

686 
RcmClõ¡_Mesßge
 **
mesßge
)

688 
SizeT
 
tŸÆSize
;

689 
RcmClõ¡_Packë
 *
∑ckë
;

690 
I¡
 
°©us
 = 
RcmClõ¡_S_SUCCESS
;

693 
	`Log_¥öt3
(
Dügs_ENTRY
,

695 (
IArg
)
obj
, (IArg)
d©aSize
, (IArg)
mesßge
);

698 
d©aSize
 = (d©aSizê< (
UI¡32
) ? (UInt32) : dataSize);

701 
tŸÆSize
 = (
RcmClõ¡_Packë
Ë- (
UI¡32
Ë+ 
d©aSize
;

704 
∑ckë
 = (
RcmClõ¡_Packë
*)
	`MesßgeQ_Æloc
(
obj
->
hópId
, 
tŸÆSize
);

706 i‡(
NULL
 =
∑ckë
) {

707 
	`Log_îr‹1
(
FXNN
": couldÇotállocate message, size = %u",

708 (
IArg
)
tŸÆSize
);

709 
°©us
 = 
RcmClõ¡_E_MSGALLOCFAILED
;

710 
Àave
;

714 
	`Log_¥öt2
(
Dügs_INFO
,

715 
FXNN
": RcmMessageállocated:áddr=0x%x, size=%u (total size)",

716 (
IArg
)
∑ckë
, (IArg)
tŸÆSize
);

719 
∑ckë
->
desc
 = 0;

720 
∑ckë
->
msgId
 = 
	`RcmClõ¡_gíMsgId_P
(
obj
);

721 
∑ckë
->
mesßge
.
poﬁId
 = 
RcmClõ¡_DEFAULTPOOLID
;

722 
∑ckë
->
mesßge
.
jobId
 = 
RcmClõ¡_DISCRETEJOBID
;

723 
∑ckë
->
mesßge
.
fxnIdx
 = 
RcmClõ¡_INVALIDFXNIDX
;

724 
∑ckë
->
mesßge
.
ªsu…
 = 0;

725 
∑ckë
->
mesßge
.
d©aSize
 = dataSize;

728 *
mesßge
 = (
RcmClõ¡_Mesßge
 *)(&(
∑ckë
->message));

731 
Àave
:

732 
	`Log_¥öt2
(
Dügs_EXIT
, "<-- %s: %d", (
IArg
)
FXNN
, (IArg)
°©us
);

733 (
°©us
);

734 
	}
}

735 #unde‡
FXNN


749 
	#FXNN
 "RcmClõ¡_checkF‹Eº‹"

	)

750 
I¡
 
	$RcmClõ¡_checkF‹Eº‹
(
RcmClõ¡_Obje˘
 *
obj
, 
RcmClõ¡_Mesßge
 **
πnMsg
)

752 
RcmClõ¡_Mesßge
 *
rcmMsg
;

753 
RcmClõ¡_Packë
 *
∑ckë
;

754 
MesßgeQ_Msg
 
msgqMsg
;

755 
UI¡16
 
£rvîSètus
;

756 
I¡
 
rvÆ
;

757 
I¡
 
°©us
 = 
RcmClõ¡_S_SUCCESS
;

760 
	`Log_¥öt1
(
Dügs_ENTRY
,

761 "--> "
FXNN
": (obj=0x%x,ÑäMsg=0x%x)", (
IArg
)
πnMsg
);

763 *
πnMsg
 = 
NULL
;

766 
rvÆ
 = 
	`MesßgeQ_gë
(
obj
->
îr‹MsgQue
, &
msgqMsg
, 0);

768 i‡((
MesßgeQ_E_TIMEOUT
 !
rvÆ
) && (rval < 0)) {

769 
	`Log_îr‹1
(
FXNN
": MesßgeQ_gë(Ëªtu∫edÉº‹ %d", (
IArg
)
rvÆ
);

770 
°©us
 = 
RcmClõ¡_E_IPCERROR
;

771 
Àave
;

773 i‡(
msgqMsg
 =
NULL
) {

774 
Àave
;

778 
∑ckë
 = 
	`gëPackëAddrMsgqMsg
(
msgqMsg
);

779 
rcmMsg
 = &
∑ckë
->
mesßge
;

780 *
πnMsg
 = 
rcmMsg
;

783 
£rvîSètus
 = (
RcmClõ¡_Desc_TYPE_MASK
 & 
∑ckë
->
desc
) >>

784 
RcmClõ¡_Desc_TYPE_SHIFT
;

786 
£rvîSètus
) {

787 
RcmSîvî_Sètus_JobNŸFound
:

788 
	`Log_îr‹1
(
FXNN
": job id=%dÇŸ found", (
IArg
)
rcmMsg
->
jobId
);

791 
RcmSîvî_Sètus_PoﬁNŸFound
:

792 
	`Log_îr‹1
(
FXNN
":Öoﬁ id=0x%xÇŸ found", (
IArg
)
rcmMsg
->
poﬁId
);

795 
RcmSîvî_Sètus_INVALID_FXN
:

796 
	`Log_îr‹1
(
FXNN
": invalid function index: 0x%x",

797 (
IArg
)
rcmMsg
->
fxnIdx
);

798 
°©us
 = 
RcmClõ¡_E_INVALIDFXNIDX
;

801 
RcmSîvî_Sètus_MSG_FXN_ERR
:

802 
	`Log_îr‹1
(
FXNN
": mesßgêfun˘i⁄Éº‹ %d", (
IArg
)
rcmMsg
->
ªsu…
);

803 
°©us
 = 
RcmClõ¡_E_MSGFXNERROR
;

807 
	`Log_îr‹1
(
FXNN
": sîvîÑëu∫edÉº‹ %d", (
IArg
)
£rvîSètus
);

808 
°©us
 = 
RcmClõ¡_E_SERVERERROR
;

809 
Àave
;

813 
Àave
:

814 
	`Log_¥öt1
(
Dügs_EXIT
, "<-- "
FXNN
": %d", (
IArg
)
°©us
);

815 (
°©us
);

816 
	}
}

817 #unde‡
FXNN


823 
	#FXNN
 "RcmClõ¡_exec"

	)

824 
I¡
 
	$RcmClõ¡_exec
(
RcmClõ¡_Obje˘
 *
obj
,

825 
RcmClõ¡_Mesßge
 *
cmdMsg
, RcmClõ¡_Mesßgê**
ªtu∫Msg
)

827 
RcmClõ¡_Packë
 *
∑ckë
;

828 
RcmClõ¡_Mesßge
 *
πnMsg
;

829 
MesßgeQ_Msg
 
msgqMsg
;

830 
UI¡16
 
msgId
;

831 
UI¡16
 
£rvîSètus
;

832 
I¡
 
rvÆ
;

833 
I¡
 
°©us
 = 
RcmClõ¡_S_SUCCESS
;

836 
	`Log_¥öt2
(
Dügs_ENTRY
,

837 "--> "
FXNN
": (cmdMsg=0x%x,ÑäMsg=0x%x)", (
IArg
)
obj
, (IArg)
ªtu∫Msg
);

840 
∑ckë
 = 
	`RcmClõ¡_gëPackëAddr_P
(
cmdMsg
);

841 
∑ckë
->
desc
 |
RcmClõ¡_Desc_RCM_MSG
 << 
RcmClõ¡_Desc_TYPE_SHIFT
;

842 
msgId
 = 
∑ckë
->msgId;

845 
msgqMsg
 = (
MesßgeQ_Msg
)
∑ckë
;

846 
	`MesßgeQ_£tRïlyQueue
(
obj
->
msgQue
, 
msgqMsg
);

849 
°©us
 = 
	`MesßgeQ_put
((
MesßgeQ_QueueId
)
obj
->
£rvîMsgQ
, 
msgqMsg
);

851 i‡(
°©us
 < 0) {

852 
	`Log_îr‹0
(
FXNN
": unableÅoÅhe send messageÅoÅhe server");

853 
°©us
 = 
RcmClõ¡_E_EXECFAILED
;

854 
Àave
;

858 
rvÆ
 = 
	`RcmClõ¡_gëRëu∫Msg_P
(
obj
, 
msgId
, &
πnMsg
);

860 i‡(
rvÆ
 < 0) {

861 *
ªtu∫Msg
 = 
NULL
;

862 
°©us
 = 
rvÆ
;

863 
Àave
;

865 *
ªtu∫Msg
 = 
πnMsg
;

868 
∑ckë
 = 
	`RcmClõ¡_gëPackëAddr_P
(
πnMsg
);

869 
£rvîSètus
 = (
RcmClõ¡_Desc_TYPE_MASK
 & 
∑ckë
->
desc
) >>

870 
RcmClõ¡_Desc_TYPE_SHIFT
;

872 
£rvîSètus
) {

873 
RcmSîvî_Sètus_SUCCESS
:

876 
RcmSîvî_Sètus_INVALID_FXN
:

877 
	`Log_îr‹1
(
FXNN
": invalid function index: 0x%x",

878 (
IArg
)
πnMsg
->
fxnIdx
);

879 
°©us
 = 
RcmClõ¡_E_INVALIDFXNIDX
;

880 
Àave
;

882 
RcmSîvî_Sètus_MSG_FXN_ERR
:

883 
	`Log_îr‹1
(
FXNN
": mesßgêfun˘i⁄Éº‹ %d", (
IArg
)
πnMsg
->
ªsu…
);

884 
°©us
 = 
RcmClõ¡_E_MSGFXNERROR
;

885 
Àave
;

888 
	`Log_îr‹1
(
FXNN
": sîvîÑëu∫edÉº‹ %d", (
IArg
)
£rvîSètus
);

889 
°©us
 = 
RcmClõ¡_E_SERVERERROR
;

890 
Àave
;

893 
Àave
:

894 
	`Log_¥öt1
(
Dügs_EXIT
, "<-- "
FXNN
": %d", (
IArg
)
°©us
);

895 (
°©us
);

896 
	}
}

897 #unde‡
FXNN


903 
	#FXNN
 "RcmClõ¡_execAsync"

	)

904 
I¡
 
	$RcmClõ¡_execAsync
(
RcmClõ¡_Obje˘
 *
obj
, 
RcmClõ¡_Mesßge
 *
cmdMsg
,

905 
RcmClõ¡_CÆlbackFxn
 
ˇŒback
, 
På
 
≠pD©a
)

907 
RcmClõ¡_Packë
 *
∑ckë
;

908 
MesßgeQ_Msg
 
msgqMsg
;

909 
I¡
 
rvÆ
;

910 
I¡
 
°©us
 = 
RcmClõ¡_S_SUCCESS
;

913 
	`Log_¥öt3
(
Dügs_ENTRY
,

914 "--> %s: 0x%x, 0x%x", (
IArg
)
FXNN
, (IArg)
obj
, (IArg)
cmdMsg
);

917 i‡(!
obj
->
cbNŸify
) {

918 
	`Log_îr‹0
(
FXNN
":ásynchronousÇotificationÇotÉnabled");

919 
°©us
 = 
RcmClõ¡_E_EXECASYNCNOTENABLED
;

920 
Àave
;

924 
∑ckë
 = 
	`RcmClõ¡_gëPackëAddr_P
(
cmdMsg
);

925 
∑ckë
->
desc
 |
RcmClõ¡_Desc_RCM_MSG
 << 
RcmClõ¡_Desc_TYPE_SHIFT
;

928 
msgqMsg
 = (
MesßgeQ_Msg
)
∑ckë
;

929 
	`MesßgeQ_£tRïlyQueue
(
obj
->
msgQue
, 
msgqMsg
);

932 
rvÆ
 = 
	`MesßgeQ_put
((
MesßgeQ_QueueId
)
obj
->
£rvîMsgQ
, 
msgqMsg
);

934 i‡(
rvÆ
 < 0) {

935 
	`Log_îr‹0
(
FXNN
": unableÅoÅhe send messageÅoÅhe server");

936 
°©us
 = 
RcmClõ¡_E_EXECFAILED
;

937 
Àave
;

942 
Àave
:

943 
	`Log_¥öt2
(
Dügs_EXIT
, "<-- %s: %d", (
IArg
)
FXNN
, (IArg)
°©us
);

944 (
°©us
);

945 
	}
}

946 #unde‡
FXNN


952 
	#FXNN
 "RcmClõ¡_execCmd"

	)

953 
I¡
 
	$RcmClõ¡_execCmd
(
RcmClõ¡_Obje˘
 *
obj
, 
RcmClõ¡_Mesßge
 *
msg
)

955 
RcmClõ¡_Packë
 *
∑ckë
;

956 
MesßgeQ_Msg
 
msgqMsg
;

957 
I¡
 
rvÆ
;

958 
I¡
 
°©us
 = 
RcmClõ¡_S_SUCCESS
;

961 
	`Log_¥öt2
(
Dügs_ENTRY
 | 
Dügs_INFO
,

962 "--> "
FXNN
": (obj=0x%x, msg=0x%x)", (
IArg
)
obj
, (IArg)
msg
);

965 
∑ckë
 = 
	`RcmClõ¡_gëPackëAddr_P
(
msg
);

966 
∑ckë
->
desc
 |
RcmClõ¡_Desc_CMD
 << 
RcmClõ¡_Desc_TYPE_SHIFT
;

969 
msgqMsg
 = (
MesßgeQ_Msg
)
∑ckë
;

970 
	`MesßgeQ_£tRïlyQueue
(
obj
->
îr‹MsgQue
, 
msgqMsg
);

973 
rvÆ
 = 
	`MesßgeQ_put
((
MesßgeQ_QueueId
)
obj
->
£rvîMsgQ
, 
msgqMsg
);

975 i‡(
rvÆ
 < 0) {

976 
	`Log_îr‹0
(
FXNN
": unableÅo send messageÅo server");

977 
°©us
 = 
RcmClõ¡_E_IPCERROR
;

980 
	`Log_¥öt1
(
Dügs_EXIT
 | 
Dügs_INFO
, "<-- "
FXNN
": %d", (
IArg
)
°©us
);

981 (
°©us
);

982 
	}
}

983 #unde‡
FXNN


989 
	#FXNN
 "RcmClõ¡_execDpc"

	)

990 
I¡
 
	$RcmClõ¡_execDpc
(
RcmClõ¡_Obje˘
 *
obj
,

991 
RcmClõ¡_Mesßge
 *
cmdMsg
, RcmClõ¡_Mesßgê**
ªtu∫Msg
)

993 
RcmClõ¡_Packë
 *
∑ckë
;

994 
RcmClõ¡_Mesßge
 *
πnMsg
;

995 
MesßgeQ_Msg
 
msgqMsg
;

996 
UI¡16
 
msgId
;

997 
I¡
 
rvÆ
;

998 
I¡
 
°©us
 = 
RcmClõ¡_S_SUCCESS
;

1001 
	`Log_¥öt3
(
Dügs_ENTRY
,

1002 "--> %s: 0x%x, 0x%x", (
IArg
)
FXNN
, (IArg)
obj
, (IArg)
ªtu∫Msg
);

1005 
∑ckë
 = 
	`RcmClõ¡_gëPackëAddr_P
(
cmdMsg
);

1006 
∑ckë
->
desc
 |
RcmClõ¡_Desc_DPC
 << 
RcmClõ¡_Desc_TYPE_SHIFT
;

1007 
msgId
 = 
∑ckë
->msgId;

1010 
msgqMsg
 = (
MesßgeQ_Msg
)
∑ckë
;

1011 
	`MesßgeQ_£tRïlyQueue
(
obj
->
msgQue
, 
msgqMsg
);

1014 
rvÆ
 = 
	`MesßgeQ_put
((
MesßgeQ_QueueId
)
obj
->
£rvîMsgQ
, 
msgqMsg
);

1016 i‡(
rvÆ
 < 0) {

1018 
	`Log_îr‹0
(
FXNN
": unableÅoÅhe send messageÅoÅhe server");

1019 
°©us
 = 
RcmClõ¡_E_EXECFAILED
;

1020 
Àave
;

1024 
rvÆ
 = 
	`RcmClõ¡_gëRëu∫Msg_P
(
obj
, 
msgId
, &
πnMsg
);

1026 i‡(
rvÆ
 < 0) {

1027 *
ªtu∫Msg
 = 
NULL
;

1028 
°©us
 = 
rvÆ
;

1029 
Àave
;

1031 *
ªtu∫Msg
 = 
πnMsg
;

1034 
Àave
:

1035 
	`Log_¥öt2
(
Dügs_EXIT
, "<-- %s: %d", (
IArg
)
FXNN
, (IArg)
°©us
);

1036 (
°©us
);

1037 
	}
}

1038 #unde‡
FXNN


1044 
	#FXNN
 "RcmClõ¡_execNoWaô"

	)

1045 
I¡
 
	$RcmClõ¡_execNoWaô
(
RcmClõ¡_Obje˘
 *
obj
, 
RcmClõ¡_Mesßge
 *
cmdMsg
,

1046 
UI¡16
 *
msgId
)

1048 
RcmClõ¡_Packë
 *
∑ckë
;

1049 
MesßgeQ_Msg
 
msgqMsg
;

1050 
I¡
 
rvÆ
;

1051 
I¡
 
°©us
 = 
RcmClõ¡_S_SUCCESS
;

1054 
	`Log_¥öt4
(
Dügs_ENTRY
,

1056 (
IArg
)
FXNN
, (IArg)
obj
, (IArg)
cmdMsg
, (IArg)
msgId
);

1059 
∑ckë
 = 
	`RcmClõ¡_gëPackëAddr_P
(
cmdMsg
);

1060 
∑ckë
->
desc
 |
RcmClõ¡_Desc_RCM_MSG
 << 
RcmClõ¡_Desc_TYPE_SHIFT
;

1061 *
msgId
 = 
∑ckë
->msgId;

1064 
msgqMsg
 = (
MesßgeQ_Msg
)
∑ckë
;

1065 
	`MesßgeQ_£tRïlyQueue
(
obj
->
msgQue
, 
msgqMsg
);

1068 
	`Log_¥öt1
(
Dügs_ANALYSIS
, "%s: >>> MesßgeQ_put", (
IArg
)
FXNN
);

1069 
rvÆ
 = 
	`MesßgeQ_put
((
MesßgeQ_QueueId
)
obj
->
£rvîMsgQ
, 
msgqMsg
);

1070 
	`Log_¥öt1
(
Dügs_ANALYSIS
, "%s: <<< MesßgeQ_put", (
IArg
)
FXNN
);

1072 i‡(
rvÆ
 < 0) {

1073 *
msgId
 = 
RcmClõ¡_INVALIDMSGID
;

1074 
	`Log_îr‹0
(
FXNN
": unableÅoÅhe send messageÅoÅhe server");

1075 
°©us
 = 
RcmClõ¡_E_EXECFAILED
;

1076 
Àave
;

1079 
Àave
:

1080 
	`Log_¥öt2
(
Dügs_EXIT
, "<-- %s: %d", (
IArg
)
FXNN
, (IArg)
°©us
);

1081 (
°©us
);

1082 
	}
}

1083 #unde‡
FXNN


1089 
	#FXNN
 "RcmClõ¡_‰ì"

	)

1090 
I¡
 
	$RcmClõ¡_‰ì
(
RcmClõ¡_Obje˘
 *
obj
, 
RcmClõ¡_Mesßge
 *
msg
)

1092 
I¡
 
rvÆ
;

1093 
MesßgeQ_Msg
 
msgqMsg
;

1094 
I¡
 
°©us
 = 
RcmClõ¡_S_SUCCESS
;

1097 
	`Log_¥öt2
(
Dügs_ENTRY
,

1098 "--> "
FXNN
": (obj=0x%x, msg=0x%x)", (
IArg
)
obj
, (IArg)
msg
);

1100 
msgqMsg
 = (
MesßgeQ_Msg
)
	`RcmClõ¡_gëPackëAddr_P
(
msg
);

1101 
rvÆ
 = 
	`MesßgeQ_‰ì
(
msgqMsg
);

1103 i‡(
rvÆ
 < 0) {

1104 
	`Log_îr‹1
(
FXNN
": ip¯ªtu∫edÉº‹ %d", (
IArg
)
rvÆ
);

1105 
°©us
 = 
RcmClõ¡_E_IPCERROR
;

1106 
Àave
;

1110 
Àave
:

1111 
	`Log_¥öt1
(
Dügs_EXIT
, "<-- "
FXNN
": %d", (
IArg
)
°©us
);

1112 (
°©us
);

1113 
	}
}

1114 #unde‡
FXNN


1120 
	#FXNN
 "RcmClõ¡_gëSymbﬁIndex"

	)

1121 
I¡
 
	$RcmClõ¡_gëSymbﬁIndex
(
RcmClõ¡_Obje˘
 *
obj
, 
Såög
 
«me
, 
UI¡32
 *
ödex
)

1123 
SizeT
 
Àn
;

1124 
RcmClõ¡_Packë
 *
∑ckë
;

1125 
UI¡16
 
msgId
;

1126 
MesßgeQ_Msg
 
msgqMsg
;

1127 
I¡
 
rvÆ
;

1128 
UI¡16
 
£rvîSètus
;

1129 
RcmClõ¡_Mesßge
 *
rcmMsg
 = 
NULL
;

1130 
I¡
 
°©us
 = 
RcmClõ¡_S_SUCCESS
;

1133 
	`Log_¥öt3
(
Dügs_ENTRY
,

1134 "--> "
FXNN
": (obj=0x%x,Çame=0x%x, index=0x%x",

1135 (
IArg
)
obj
, (IArg)
«me
, (IArg)
ödex
);

1138 
Àn
 = 
	`_°æí
(
«me
) + 1;

1139 
rvÆ
 = 
	`RcmClõ¡_Æloc
(
obj
, 
Àn
, &
rcmMsg
);

1141 i‡(
rvÆ
 < 0) {

1142 
°©us
 = 
rvÆ
;

1143 
Àave
;

1147 
rcmMsg
->
d©aSize
 = 
Àn
;

1148 
	`_°r˝y
((
Ch¨
 *)
rcmMsg
->
d©a
, 
«me
);

1151 
∑ckë
 = 
	`RcmClõ¡_gëPackëAddr_P
(
rcmMsg
);

1152 
∑ckë
->
desc
 |
RcmClõ¡_Desc_SYM_IDX
 << 
RcmClõ¡_Desc_TYPE_SHIFT
;

1153 
msgId
 = 
∑ckë
->msgId;

1156 
msgqMsg
 = (
MesßgeQ_Msg
)
∑ckë
;

1157 
	`MesßgeQ_£tRïlyQueue
(
obj
->
msgQue
, 
msgqMsg
);

1160 
rvÆ
 = 
	`MesßgeQ_put
((
MesßgeQ_QueueId
)
obj
->
£rvîMsgQ
, 
msgqMsg
);

1162 i‡(
rvÆ
 < 0) {

1163 
	`Log_îr‹0
(
FXNN
": unableÅoÅhe send messageÅoÅhe server");

1164 
°©us
 = 
RcmClõ¡_E_EXECFAILED
;

1165 
Àave
;

1169 
rvÆ
 = 
	`RcmClõ¡_gëRëu∫Msg_P
(
obj
, 
msgId
, &
rcmMsg
);

1171 i‡(
rvÆ
 < 0) {

1172 
°©us
 = 
rvÆ
;

1173 
Àave
;

1177 
∑ckë
 = 
	`RcmClõ¡_gëPackëAddr_P
(
rcmMsg
);

1178 
£rvîSètus
 = (
RcmClõ¡_Desc_TYPE_MASK
 & 
∑ckë
->
desc
) >>

1179 
RcmClõ¡_Desc_TYPE_SHIFT
;

1181 
£rvîSètus
) {

1182 
RcmSîvî_Sètus_SUCCESS
:

1185 
RcmSîvî_Sètus_SYMBOL_NOT_FOUND
:

1186 
	`Log_îr‹1
(
FXNN
": symbﬁÇŸ found,Çame=0x%x", (
IArg
)
«me
);

1187 
°©us
 = 
RcmClõ¡_E_SYMBOLNOTFOUND
;

1188 
Àave
;

1191 
	`Log_îr‹1
(
FXNN
": sîvîÑëu∫edÉº‹ %d", (
IArg
)
£rvîSètus
);

1192 
°©us
 = 
RcmClõ¡_E_SERVERERROR
;

1193 
Àave
;

1197 *
ödex
 = 
rcmMsg
->
d©a
[0];

1200 
Àave
:

1201 i‡(
rcmMsg
 !
NULL
) {

1202 
	`RcmClõ¡_‰ì
(
obj
, 
rcmMsg
);

1204 
	`Log_¥öt1
(
Dügs_EXIT
, "<-- "
FXNN
": %d", (
IArg
)
°©us
);

1205 (
°©us
);

1206 
	}
}

1207 #unde‡
FXNN


1213 
	#FXNN
 "RcmClõ¡_ªÀa£JobId"

	)

1214 
I¡
 
	$RcmClõ¡_ªÀa£JobId
(
RcmClõ¡_Obje˘
 *
obj
, 
UI¡16
 
jobId
)

1216 
RcmClõ¡_Mesßge
 *
msg
;

1217 
RcmClõ¡_Packë
 *
∑ckë
;

1218 
MesßgeQ_Msg
 
msgqMsg
;

1219 
UI¡16
 
msgId
;

1220 
I¡
 
rvÆ
;

1221 
UI¡16
 
£rvîSètus
;

1222 
I¡
 
°©us
 = 
RcmClõ¡_S_SUCCESS
;

1225 
	`Log_¥öt2
(
Dügs_ENTRY
,

1226 "--> "
FXNN
": (obj=0x%x, jobId=0x%x)", (
IArg
)
obj
, (IArg)
jobId
);

1229 
°©us
 = 
	`RcmClõ¡_Æloc
(
obj
, (
UI¡16
), &
msg
);

1231 i‡(
°©us
 < 0) {

1232 
Àave
;

1236 
∑ckë
 = 
	`RcmClõ¡_gëPackëAddr_P
(
msg
);

1237 
∑ckë
->
desc
 |
RcmClõ¡_Desc_JOB_REL
 << 
RcmClõ¡_Desc_TYPE_SHIFT
;

1238 
msgId
 = 
∑ckë
->msgId;

1241 
msgqMsg
 = (
MesßgeQ_Msg
)
∑ckë
;

1242 
	`MesßgeQ_£tRïlyQueue
(
obj
->
msgQue
, 
msgqMsg
);

1245 *(
UI¡16
 *)(&
msg
->
d©a
[0]Ë
jobId
;

1248 
rvÆ
 = 
	`MesßgeQ_put
((
MesßgeQ_QueueId
)
obj
->
£rvîMsgQ
, 
msgqMsg
);

1250 i‡(
rvÆ
 < 0) {

1251 
	`Log_îr‹0
(
FXNN
": unableÅoÅhe send messageÅoÅhe server");

1252 
°©us
 = 
RcmClõ¡_E_FAIL
;

1253 
Àave
;

1257 
°©us
 = 
	`RcmClõ¡_gëRëu∫Msg_P
(
obj
, 
msgId
, &
msg
);

1259 i‡(
°©us
 < 0) {

1260 
Àave
;

1264 
∑ckë
 = 
	`RcmClõ¡_gëPackëAddr_P
(
msg
);

1265 
£rvîSètus
 = (
RcmClõ¡_Desc_TYPE_MASK
 & 
∑ckë
->
desc
) >>

1266 
RcmClõ¡_Desc_TYPE_SHIFT
;

1268 
£rvîSètus
) {

1269 
RcmSîvî_Sètus_SUCCESS
:

1272 
RcmSîvî_Sètus_JobNŸFound
:

1273 
	`Log_îr‹1
(
FXNN
": jobId=%dÇŸ found o¿£rvî", (
IArg
)
jobId
);

1274 
°©us
 = 
RcmClõ¡_E_JOBIDNOTFOUND
;

1278 
	`Log_îr‹1
(
FXNN
": sîvîÑëu∫edÉº‹ %d", (
IArg
)
£rvîSètus
);

1279 
°©us
 = 
RcmClõ¡_E_SERVERERROR
;

1284 
Àave
:

1285 i‡(
msg
 !
NULL
) {

1286 
	`RcmClõ¡_‰ì
(
obj
, 
msg
);

1288 
	`Log_¥öt1
(
Dügs_EXIT
, "<-- "
FXNN
": %d", (
IArg
)
°©us
);

1289 (
°©us
);

1291 
	}
}

1292 #unde‡
FXNN


1297 
	#FXNN
 "RcmClõ¡_ªmoveSymbﬁ"

	)

1298 
I¡
 
	$RcmClõ¡_ªmoveSymbﬁ
(
RcmClõ¡_Obje˘
 *
obj
, 
Såög
 
«me
)

1301 
I¡
 
°©us
 = 
RcmClõ¡_E_FAIL
;

1304 
	`Log_¥öt2
(
Dügs_ENTRY
, "--> %s: (obj=0x%x)", (
IArg
)
FXNN
, (IArg)
obj
);

1308 
	`Log_¥öt2
(
Dügs_EXIT
, "<-- %s: %d", (
IArg
)
FXNN
, (IArg)
°©us
);

1309 (
°©us
);

1310 
	}
}

1311 #unde‡
FXNN


1317 
	#FXNN
 "RcmClõ¡_waôU¡ûD⁄e"

	)

1318 
I¡
 
	$RcmClõ¡_waôU¡ûD⁄e
(
RcmClõ¡_Obje˘
 *
obj
,

1319 
UI¡16
 
msgId
, 
RcmClõ¡_Mesßge
 **
ªtu∫Msg
)

1321 
RcmClõ¡_Mesßge
 *
πnMsg
;

1322 
I¡
 
rvÆ
;

1323 
I¡
 
°©us
 = 
RcmClõ¡_S_SUCCESS
;

1326 
	`Log_¥öt4
(
Dügs_ENTRY
, "--> %s: (obj=0x%x, msgId=%d, msg=0x%x)",

1327 (
IArg
)
FXNN
, (IArg)
obj
, (IArg)
msgId
, (IArg)
ªtu∫Msg
);

1330 
rvÆ
 = 
	`RcmClõ¡_gëRëu∫Msg_P
(
obj
, 
msgId
, &
πnMsg
);

1332 i‡(
rvÆ
 < 0) {

1333 *
ªtu∫Msg
 = 
NULL
;

1334 
°©us
 = 
rvÆ
;

1335 
Àave
;

1337 *
ªtu∫Msg
 = 
πnMsg
;

1339 
Àave
:

1340 
	`Log_¥öt2
(
Dügs_EXIT
, "<-- %s: %d", (
IArg
)
FXNN
, (IArg)
°©us
);

1341 (
°©us
);

1342 
	}
}

1343 #unde‡
FXNN


1349 
UI¡16
 
	$RcmClõ¡_gíMsgId_P
(
RcmClõ¡_Obje˘
 *
obj
)

1351 
G©eThªad_H™dÀ
 
g©eH
;

1352 
IArg
 
key
;

1353 
UI¡16
 
msgId
;

1356 
g©eH
 = 
	`G©eThªad_h™dÀ
(&
obj
->
g©e
);

1357 
key
 = 
	`G©eThªad_íãr
(
g©eH
);

1359 
msgId
 = (
obj
->msgId == 0xFFFF ? obj->msgId = 1 : ++(obj->msgId));

1361 
	`G©eThªad_Àave
(
g©eH
, 
key
);

1363 (
msgId
);

1364 
	}
}

1383 
	#FXNN
 "RcmClõ¡_gëRëu∫Msg_P"

	)

1384 
I¡
 
	$RcmClõ¡_gëRëu∫Msg_P
(
RcmClõ¡_Obje˘
 *
obj
, c⁄° 
UI¡16
 
msgId
,

1385 
RcmClõ¡_Mesßge
 **
ªtu∫Msg
)

1387 
Li°_EÀm
 *
ñem
;

1388 
Recùõ¡
 *
ªcùõ¡
;

1389 
RcmClõ¡_Packë
 *
∑ckë
;

1390 
Boﬁ
 
mesßgeDñivîed
;

1391 
MesßgeQ_Msg
 
msgqMsg
 = 
NULL
;

1392 
Boﬁ
 
mesßgeFound
 = 
FALSE
;

1393 
I¡
 
queueLockAcquúed
 = 0;

1394 
Eº‹_Block
 
eb
;

1395 
I¡
 
rvÆ
;

1396 
I¡
 
°©us
 = 
RcmClõ¡_S_SUCCESS
;

1399 
	`Log_¥öt3
(
Dügs_ENTRY
,

1400 "--> "
FXNN
": (obj=0x%x, msgId=%d,ÑeturnMsgPtr=0x%x",

1401 (
IArg
)
obj
, (IArg)
msgId
, (IArg)
ªtu∫Msg
);

1403 
	`Eº‹_öô
(&
eb
);

1404 *
ªtu∫Msg
 = 
NULL
;

1407 !
mesßgeFound
) {

1410 
	`Sem≠h‹e_≥nd
(
obj
->
mbxLock
, 
Sem≠h‹e_FOREVER
, &
eb
);

1411 i‡(
	`Eº‹_check
(&
eb
)) {

1413 
Àave
;

1417 
ñem
 = 
NULL
;

1418 (
ñem
 = 
	`Li°_√xt
(
obj
->
√wMaû
,ÉÀm)Ë!
NULL
) {

1419 
∑ckë
 = 
	`gëPackëAddrEÀm
(
ñem
);

1420 i‡(
msgId
 =
∑ckë
->msgId) {

1421 
	`Li°_ªmove
(
obj
->
√wMaû
, 
ñem
);

1422 *
ªtu∫Msg
 = &
∑ckë
->
mesßge
;

1423 
mesßgeFound
 = 
TRUE
;

1428 i‡(
mesßgeFound
) {

1430 
	`Sem≠h‹e_po°
(
obj
->
mbxLock
, &
eb
);

1431 i‡(
	`Eº‹_check
(&
eb
)) {

1437 
queueLockAcquúed
 = 
	`Sem≠h‹e_≥nd
(
obj
->
queueLock
, 0, &
eb
);

1438 i‡(
	`Eº‹_check
(&
eb
)) {

1440 
Àave
;

1443 i‡(1 =
queueLockAcquúed
) {

1449 !
mesßgeFound
) {

1452 i‡(
NULL
 =
msgqMsg
) {

1453 
rvÆ
 = 
	`MesßgeQ_gë
(
obj
->
msgQue
, &
msgqMsg
, 0);

1455 i‡((
MesßgeQ_E_TIMEOUT
 !
rvÆ
) && (rval < 0)) {

1456 
	`Log_îr‹0
(
FXNN
":ÜostÑeturn message");

1457 
°©us
 = 
RcmClõ¡_E_LOSTMSG
;

1458 
Àave
;

1460 
	`Log_¥öt0
(
Dügs_INFO
, 
FXNN
":Ñeturn messageÑeceived");

1463 
NULL
 !
msgqMsg
) {

1466 
∑ckë
 = 
	`gëPackëAddrMsgqMsg
(
msgqMsg
);

1467 
mesßgeFound
 = (
msgId
 =
∑ckë
->msgId);

1469 i‡(
mesßgeFound
) {

1470 *
ªtu∫Msg
 = &
∑ckë
->
mesßge
;

1473 
ñem
 = 
NULL
;

1474 (
ñem
 =

1475 
	`Li°_√xt
(
obj
->
ªcùõ¡s
, 
ñem
)Ë!
NULL
) {

1476 
ªcùõ¡
 = (
Recùõ¡
 *)
ñem
;

1477 i‡(
NULL
 =
ªcùõ¡
->
msg
) {

1479 
	`SemThªad_po°
(
	`SemThªad_h™dÀ
(

1480 &
ªcùõ¡
->
evít
), &
eb
);

1486 
	`Sem≠h‹e_po°
(
obj
->
queueLock
, &
eb
);

1487 i‡(
	`Eº‹_check
(&
eb
)) {

1492 
	`Sem≠h‹e_po°
(
obj
->
mbxLock
, &
eb
);

1493 i‡(
	`Eº‹_check
(&
eb
)) {

1505 
ñem
 = 
NULL
;

1506 
mesßgeDñivîed
 = 
FALSE
;

1507 (
ñem
 =

1508 
	`Li°_√xt
(
obj
->
ªcùõ¡s
, 
ñem
)Ë!
NULL
) {

1509 
ªcùõ¡
 = (
Recùõ¡
 *)
ñem
;

1510 i‡(
ªcùõ¡
->
msgId
 =
∑ckë
->msgId) {

1511 
ªcùõ¡
->
msg
 = &
∑ckë
->
mesßge
;

1513 
	`SemThªad_po°
(
	`SemThªad_h™dÀ
(

1514 &
ªcùõ¡
->
evít
), &
eb
);

1515 
mesßgeDñivîed
 = 
TRUE
;

1521 i‡(!
mesßgeDñivîed
) {

1523 
ñem
 = (
Li°_EÀm
 *)&
∑ckë
->
msgqHódî
;

1524 
	`Li°_put
(
obj
->
√wMaû
, 
ñem
);

1529 
rvÆ
 = 
	`MesßgeQ_gë
(
obj
->
msgQue
, &
msgqMsg
, 0);

1531 i‡((
MesßgeQ_E_TIMEOUT
 !
rvÆ
) && (rval < 0)) {

1532 
	`Log_îr‹0
(
FXNN
":ÜostÑeturn message");

1533 
°©us
 = 
RcmClõ¡_E_LOSTMSG
;

1534 
Àave
;

1536 
	`Log_¥öt0
(
Dügs_INFO
, 
FXNN
":Ñeturn messageÑeceived");

1539 i‡(!
mesßgeFound
) {

1545 
	`Sem≠h‹e_po°
(
obj
->
mbxLock
, &
eb
);

1546 i‡(
	`Eº‹_check
(&
eb
)) {

1551 
rvÆ
 = 
	`MesßgeQ_gë
(
obj
->
msgQue
, &
msgqMsg
,

1552 
MesßgeQ_FOREVER
);

1554 i‡(
rvÆ
 < 0) {

1555 
	`Log_îr‹0
(
FXNN
":ÜostÑeturn message");

1556 
°©us
 = 
RcmClõ¡_E_LOSTMSG
;

1557 
Àave
;

1559 
	`Log_¥öt0
(
Dügs_INFO
, 
FXNN
":Ñeturn messageÑeceived");

1561 i‡(
msgqMsg
 =
NULL
) {

1562 
	`Log_îr‹0
(
FXNN
":Ñeply message has beenÜost");

1563 
°©us
 = 
RcmClõ¡_E_LOSTMSG
;

1564 
Àave
;

1568 
	`Sem≠h‹e_≥nd
(
obj
->
mbxLock
, 
Sem≠h‹e_FOREVER
, &
eb
);

1569 i‡(
	`Eº‹_check
(&
eb
)) {

1570 
Àave
;

1577 
Recùõ¡
 
£lf
;

1578 
£lf
.
msgId
 = msgId;

1579 
£lf
.
msg
 = 
NULL
;

1580 
	`SemThªad_c⁄°ru˘
(&
£lf
.
evít
, 0, 
NULL
, &
eb
);

1581 i‡(
	`Eº‹_check
(&
eb
)) {

1586 
ñem
 = &
£lf
.elem;

1587 
	`Li°_put
(
obj
->
ªcùõ¡s
, 
ñem
);

1590 
	`Sem≠h‹e_po°
(
obj
->
mbxLock
, &
eb
);

1591 i‡(
	`Eº‹_check
(&
eb
)) {

1596 
	`SemThªad_≥nd
(
	`SemThªad_h™dÀ
(&
£lf
.
evít
),

1597 
Sem≠h‹e_FOREVER
, &
eb
);

1598 i‡(
	`Eº‹_check
(&
eb
)) {

1603 
	`Sem≠h‹e_≥nd
(
obj
->
mbxLock
, 
Sem≠h‹e_FOREVER
, &
eb
);

1604 i‡(
	`Eº‹_check
(&
eb
)) {

1605 
Àave
;

1608 i‡(
NULL
 !
£lf
.
msg
) {

1610 *
ªtu∫Msg
 = 
£lf
.
msg
;

1611 
mesßgeFound
 = 
TRUE
;

1615 
	`Li°_ªmove
(
obj
->
ªcùõ¡s
, 
ñem
);

1616 
	`SemThªad_de°ru˘
(&
£lf
.
evít
);

1619 
	`Sem≠h‹e_po°
(
obj
->
mbxLock
, &
eb
);

1620 i‡(
	`Eº‹_check
(&
eb
)) {

1627 
Àave
:

1628 
	`Log_¥öt2
(
Dügs_EXIT
, "<-- %s: %d", (
IArg
)
FXNN
, (IArg)
°©us
);

1629 (
°©us
);

1630 
	}
}

1631 #unde‡
FXNN


1637 
RcmClõ¡_Packë
 *
	$RcmClõ¡_gëPackëAddr_P
(
RcmClõ¡_Mesßge
 *
msg
)

1639 
I¡
 
off£t
 = (I¡)&(((
RcmClõ¡_Packë
 *)0)->
mesßge
);

1640  ((
RcmClõ¡_Packë
 *)((
Ch¨
 *)
msg
 - 
off£t
));

1641 
	}
}

1647 
ölöe


1648 
RcmClõ¡_Packë
 *
	$gëPackëAddrMsgqMsg
(
MesßgeQ_Msg
 
msg
)

1650 
I¡
 
off£t
 = (I¡)&(((
RcmClõ¡_Packë
 *)0)->
msgqHódî
);

1651  ((
RcmClõ¡_Packë
 *)((
Ch¨
 *)
msg
 - 
off£t
));

1652 
	}
}

1658 
ölöe


1659 
RcmClõ¡_Packë
 *
	$gëPackëAddrEÀm
(
Li°_EÀm
 *
ñem
)

1661 
I¡
 
off£t
 = (I¡)&(((
RcmClõ¡_Packë
 *)0)->
msgqHódî
);

1662  ((
RcmClõ¡_Packë
 *)((
Ch¨
 *)
ñem
 - 
off£t
));

1663 
	}
}

	@ti/grcm/RcmClient.h

237 #i‚de‡
ti_grcm_RcmClõ¡__ö˛ude


238 
	#ti_grcm_RcmClõ¡__ö˛ude


	)

240 
	~<xdc/ru¡ime/k∆/G©eThªad.h
>

246 #i‡
deföed
 (
__˝lu•lus
)

256 
	#RcmClõ¡_S_SUCCESS
 (0)

	)

261 
	#RcmClõ¡_E_FAIL
 (-1)

	)

270 
	#RcmClõ¡_E_EXECASYNCNOTENABLED
 (-2)

	)

277 
	#RcmClõ¡_E_EXECFAILED
 (-3)

	)

286 
	#RcmClõ¡_E_INVALIDHEAPID
 (-4)

	)

295 
	#RcmClõ¡_E_INVALIDFXNIDX
 (-5)

	)

304 
	#RcmClõ¡_E_MSGFXNERROR
 (-6)

	)

311 
	#RcmClõ¡_E_IPCERROR
 (-7)

	)

316 
	#RcmClõ¡_E_LISTCREATEFAILED
 (-8)

	)

324 
	#RcmClõ¡_E_LOSTMSG
 (-9)

	)

333 
	#RcmClõ¡_E_MSGALLOCFAILED
 (-10)

	)

343 
	#RcmClõ¡_E_MSGQCREATEFAILED
 (-11)

	)

352 
	#RcmClõ¡_E_MSGQOPENFAILED
 (-12)

	)

360 
	#RcmClõ¡_E_SERVERERROR
 (-13)

	)

371 
	#RcmClõ¡_E_SERVERNOTFOUND
 (-14)

	)

379 
	#RcmClõ¡_E_SYMBOLNOTFOUND
 (-15)

	)

384 
	#RcmClõ¡_E_NOMEMORY
 (-16)

	)

393 
	#RcmClõ¡_E_JOBIDNOTFOUND
 (-17)

	)

401 
	#RcmClõ¡_INVALIDFXNIDX
 ((
UI¡32
)(0xFFFFFFFF))

	)

406 
	#RcmClõ¡_INVALIDHEAPID
 ((
UI¡16
)(0xFFFF))

	)

411 
	#RcmClõ¡_INVALIDMSGID
 (0)

	)

420 
	#RcmClõ¡_DEFAULTPOOLID
 ((
UI¡16
)(0x8000))

	)

428 
	#RcmClõ¡_DISCRETEJOBID
 (0)

	)

433 
RcmClõ¡_Obje˘_èg
 *
	tRcmClõ¡_H™dÀ
;

449 
UI¡16
 
poﬁId
;

458 
UI¡16
 
jobId
;

463 
UI¡32
 
fxnIdx
;

468 
I¡32
 
ªsu…
;

476 
UI¡32
 
d©aSize
;

484 
UI¡32
 
d©a
[1];

486 } 
	tRcmClõ¡_Mesßge
;

496 
Void
 (*
	tRcmClõ¡_CÆlbackFxn
)(
	tRcmClõ¡_Mesßge
 *, 
	tPå
);

509 
UI¡16
 
hópId
;

524 
Boﬁ
 
ˇŒbackNŸifiˇti⁄
;

526 } 
	tRcmClõ¡_P¨ams
;

536 
xdc_ru¡ime_k∆_G©eThªad_Såu˘
 
_f1
;

537 
På
 
_f2
;

538 
På
 
_f3
;

539 
UI¡16
 
_f4
;

540 
På
 
_f5
;

541 
UI¡32
 
_f6
;

542 
Boﬁ
 
_f7
;

543 
UI¡16
 
_f8
;

544 
På
 
_f9
;

545 
På
 
_f10
;

546 
På
 
_f11
;

547 
På
 
_f12
;

548 } 
	tRcmClõ¡_Såu˘
;

563 
I¡
 
RcmClõ¡_acquúeJobId
(

564 
RcmClõ¡_H™dÀ
 
h™dÀ
,

565 
UI¡16
 * 
jobId


595 
I¡
 
RcmClõ¡_addSymbﬁ
(

596 
RcmClõ¡_H™dÀ
 
h™dÀ
,

597 
Såög
 
«me
,

598 
Fxn
 
addr
,

599 
UI¡32
 * 
ödex


632 
I¡
 
RcmClõ¡_Æloc
(

633 
RcmClõ¡_H™dÀ
 
h™dÀ
,

634 
UI¡32
 
d©aSize
,

635 
RcmClõ¡_Mesßge
 ** 
mesßge


694 
I¡
 
RcmClõ¡_checkF‹Eº‹
(

695 
RcmClõ¡_H™dÀ
 
h™dÀ
,

696 
RcmClõ¡_Mesßge
 ** 
ªtu∫Msg


719 
I¡
 
RcmClõ¡_c⁄°ru˘
(

720 
RcmClõ¡_Såu˘
 * 
°ru˘På
,

721 
Såög
 
£rvî
,

722 c⁄° 
RcmClõ¡_P¨ams
 *
∑øms


747 
I¡
 
RcmClõ¡_¸óã
(

748 
Såög
 
£rvî
,

749 c⁄° 
RcmClõ¡_P¨ams
 *
∑øms
,

750 
RcmClõ¡_H™dÀ
 * 
h™dÀ


761 
I¡
 
RcmClõ¡_dñëe
(

762 
RcmClõ¡_H™dÀ
 * 
h™dÀPå


774 
I¡
 
RcmClõ¡_de°ru˘
(

775 
RcmClõ¡_Såu˘
 * 
°ru˘På


808 
I¡
 
RcmClõ¡_exec
(

809 
RcmClõ¡_H™dÀ
 
h™dÀ
,

810 
RcmClõ¡_Mesßge
 * 
cmdMsg
,

811 
RcmClõ¡_Mesßge
 ** 
ªtu∫Msg


846 
I¡
 
RcmClõ¡_execAsync
(

847 
RcmClõ¡_H™dÀ
 
h™dÀ
,

848 
RcmClõ¡_Mesßge
 * 
cmdMsg
,

849 
RcmClõ¡_CÆlbackFxn
 
ˇŒback
,

850 
På
 
≠pD©a


879 
I¡
 
RcmClõ¡_execCmd
(

880 
RcmClõ¡_H™dÀ
 
h™dÀ
,

881 
RcmClõ¡_Mesßge
 * 
cmdMsg


899 
I¡
 
RcmClõ¡_execDpc
(

900 
RcmClõ¡_H™dÀ
 
h™dÀ
,

901 
RcmClõ¡_Mesßge
 * 
cmdMsg
,

902 
RcmClõ¡_Mesßge
 ** 
ªtu∫Msg


930 
I¡
 
RcmClõ¡_execNoWaô
(

931 
RcmClõ¡_H™dÀ
 
h™dÀ
,

932 
RcmClõ¡_Mesßge
 * 
cmdMsg
,

933 
UI¡16
 * 
msgId


948 
Void
 
RcmClõ¡_exô
(Void);

960 
I¡
 
RcmClõ¡_‰ì
(

961 
RcmClõ¡_H™dÀ
 
h™dÀ
,

962 
RcmClõ¡_Mesßge
 * 
msg


980 
I¡
 
RcmClõ¡_gëSymbﬁIndex
(

981 
RcmClõ¡_H™dÀ
 
h™dÀ
,

982 
Såög
 
«me
,

983 
UI¡32
 * 
ödex


997 
Void
 
RcmClõ¡_öô
(Void);

1005 
Void
 
RcmClõ¡_P¨ams_öô
(

1006 
RcmClõ¡_P¨ams
 * 
∑øms


1019 
I¡
 
RcmClõ¡_ªÀa£JobId
(

1020 
RcmClõ¡_H™dÀ
 
h™dÀ
,

1021 
UI¡16
 
jobId


1036 
I¡
 
RcmClõ¡_ªmoveSymbﬁ
(

1037 
RcmClõ¡_H™dÀ
 
h™dÀ
,

1038 
Såög
 
«me


1059 
I¡
 
RcmClõ¡_waôU¡ûD⁄e
(

1060 
RcmClõ¡_H™dÀ
 
h™dÀ
,

1061 
UI¡16
 
msgId
,

1062 
RcmClõ¡_Mesßge
 ** 
ªtu∫Msg


1066 #i‡
deföed
 (
__˝lu•lus
)

	@ti/grcm/RcmServer.c

39 
	#Regi°ry_CURDESC
 
ti_grcm_RcmSîvî__Desc


	)

40 
	#MODULE_NAME
 "ti.grcm.RcmSîvî"

	)

42 
	#xdc_ru¡ime_Mem‹y__nﬁoˇ ames


	)

45 
	~<xdc/°d.h
>

46 
	~<xdc/ru¡ime/As£π.h
>

47 
	~<xdc/ru¡ime/Dügs.h
>

48 
	~<xdc/ru¡ime/Eº‹.h
>

49 
	~<xdc/ru¡ime/IHóp.h
>

50 
	~<xdc/ru¡ime/Log.h
>

51 
	~<xdc/ru¡ime/Mem‹y.h
>

52 
	~<xdc/ru¡ime/Regi°ry.h
>

53 
	~<xdc/ru¡ime/Sèπup.h
>

54 
	~<xdc/ru¡ime/k∆/G©eThªad.h
>

55 
	~<xdc/ru¡ime/k∆/ISem≠h‹e.h
>

56 
	~<xdc/ru¡ime/k∆/Sem≠h‹e.h
>

57 
	~<xdc/ru¡ime/k∆/SemThªad.h
>

58 
	~<xdc/ru¡ime/k∆/Thªad.h
>

59 
	~<xdc/ru¡ime/Sy°em.h
>

61 
	#MSGBUFFERSIZE
 512

62 

	)

63 #i‡
deföed
(
RCM_ti_ùc
)

64 
	~<ti/sdo/utûs/Li°.h
>

65 
	~<ti/ùc/Mu…iProc.h
>

67 #ñi‡
deföed
(
RCM_ti_sy¶ök
)

68 
	~<ti/sy¶ök/utûs/Li°.h
>

69 
	#Li°_Såu˘
 
Li°_Obje˘


	)

70 
	#Li°_h™dÀ
(
exp
Ë”xp)

	)

77 
	~"RcmClõ¡.h
"

78 
	~"RcmTy≥s.h
"

79 
	~"RcmSîvî.h
"

81 #i‡
USE_MESSAGEQCOPY


82 
	~<ti/§vmgr/Ωmsg_omx.h
>

85 
	#_RCM_KeyRe£tVÆue
 0x07FF

86 
	#_RCM_KeyMask
 0x7FF00000

87 
	#_RCM_KeyShi·
 20

88 

	)

89 
	#RcmSîvî_MAX_TABLES
 9

90 
	#RcmSîvî_POOL_MAP_LEN
 4

91 

	)

92 
	#RcmSîvî_E_InvÆidFxnIdx
 (-101)

	)

93 
	#RcmSîvî_E_JobIdNŸFound
 (-102)

	)

94 
	#RcmSîvî_E_PoﬁIdNŸFound
 (-103)

	)

97 
Såög
 
	m«me
;

98 #i‡
USE_MESSAGEQCOPY


100 
RcmSîvî_MsgFxn
 
	mfxn
;

101 
RcmSîvî_MsgCª©eFxn
 
	m¸óãFxn
;

102 }
	maddr
;

104 
RcmSîvî_MsgFxn
 
	maddr
;

106 
UI¡16
 
	mkey
;

107 } 
	tRcmSîvî_FxnTabEÀm
;

110 
I¡
 
	mÀngth
;

111 
RcmSîvî_FxnTabEÀm
 * 
	mñem
;

112 } 
	tRcmSîvî_FxnTabEÀmAry
;

115 
Såög
 
	m«me
;

116 
I¡
 
	mcou¡
;

117 
Thªad_Pri‹ôy
 
	m¥i‹ôy
;

118 
I¡
 
	mosPri‹ôy
;

119 
SizeT
 
	m°ackSize
;

120 
Såög
 
	m°ackSeg
;

121 
ISem≠h‹e_H™dÀ
 
	m£m
;

122 
Li°_Såu˘
 
	mthªadLi°
;

123 
Li°_Såu˘
 
	mªadyQueue
;

124 } 
	tRcmSîvî_ThªadPoﬁ
;

126 
	sRcmSîvî_Obje˘_èg
 {

127 
G©eThªad_Såu˘
 
	mg©e
;

128 
På
 
	mrun
;

129 #i‡
USE_MESSAGEQCOPY


130 
MesßgeQC›y_H™dÀ
 
	m£rvîQue
;

131 
UI¡32
 
	mloˇlAddr
;

132 
UI¡32
 
	mª∂yAddr
;

133 
UI¡32
 
	md°Proc
;

135 
MesßgeQ_H™dÀ
 
	m£rvîQue
;

137 
Thªad_H™dÀ
 
	m£rvîThªad
;

138 
RcmSîvî_FxnTabEÀmAry
 
	mfxnTabSètic
;

139 
RcmSîvî_FxnTabEÀm
 * 
	mfxnTab
[
RcmSîvî_MAX_TABLES
];

140 
UI¡16
 
	mkey
;

141 
UI¡16
 
	mjobId
;

142 
Boﬁ
 
	mshutdown
;

143 
I¡
 
	mpoﬁM≠0Lí
;

144 
RcmSîvî_ThªadPoﬁ
 * 
	mpoﬁM≠
[
RcmSîvî_POOL_MAP_LEN
];

145 
Li°_H™dÀ
 
	mjobLi°
;

146 } 
	tRcmSîvî_Obje˘
;

149 
Li°_EÀm
 
	mñem
;

150 
UI¡16
 
	mjobId
;

151 
Thªad_H™dÀ
 
	mthªad
;

152 
Boﬁ
 
	mãrmö©e
;

153 
RcmSîvî_ThªadPoﬁ
* 
	mpoﬁ
;

154 
RcmSîvî_Obje˘
 * 
	m£rvî
;

155 } 
	tRcmSîvî_W‹kîThªad
;

158 
Li°_EÀm
 
	mñem
;

159 
UI¡16
 
	mjobId
;

160 
Boﬁ
 
	mem±y
;

161 
Li°_Såu˘
 
	mmsgQue
;

162 } 
	tRcmSîvî_JobSåóm
;

164 
	sRcmSîvî_ModuÀ_èg
 {

165 
Såög
 
	m«me
;

166 
IHóp_H™dÀ
 
	mhóp
;

167 } 
	tRcmSîvî_ModuÀ
;

172 
I¡
 
RcmSîvî_In°™˚_öô_P
(

173 
RcmSîvî_Obje˘
 * 
obj
,

174 
Såög
 
«me
,

175 c⁄° 
RcmSîvî_P¨ams
 * 
∑øms


179 
I¡
 
RcmSîvî_In°™˚_föÆize_P
(

180 
RcmSîvî_Obje˘
 * 
obj


184 
I¡
 
RcmSîvî_acqJobId_P
(

185 
RcmSîvî_Obje˘
 * 
obj
,

186 
UI¡16
 * 
jobIdPå


190 
I¡
 
RcmSîvî_di•©ch_P
(

191 
RcmSîvî_Obje˘
 * 
obj
,

192 
RcmClõ¡_Packë
 * 
∑ckë


196 
I¡
 
RcmSîvî_execMsg_I
(

197 
RcmSîvî_Obje˘
 * 
obj
,

198 
RcmClõ¡_Mesßge
 * 
msg


202 
I¡
 
RcmSîvî_gëFxnAddr_P
(

203 
RcmSîvî_Obje˘
 * 
obj
,

204 
UI¡32
 
fxnIdx
,

205 
RcmSîvî_MsgFxn
 * 
addrPå
,

206 
RcmSîvî_MsgCª©eFxn
 * 
¸óãPå


210 
UI¡16
 
RcmSîvî_gëNextKey_P
(

211 
RcmSîvî_Obje˘
 * 
obj


215 
I¡
 
RcmSîvî_gëSymIdx_P
(

216 
RcmSîvî_Obje˘
 * 
obj
,

217 
Såög
 
«me
,

218 
UI¡32
 * 
ödex


222 
I¡
 
RcmSîvî_gëPoﬁ_P
(

223 
RcmSîvî_Obje˘
 * 
obj
,

224 
RcmClõ¡_Packë
 * 
∑ckë
,

225 
RcmSîvî_ThªadPoﬁ
 ** 
poﬁP


229 
Void
 
RcmSîvî_¥o˚ss_P
(

230 
RcmSîvî_Obje˘
 * 
obj
,

231 
RcmClõ¡_Packë
 * 
∑ckë


235 
I¡
 
RcmSîvî_ªlJobId_P
(

236 
RcmSîvî_Obje˘
 * 
obj
,

237 
UI¡16
 
jobId


241 
Void
 
RcmSîvî_£rvîThrFxn_P
(

242 
IArg
 
¨g


245 
ölöe


246 
Void
 
RcmSîvî_£tSètusCode_I
(

247 
RcmClõ¡_Packë
 * 
∑ckë
,

248 
UI¡16
 
code


252 
Void
 
RcmSîvî_w‹kîThrFxn_P
(

253 
IArg
 
¨g


257 
	#RcmSîvî_ModuÀ_hóp
(Ë(
RcmSîvî_Mod
.
hóp
)

	)

261 
I¡
 
	gcurInô
 = 0;

262 
Ch¨
 
	gti_grcm_RcmSîvî_Name
[] = {

267 
RcmSîvî_ModuÀ
 
	gRcmSîvî_Mod
 = {

268 
MODULE_NAME
,

269 (
IHóp_H™dÀ
)
NULL


273 
Regi°ry_Desc
 
	gRegi°ry_CURDESC
;

281 
Void
 
	$RcmSîvî_öô
(
Void
)

283 
Regi°ry_Resu…
 
ªsu…
;

286 i‡(
curInô
++ != 0) {

292 
ªsu…
 = 
	`Regi°ry_addModuÀ
(&
Regi°ry_CURDESC
, 
ti_grcm_RcmSîvî_Name
);

293 
	`As£π_isTrue
(
ªsu…
 =
Regi°ry_SUCCESS
, (
As£π_Id
)
NULL
);

296 
	`As£π_isTrue
((
RcmSîvî_Obje˘
Ë=(
RcmSîvî_Såu˘
), 
NULL
);

297 
	}
}

305 
Void
 
	$RcmSîvî_exô
(
Void
)

310 i‡(--
curInô
 != 0) {

317 
	}
}

323 
Void
 
	$RcmSîvî_P¨ams_öô
(
RcmSîvî_P¨ams
 *
∑øms
)

326 
∑øms
->
¥i‹ôy
 = 
Thªad_Pri‹ôy_HIGHEST
;

327 
∑øms
->
osPri‹ôy
 = 
Thªad_INVALID_OS_PRIORITY
;

328 
∑øms
->
°ackSize
 = 0;

329 
∑øms
->
°ackSeg
 = "";

332 
∑øms
->
deÁu…Poﬁ
.
«me
 = 
NULL
;

333 
∑øms
->
deÁu…Poﬁ
.
cou¡
 = 0;

334 
∑øms
->
deÁu…Poﬁ
.
¥i‹ôy
 = 
Thªad_Pri‹ôy_NORMAL
;

335 
∑øms
->
deÁu…Poﬁ
.
osPri‹ôy
 = 
Thªad_INVALID_OS_PRIORITY
;

336 
∑øms
->
deÁu…Poﬁ
.
°ackSize
 = 0;

337 
∑øms
->
deÁu…Poﬁ
.
°ackSeg
 = "";

340 
∑øms
->
w‹kîPoﬁs
.
Àngth
 = 0;

341 
∑øms
->
w‹kîPoﬁs
.
ñem
 = 
NULL
;

344 
∑øms
->
fxns
.
Àngth
 = 0;

345 
∑øms
->
fxns
.
ñem
 = 
NULL
;

346 
	}
}

352 
	#FXNN
 "RcmSîvî_¸óã"

	)

353 
I¡
 
	$RcmSîvî_¸óã
(
Såög
 
«me
, 
RcmSîvî_P¨ams
 *
∑øms
,

354 
RcmSîvî_H™dÀ
 *
h™dÀ
)

356 
RcmSîvî_Obje˘
 *
obj
;

357 
Eº‹_Block
 
eb
;

358 
I¡
 
°©us
 = 
RcmSîvî_S_SUCCESS
;

361 
	`Log_¥öt3
(
Dügs_ENTRY
, "--> "
FXNN
": (name=0x%x,Öarams=0x%x, hP=0x%x)",

362 (
IArg
)
«me
, (IArg)
∑øms
, (IArg)
h™dÀ
);

365 
	`Eº‹_öô
(&
eb
);

366 *
h™dÀ
 = (
RcmSîvî_H™dÀ
)
NULL
;

369 i‡(
NULL
 =
∑øms
) {

370 
	`Log_îr‹0
(
FXNN
":ÖaramsÖtr mustÇot be NULL");

371 
°©us
 = 
RcmSîvî_E_FAIL
;

372 
Àave
;

374 i‡(
NULL
 =
h™dÀ
) {

375 
	`Log_îr‹0
(
FXNN
": InvalidÖointer");

376 
°©us
 = 
RcmSîvî_E_FAIL
;

377 
Àave
;

379 i‡(
NULL
 =
«me
) {

380 
	`Log_îr‹0
(
FXNN
":ÇameÖassed is NULL!");

381 
°©us
 = 
RcmSîvî_E_FAIL
;

382 
Àave
;

386 
obj
 = (
RcmSîvî_H™dÀ
)
	`xdc_ru¡ime_Mem‹y_ˇŒoc
(
	`RcmSîvî_ModuÀ_hóp
(),

387 (
RcmSîvî_Obje˘
), (
I¡
), &
eb
);

389 i‡(
NULL
 =
obj
) {

390 
	`Log_îr‹2
(
FXNN
": out of memory: heap=0x%x, size=%u",

391 (
IArg
)
	`RcmSîvî_ModuÀ_hóp
(), (
RcmSîvî_Obje˘
));

392 
°©us
 = 
RcmSîvî_E_NOMEMORY
;

393 
Àave
;

396 
	`Log_¥öt1
(
Dügs_LIFECYCLE
, 
FXNN
": in°™˚ cª©e: 0x%x", (
IArg
)
obj
);

399 
°©us
 = 
	`RcmSîvî_In°™˚_öô_P
(
obj
, 
«me
, 
∑øms
);

401 i‡(
°©us
 < 0) {

402 
	`RcmSîvî_In°™˚_föÆize_P
(
obj
);

403 
	`xdc_ru¡ime_Mem‹y_‰ì
(
	`RcmSîvî_ModuÀ_hóp
(),

404 (
På
)
obj
, (
RcmSîvî_Obje˘
));

405 
Àave
;

409 *
h™dÀ
 = (
RcmSîvî_H™dÀ
)
obj
;

412 
Àave
:

413 
	`Log_¥öt1
(
Dügs_EXIT
, "<-- "
FXNN
": %d", (
IArg
)
°©us
);

414 (
°©us
);

415 
	}
}

416 #unde‡
FXNN


422 
	#FXNN
 "RcmSîvî_c⁄°ru˘"

	)

423 
I¡
 
	$RcmSîvî_c⁄°ru˘
(
RcmSîvî_Såu˘
 *
°ru˘På
, 
Såög
 
«me
,

424 c⁄° 
RcmSîvî_P¨ams
 *
∑øms
)

426 
RcmSîvî_Obje˘
 *
obj
 = (RcmSîvî_Obje˘*)
°ru˘På
;

427 
I¡
 
°©us
 = 
RcmSîvî_S_SUCCESS
;

430 
	`Log_¥öt1
(
Dügs_ENTRY
, "--> "
FXNN
": (°ru˘På=0x%x)", (
IArg
)
°ru˘På
);

431 
	`Log_¥öt1
(
Dügs_LIFECYCLE
, 
FXNN
": in°™˚ c⁄°ru˘: 0x%x", (
IArg
)
obj
);

434 
	`_mem£t
((
Void
 *)
obj
, 0, (
RcmSîvî_Obje˘
));

437 
°©us
 = 
	`RcmSîvî_In°™˚_öô_P
(
obj
, 
«me
, 
∑øms
);

439 i‡(
°©us
 < 0) {

440 
	`RcmSîvî_In°™˚_föÆize_P
(
obj
);

441 
Àave
;

445 
Àave
:

446 
	`Log_¥öt1
(
Dügs_EXIT
, "<-- "
FXNN
": %d", (
IArg
)
°©us
);

447 (
°©us
);

448 
	}
}

449 #unde‡
FXNN


455 
	#FXNN
 "RcmSîvî_In°™˚_öô_P"

	)

456 
I¡
 
	$RcmSîvî_In°™˚_öô_P
(
RcmSîvî_Obje˘
 *
obj
, 
Såög
 
«me
,

457 c⁄° 
RcmSîvî_P¨ams
 *
∑øms
)

459 
Eº‹_Block
 
eb
;

460 
Li°_P¨ams
 
li°P
;

461 #i‡
USE_MESSAGEQCOPY
 == 0

462 
MesßgeQ_P¨ams
 
mqP¨ams
;

464 
Thªad_P¨ams
 
thªadP
;

465 
SemThªad_P¨ams
 
£mThªadP
;

466 
SemThªad_H™dÀ
 
£mThªadH
;

467 
I¡
 
i
, 
j
;

468 
SizeT
 
size
;

469 
Ch¨
 *
˝
;

470 
RcmSîvî_ThªadPoﬁ
 *
poﬁAry
;

471 
RcmSîvî_W‹kîThªad
 *
w‹kî
;

472 
Li°_H™dÀ
 
li°H
;

473 
I¡
 
°©us
 = 
RcmSîvî_S_SUCCESS
;

476 
	`Log_¥öt1
(
Dügs_ENTRY
, "--> "
FXNN
": (obj=0x%x)", (
IArg
)
obj
);

478 
	`Eº‹_öô
(&
eb
);

481 
obj
->
shutdown
 = 
FALSE
;

482 
obj
->
key
 = 0;

483 
obj
->
jobId
 = 0xFFFF;

484 
obj
->
run
 = 
NULL
;

485 
obj
->
£rvîQue
 = 
NULL
;

486 
obj
->
£rvîThªad
 = 
NULL
;

487 
obj
->
fxnTabSètic
.
Àngth
 = 0;

488 
obj
->
fxnTabSètic
.
ñem
 = 
NULL
;

489 
obj
->
poﬁM≠0Lí
 = 0;

490 
obj
->
jobLi°
 = 
NULL
;

494 
i
 = 0; i < 
RcmSîvî_MAX_TABLES
; i++) {

495 
obj
->
fxnTab
[
i
] = 
NULL
;

499 
i
 = 0; i < 
RcmSîvî_POOL_MAP_LEN
; i++) {

500 
obj
->
poﬁM≠
[
i
] = 
NULL
;

504 
	`G©eThªad_c⁄°ru˘
(&
obj
->
g©e
, 
NULL
, &
eb
);

506 i‡(
	`Eº‹_check
(&
eb
)) {

507 
	`Log_îr‹0
(
FXNN
": couldÇot create gate object");

508 
°©us
 = 
RcmSîvî_E_FAIL
;

509 
Àave
;

513 #i‡
	`deföed
(
RCM_ti_ùc
)

514 
	`Li°_P¨ams_öô
(&
li°P
);

515 
obj
->
jobLi°
 = 
	`Li°_¸óã
(&
li°P
, &
eb
);

517 i‡(
	`Eº‹_check
(&
eb
)) {

518 
	`Log_îr‹0
(
FXNN
": couldÇot createÜist object");

519 
°©us
 = 
RcmSîvî_E_FAIL
;

520 
Àave
;

522 #ñi‡
	`deföed
(
RCM_ti_sy¶ök
)

523 
	`Li°_P¨ams_öô
(&
li°P
);

524 
obj
->
jobLi°
 = 
	`Li°_¸óã
(&
li°P
, 
NULL
);

526 i‡(
obj
->
jobLi°
 =
NULL
) {

527 
	`Log_îr‹0
(
FXNN
": couldÇot createÜist object");

528 
°©us
 = 
RcmSîvî_E_FAIL
;

529 
Àave
;

534 i‡(
∑øms
->
fxns
.
Àngth
 > 0) {

535 
obj
->
fxnTabSètic
.
Àngth
 = 
∑øms
->
fxns
.length;

538 
size
 = 
∑øms
->
fxns
.
Àngth
 * (
RcmSîvî_FxnTabEÀm
);

539 
obj
->
fxnTabSètic
.
ñem
 = 
	`xdc_ru¡ime_Mem‹y_Æloc
(

540 
	`RcmSîvî_ModuÀ_hóp
(), 
size
, (
På
), &
eb
);

542 i‡(
	`Eº‹_check
(&
eb
)) {

543 
	`Log_îr‹2
(
FXNN
": out of memory: heap=0x%x, size=%u",

544 (
IArg
)
	`RcmSîvî_ModuÀ_hóp
(), 
size
);

545 
°©us
 = 
RcmSîvî_E_NOMEMORY
;

546 
Àave
;

548 
obj
->
fxnTabSètic
.
ñem
[0].
«me
 = 
NULL
;

551 
size
 = 0, 
i
 = 0; i < 
∑øms
->
fxns
.
Àngth
; i++) {

552 
size
 +
	`_°æí
(
∑øms
->
fxns
.
ñem
[
i
].
«me
) + 1;

554 
˝
 = 
	`xdc_ru¡ime_Mem‹y_Æloc
(

555 
	`RcmSîvî_ModuÀ_hóp
(), 
size
, (
På
), &
eb
);

557 i‡(
	`Eº‹_check
(&
eb
)) {

558 
	`Log_îr‹2
(
FXNN
": out of memory: heap=0x%x, size=%u",

559 (
IArg
)
	`RcmSîvî_ModuÀ_hóp
(), 
size
);

560 
°©us
 = 
RcmSîvî_E_NOMEMORY
;

561 
Àave
;

565 
i
 = 0; i < 
∑øms
->
fxns
.
Àngth
; i++) {

566 
	`_°r˝y
(
˝
, 
∑øms
->
fxns
.
ñem
[
i
].
«me
);

567 
obj
->
fxnTabSètic
.
ñem
[
i
].
«me
 = 
˝
;

568 
˝
 +(
	`_°æí
(
∑øms
->
fxns
.
ñem
[
i
].
«me
) + 1);

569 
obj
->
fxnTabSètic
.
ñem
[
i
].
addr
.
fxn
 = 
∑øms
->
fxns
.elem[i].addr.fxn;

570 
obj
->
fxnTabSètic
.
ñem
[
i
].
key
 = 0;

574 
obj
->
fxnTab
[0] = obj->
fxnTabSètic
.
ñem
;

578 i‡((
∑øms
->
w‹kîPoﬁs
.
Àngth
 + 1Ë> 
RcmSîvî_POOL_MAP_LEN
) {

579 
	`Log_îr‹1
(
FXNN
": Exceeded maximumÇumber of workerÖools =%d",

580 (
IArg
Ë(
∑øms
->
w‹kîPoﬁs
.
Àngth
) );

581 
°©us
 = 
RcmSîvî_E_NOMEMORY
;

582 
Àave
;

584 
obj
->
poﬁM≠0Lí
 = 
∑øms
->
w‹kîPoﬁs
.
Àngth
 + 1;

587 
size
 = 
obj
->
poﬁM≠0Lí
 * (
RcmSîvî_ThªadPoﬁ
);

588 
obj
->
poﬁM≠
[0] = (
RcmSîvî_ThªadPoﬁ
 *)
	`xdc_ru¡ime_Mem‹y_Æloc
(

589 
	`RcmSîvî_ModuÀ_hóp
(), 
size
, (
På
), &
eb
);

591 i‡(
	`Eº‹_check
(&
eb
)) {

592 
	`Log_îr‹2
(
FXNN
": out of memory: heap=0x%x, size=%u",

593 (
IArg
)
	`RcmSîvî_ModuÀ_hóp
(), 
size
);

594 
°©us
 = 
RcmSîvî_E_NOMEMORY
;

595 
Àave
;

599 
poﬁAry
 = 
obj
->
poﬁM≠
[0];

606 
size
 = (
SizeT
)

607 + (
∑øms
->
deÁu…Poﬁ
.
«me
 =
NULL
 ? 1 :

608 
	`_°æí
(
∑øms
->
deÁu…Poﬁ
.
«me
) + 1);

610 
i
 = 0; i < 
∑øms
->
w‹kîPoﬁs
.
Àngth
; i++) {

611 
size
 +(
∑øms
->
w‹kîPoﬁs
.
ñem
[
i
].
«me
 =
NULL
 ? 0 :

612 
	`_°æí
(
∑øms
->
w‹kîPoﬁs
.
ñem
[
i
].
«me
) + 1);

614 
˝
 = 
	`xdc_ru¡ime_Mem‹y_Æloc
(

615 
	`RcmSîvî_ModuÀ_hóp
(), 
size
, (
På
), &
eb
);

617 i‡(
	`Eº‹_check
(&
eb
)) {

618 
	`Log_îr‹2
(
FXNN
": out of memory: heap=0x%x, size=%u",

619 (
IArg
)
	`RcmSîvî_ModuÀ_hóp
(), 
size
);

620 
°©us
 = 
RcmSîvî_E_NOMEMORY
;

621 
Àave
;

624 *(
SizeT
 *)
˝
 = 
size
;

625 
˝
 +(
SizeT
);

628 i‡(
∑øms
->
deÁu…Poﬁ
.
«me
 !
NULL
) {

629 
	`_°r˝y
(
˝
, 
∑øms
->
deÁu…Poﬁ
.
«me
);

630 
poﬁAry
[0].
«me
 = 
˝
;

631 
˝
 +(
	`_°æí
(
∑øms
->
deÁu…Poﬁ
.
«me
) + 1);

634 
poﬁAry
[0].
«me
 = 
˝
;

635 *
˝
++ = '\0';

638 
poﬁAry
[0].
cou¡
 = 
∑øms
->
deÁu…Poﬁ
.count;

639 
poﬁAry
[0].
¥i‹ôy
 = 
∑øms
->
deÁu…Poﬁ
.priority;

640 
poﬁAry
[0].
osPri‹ôy
 = 
∑øms
->
deÁu…Poﬁ
.osPriority;

641 
poﬁAry
[0].
°ackSize
 = 
∑øms
->
deÁu…Poﬁ
.stackSize;

642 
poﬁAry
[0].
°ackSeg
 = 
NULL
;

643 
poﬁAry
[0].
£m
 = 
NULL
;

645 
	`Li°_c⁄°ru˘
(&(
poﬁAry
[0].
thªadLi°
), 
NULL
);

646 
	`Li°_c⁄°ru˘
(&(
poﬁAry
[0].
ªadyQueue
), 
NULL
);

648 
	`SemThªad_P¨ams_öô
(&
£mThªadP
);

649 
£mThªadP
.
mode
 = 
SemThªad_Mode_COUNTING
;

651 
£mThªadH
 = 
	`SemThªad_¸óã
(0, &
£mThªadP
, &
eb
);

653 i‡(
	`Eº‹_check
(&
eb
)) {

654 
	`Log_îr‹0
(
FXNN
": couldÇot create semaphore");

655 
°©us
 = 
RcmSîvî_E_FAIL
;

656 
Àave
;

659 
poﬁAry
[0].
£m
 = 
	`SemThªad_H™dÀ_upCa°
(
£mThªadH
);

662 
i
 = 0; i < 
∑øms
->
w‹kîPoﬁs
.
Àngth
; i++) {

663 i‡(
∑øms
->
w‹kîPoﬁs
.
ñem
[
i
].
«me
 !
NULL
) {

664 
	`_°r˝y
(
˝
, 
∑øms
->
w‹kîPoﬁs
.
ñem
[
i
].
«me
);

665 
poﬁAry
[
i
+1].
«me
 = 
˝
;

666 
˝
 +(
	`_°æí
(
∑øms
->
w‹kîPoﬁs
.
ñem
[
i
].
«me
) + 1);

669 
poﬁAry
[
i
+1].
«me
 = 
NULL
;

672 
poﬁAry
[
i
+1].
cou¡
 = 
∑øms
->
w‹kîPoﬁs
.
ñem
[i].count;

673 
poﬁAry
[
i
+1].
¥i‹ôy
 = 
∑øms
->
w‹kîPoﬁs
.
ñem
[i].priority;

674 
poﬁAry
[
i
+1].
osPri‹ôy
 =
∑øms
->
w‹kîPoﬁs
.
ñem
[i].osPriority;

675 
poﬁAry
[
i
+1].
°ackSize
 = 
∑øms
->
w‹kîPoﬁs
.
ñem
[i].stackSize;

676 
poﬁAry
[
i
+1].
°ackSeg
 = 
NULL
;

678 
	`Li°_c⁄°ru˘
(&(
poﬁAry
[
i
+1].
thªadLi°
), 
NULL
);

679 
	`Li°_c⁄°ru˘
(&(
poﬁAry
[
i
+1].
ªadyQueue
), 
NULL
);

681 
	`SemThªad_P¨ams_öô
(&
£mThªadP
);

682 
£mThªadP
.
mode
 = 
SemThªad_Mode_COUNTING
;

684 
£mThªadH
 = 
	`SemThªad_¸óã
(0, &
£mThªadP
, &
eb
);

686 i‡(
	`Eº‹_check
(&
eb
)) {

687 
	`Log_îr‹0
(
FXNN
": couldÇot create semaphore");

688 
°©us
 = 
RcmSîvî_E_FAIL
;

689 
Àave
;

692 
poﬁAry
[
i
+1].
£m
 = 
	`SemThªad_H™dÀ_upCa°
(
£mThªadH
);

696 
i
 = 0; i < 
obj
->
poﬁM≠0Lí
; i++) {

697 
j
 = 0; j < 
poﬁAry
[
i
].
cou¡
; j++) {

700 
size
 = (
RcmSîvî_W‹kîThªad
);

701 
w‹kî
 = (
RcmSîvî_W‹kîThªad
 *)
	`xdc_ru¡ime_Mem‹y_Æloc
(

702 
	`RcmSîvî_ModuÀ_hóp
(), 
size
, (
På
), &
eb
);

704 i‡(
	`Eº‹_check
(&
eb
)) {

705 
	`Log_îr‹2
(
FXNN
": out of memory: heap=0x%x, size=%u",

706 (
IArg
)
	`RcmSîvî_ModuÀ_hóp
(), 
size
);

707 
°©us
 = 
RcmSîvî_E_NOMEMORY
;

708 
Àave
;

712 
w‹kî
->
jobId
 = 
RcmClõ¡_DISCRETEJOBID
;

713 
w‹kî
->
thªad
 = 
NULL
;

714 
w‹kî
->
ãrmö©e
 = 
FALSE
;

715 
w‹kî
->
poﬁ
 = &(
poﬁAry
[
i
]);

716 
w‹kî
->
£rvî
 = 
obj
;

719 
li°H
 = 
	`Li°_h™dÀ
(&(
poﬁAry
[
i
].
thªadLi°
));

720 
	`Li°_putHód
(
li°H
, &(
w‹kî
->
ñem
));

723 
	`Thªad_P¨ams_öô
(&
thªadP
);

724 
thªadP
.
¨g
 = (
IArg
)
w‹kî
;

725 
thªadP
.
¥i‹ôy
 = 
poﬁAry
[
i
].priority;

726 
thªadP
.
osPri‹ôy
 = 
poﬁAry
[
i
].osPriority;

727 
thªadP
.
°ackSize
 = 
poﬁAry
[
i
].stackSize;

728 
thªadP
.
ö°™˚
->
«me
 = "RcmServer_workerThr";

730 
w‹kî
->
thªad
 = 
	`Thªad_¸óã
(

731 (
Thªad_RunFxn
)(
RcmSîvî_w‹kîThrFxn_P
), &
thªadP
, &
eb
);

733 i‡(
	`Eº‹_check
(&
eb
)) {

734 
	`Log_îr‹2
(
FXNN
": couldÇot create workerÅhread, "

735 "poﬁ=%d,Åhªad=%d", (
IArg
)
i
, (IArg)
j
);

736 
°©us
 = 
RcmSîvî_E_FAIL
;

737 
Àave
;

743 
	`SemThªad_P¨ams_öô
(&
£mThªadP
);

744 
£mThªadP
.
mode
 = 
SemThªad_Mode_COUNTING
;

746 
obj
->
run
 = 
	`SemThªad_¸óã
(0, &
£mThªadP
, &
eb
);

748 i‡(
	`Eº‹_check
(&
eb
)) {

749 
	`Log_îr‹0
(
FXNN
": couldÇot create semaphore");

750 
°©us
 = 
RcmSîvî_E_FAIL
;

751 
Àave
;

755 #i‡
USE_MESSAGEQCOPY


756 
obj
->
£rvîQue
 = 
	`MesßgeQC›y_¸óã
(
MesßgeQC›y_ASSIGN_ANY
,

757 &
obj
->
loˇlAddr
);

758 #ifde‡
BIOS_ONLY_TEST


759 
obj
->
d°Proc
 = 
	`Mu…iProc_£lf
();

761 
obj
->
d°Proc
 = 
	`Mu…iProc_gëId
("HOST");

765 
	`MesßgeQ_P¨ams_öô
(&
mqP¨ams
);

766 
obj
->
£rvîQue
 = 
	`MesßgeQ_¸óã
(
«me
, &
mqP¨ams
);

769 i‡(
NULL
 =
obj
->
£rvîQue
) {

770 
	`Log_îr‹0
(
FXNN
": couldÇot create server message queue");

771 
°©us
 = 
RcmSîvî_E_FAIL
;

772 
Àave
;

776 
	`Thªad_P¨ams_öô
(&
thªadP
);

777 
thªadP
.
¨g
 = (
IArg
)
obj
;

778 
thªadP
.
¥i‹ôy
 = 
∑øms
->priority;

779 
thªadP
.
osPri‹ôy
 = 
∑øms
->osPriority;

780 
thªadP
.
°ackSize
 = 
∑øms
->stackSize;

781 
thªadP
.
ö°™˚
->
«me
 = "RcmServer_serverThr";

783 
obj
->
£rvîThªad
 = 
	`Thªad_¸óã
(

784 (
Thªad_RunFxn
)(
RcmSîvî_£rvîThrFxn_P
), &
thªadP
, &
eb
);

786 i‡(
	`Eº‹_check
(&
eb
)) {

787 
	`Log_îr‹0
(
FXNN
": couldÇot create serverÅhread");

788 
°©us
 = 
RcmSîvî_E_FAIL
;

789 
Àave
;

793 
Àave
:

794 
	`Log_¥öt1
(
Dügs_EXIT
, "<-- "
FXNN
": %d", (
IArg
)
°©us
);

795 (
°©us
);

796 
	}
}

797 #unde‡
FXNN


803 
	#FXNN
 "RcmSîvî_dñëe"

	)

804 
I¡
 
	$RcmSîvî_dñëe
(
RcmSîvî_H™dÀ
 *
h™dÀPå
)

806 
RcmSîvî_Obje˘
 *
obj
 = (RcmSîvî_Obje˘ *)(*
h™dÀPå
);

807 
I¡
 
°©us
 = 
RcmClõ¡_S_SUCCESS
;

810 
	`Log_¥öt1
(
Dügs_ENTRY
, "--> "
FXNN
": (h™dÀPå=0x%x)", (
IArg
)
h™dÀPå
);

813 
°©us
 = 
	`RcmSîvî_In°™˚_föÆize_P
(
obj
);

816 
	`Log_¥öt1
(
Dügs_LIFECYCLE
, 
FXNN
": in°™˚ dñëe: 0x%x", (
IArg
)
obj
);

818 
	`xdc_ru¡ime_Mem‹y_‰ì
(
	`RcmSîvî_ModuÀ_hóp
(),

819 (
På
)
obj
, (
RcmSîvî_Obje˘
));

820 *
h™dÀPå
 = 
NULL
;

822 
	`Log_¥öt1
(
Dügs_EXIT
, "<-- "
FXNN
": %d", (
IArg
)
°©us
);

823 (
°©us
);

824 
	}
}

825 #unde‡
FXNN


831 
	#FXNN
 "RcmSîvî_de°ru˘"

	)

832 
I¡
 
	$RcmSîvî_de°ru˘
(
RcmSîvî_Såu˘
 *
°ru˘På
)

834 
RcmSîvî_Obje˘
 *
obj
 = (RcmSîvî_Obje˘ *)(
°ru˘På
);

835 
I¡
 
°©us
 = 
RcmClõ¡_S_SUCCESS
;

838 
	`Log_¥öt1
(
Dügs_ENTRY
, "--> "
FXNN
": (°ru˘På=0x%x)", (
IArg
)
°ru˘På
);

839 
	`Log_¥öt1
(
Dügs_LIFECYCLE
, 
FXNN
": in°™˚ de°ru˘: 0x%x", (
IArg
)
obj
);

842 
°©us
 = 
	`RcmSîvî_In°™˚_föÆize_P
(
obj
);

844 
	`Log_¥öt1
(
Dügs_EXIT
, "<-- "
FXNN
": %d", (
IArg
)
°©us
);

845 (
°©us
);

846 
	}
}

847 #unde‡
FXNN


853 
	#FXNN
 "RcmSîvî_In°™˚_föÆize_P"

	)

854 
I¡
 
	$RcmSîvî_In°™˚_föÆize_P
(
RcmSîvî_Obje˘
 *
obj
)

856 
I¡
 
i
, 
j
;

857 
I¡
 
size
;

858 
Ch¨
 *
˝
;

859 
UI¡
 
èbCou¡
;

860 
RcmSîvî_FxnTabEÀm
 *
fdp
;

861 
Eº‹_Block
 
eb
;

862 
RcmSîvî_ThªadPoﬁ
 *
poﬁAry
;

863 
RcmSîvî_W‹kîThªad
 *
w‹kî
;

864 
Li°_EÀm
 *
ñem
;

865 
Li°_H™dÀ
 
li°H
;

866 
Li°_H™dÀ
 
msgQueH
;

867 
RcmClõ¡_Packë
 *
∑ckë
;

868 #i‡
USE_MESSAGEQCOPY
 == 0

869 
MesßgeQ_Msg
 
msgqMsg
;

871 
SemThªad_H™dÀ
 
£mThªadH
;

872 
RcmSîvî_JobSåóm
 *
job
;

873 
I¡
 
rvÆ
;

874 
I¡
 
°©us
 = 
RcmClõ¡_S_SUCCESS
;

876 
	`Log_¥öt1
(
Dügs_ENTRY
, "--> "
FXNN
": (obj=0x%x)", (
IArg
)
obj
);

879 
	`Eº‹_öô
(&
eb
);

882 
obj
->
shutdown
 = 
TRUE
;

884 i‡(
obj
->
£rvîThªad
 !
NULL
) {

885 #i‡
USE_MESSAGEQCOPY


886 
	`MesßgeQC›y_unblock
(
obj
->
£rvîQue
);

888 
	`MesßgeQ_unblock
(
obj
->
£rvîQue
);

890 
	`Thªad_joö
(
obj
->
£rvîThªad
, &
eb
);

892 i‡(
	`Eº‹_check
(&
eb
)) {

893 
	`Log_îr‹0
(
FXNN
": serverÅhread didÇotÉxitÖroperly");

894 
°©us
 = 
RcmSîvî_E_FAIL
;

895 
Àave
;

900 (
ñem
 = 
	`Li°_gë
(
obj
->
jobLi°
)Ë!
NULL
) {

901 
job
 = (
RcmSîvî_JobSåóm
 *)
ñem
;

904 
msgQueH
 = 
	`Li°_h™dÀ
(&
job
->
msgQue
);

906 (
ñem
 = 
	`Li°_gë
(
msgQueH
)Ë!
NULL
) {

907 
∑ckë
 = (
RcmClõ¡_Packë
 *)
ñem
;

908 
	`Log_w¨nög2
(

909 
FXNN
":Ñeturning unprocessed message, jobId=0x%x,Öacket=0x%x",

910 (
IArg
)
job
->
jobId
, (IArg)
∑ckë
);

912 
	`RcmSîvî_£tSètusCode_I
(
∑ckë
, 
RcmSîvî_Sètus_U≈ro˚s£d
);

913 #i‡
USE_MESSAGEQCOPY


914 
∑ckë
->
hdr
.
ty≥
 = 
OMX_RAW_MSG
;

915 
∑ckë
->
hdr
.
Àn
 = 
PACKET_DATA_SIZE
 +Öackë->
mesßge
.
d©aSize
;

916 
rvÆ
 = 
	`MesßgeQC›y_£nd
(
obj
->
d°Proc
, obj->
ª∂yAddr
,

917 
obj
->
loˇlAddr
, (
På
)&
∑ckë
->
hdr
,

918 
PACKET_HDR_SIZE
 + 
∑ckë
->
mesßge
.
d©aSize
);

920 
msgqMsg
 = &
∑ckë
->
msgqHódî
;

921 
rvÆ
 = 
	`MesßgeQ_put
(
	`MesßgeQ_gëRïlyQueue
(
msgqMsg
), msgqMsg);

923 i‡(
rvÆ
 < 0) {

924 
	`Log_îr‹1
(
FXNN
": unknow¿ù¯îr‹, 0x%x", (
IArg
)
rvÆ
);

929 
	`Li°_de°ru˘
(&
job
->
msgQue
);

931 
	`xdc_ru¡ime_Mem‹y_‰ì
(
	`RcmSîvî_ModuÀ_hóp
(),

932 (
På
)
job
, (
RcmSîvî_JobSåóm
));

934 
	`Li°_dñëe
(&(
obj
->
jobLi°
));

937 
poﬁAry
 = 
obj
->
poﬁM≠
[0];

940 
i
 = 0; i < 
obj
->
poﬁM≠0Lí
; i++) {

943 
li°H
 = 
	`Li°_h™dÀ
(&(
poﬁAry
[
i
].
thªadLi°
));

946 
ñem
 = 
NULL
;

947 (
ñem
 = 
	`Li°_√xt
(
li°H
,ÉÀm)Ë!
NULL
) {

948 
w‹kî
 = (
RcmSîvî_W‹kîThªad
 *)
ñem
;

949 
w‹kî
->
ãrmö©e
 = 
TRUE
;

953 
ñem
 = 
NULL
;

954 (
ñem
 = 
	`Li°_√xt
(
li°H
,ÉÀm)Ë!
NULL
) {

955 
	`Sem≠h‹e_po°
(
poﬁAry
[
i
].
£m
, &
eb
);

957 i‡(
	`Eº‹_check
(&
eb
)) {

958 
	`Log_îr‹0
(
FXNN
":Öost failed onÅhread");

959 
°©us
 = 
RcmSîvî_E_FAIL
;

960 
Àave
;

965 
ñem
 = 
NULL
;

966 (
ñem
 = 
	`Li°_gë
(
li°H
)Ë!
NULL
) {

967 
w‹kî
 = (
RcmSîvî_W‹kîThªad
 *)
ñem
;

969 
	`Thªad_joö
(
w‹kî
->
thªad
, &
eb
);

971 i‡(
	`Eº‹_check
(&
eb
)) {

972 
	`Log_îr‹1
(

973 
FXNN
": workerÅhread didÇotÉxitÖroperly,Åhread=0x%x",

974 (
IArg
)
w‹kî
->
thªad
);

975 
°©us
 = 
RcmSîvî_E_FAIL
;

976 
Àave
;

979 
	`Thªad_dñëe
(&
w‹kî
->
thªad
);

982 
	`xdc_ru¡ime_Mem‹y_‰ì
(
	`RcmSîvî_ModuÀ_hóp
(), (
På
)
w‹kî
,

983 (
RcmSîvî_W‹kîThªad
));

987 
£mThªadH
 = 
	`SemThªad_H™dÀ_downCa°
(
poﬁAry
[
i
].
£m
);

988 
	`SemThªad_dñëe
(&
£mThªadH
);

989 
	`Li°_de°ru˘
(&(
poﬁAry
[
i
].
thªadLi°
));

992 
msgQueH
 = 
	`Li°_h™dÀ
(&
poﬁAry
[
i
].
ªadyQueue
);

994 (
ñem
 = 
	`Li°_gë
(
msgQueH
)Ë!
NULL
) {

995 
∑ckë
 = (
RcmClõ¡_Packë
 *)
ñem
;

996 
	`Log_w¨nög2
(

997 
FXNN
":Ñeturning unprocessed message, msgId=0x%x,Öacket=0x%x",

998 (
IArg
)
∑ckë
->
msgId
, (IArg)packet);

1000 
	`RcmSîvî_£tSètusCode_I
(
∑ckë
, 
RcmSîvî_Sètus_U≈ro˚s£d
);

1001 #i‡
USE_MESSAGEQCOPY


1002 
∑ckë
->
hdr
.
ty≥
 = 
OMX_RAW_MSG
;

1003 
∑ckë
->
hdr
.
Àn
 = 
PACKET_DATA_SIZE
 +Öackë->
mesßge
.
d©aSize
;

1004 
rvÆ
 = 
	`MesßgeQC›y_£nd
(
obj
->
d°Proc
, obj->
ª∂yAddr
,

1005 
obj
->
loˇlAddr
, (
På
)&
∑ckë
->
hdr
,

1006 
PACKET_HDR_SIZE
 + 
∑ckë
->
mesßge
.
d©aSize
);

1008 
msgqMsg
 = &
∑ckë
->
msgqHódî
;

1009 
rvÆ
 = 
	`MesßgeQ_put
(
	`MesßgeQ_gëRïlyQueue
(
msgqMsg
), msgqMsg);

1011 i‡(
rvÆ
 < 0) {

1012 
	`Log_îr‹1
(
FXNN
": unknow¿ù¯îr‹, 0x%x", (
IArg
)
rvÆ
);

1016 
	`Li°_de°ru˘
(&(
poﬁAry
[
i
].
ªadyQueue
));

1020 i‡((
obj
->
poﬁM≠
[0] !
NULL
Ë&& (obj->poﬁM≠[0]->
«me
 != NULL)) {

1021 
˝
 = 
obj
->
poﬁM≠
[0]->
«me
;

1022 
˝
 -(
SizeT
);

1023 
	`xdc_ru¡ime_Mem‹y_‰ì
(
	`RcmSîvî_ModuÀ_hóp
(), (
På
)
˝
, *(
SizeT
 *)cp);

1027 i‡(
obj
->
poﬁM≠
[0] !
NULL
) {

1028 
	`xdc_ru¡ime_Mem‹y_‰ì
(
	`RcmSîvî_ModuÀ_hóp
(), (
På
)(
obj
->
poﬁM≠
[0]),

1029 
obj
->
poﬁM≠0Lí
 * (
RcmSîvî_ThªadPoﬁ
));

1030 
obj
->
poﬁM≠
[0] = 
NULL
;

1035 
p
 = 1;Ö < 
RcmSîvî_POOL_MAP_LEN
;Ö++) {

1036 i‡((
poﬁAry
 = 
obj
->
poﬁM≠
[
p
]Ë=
NULL
) {

1043 
i
 = 1; i < 
RcmSîvî_MAX_TABLES
; i++) {

1044 i‡(
obj
->
fxnTab
[
i
] !
NULL
) {

1045 
èbCou¡
 = (1 << (
i
 + 4));

1046 
j
 = 0; j < 
èbCou¡
; j++) {

1047 i‡(((
obj
->
fxnTab
[
i
])+
j
)->
«me
 !
NULL
) {

1048 
˝
 = ((
obj
->
fxnTab
[
i
])+
j
)->
«me
;

1049 
size
 = 
	`_°æí
(
˝
) + 1;

1050 
	`xdc_ru¡ime_Mem‹y_‰ì
(
	`RcmSîvî_ModuÀ_hóp
(), 
˝
, 
size
);

1053 
fdp
 = 
obj
->
fxnTab
[
i
];

1054 
size
 = 
èbCou¡
 * (
RcmSîvî_FxnTabEÀm
);

1055 
	`xdc_ru¡ime_Mem‹y_‰ì
(
	`RcmSîvî_ModuÀ_hóp
(), 
fdp
, 
size
);

1056 
obj
->
fxnTab
[
i
] = 
NULL
;

1060 i‡(
NULL
 !
obj
->
£rvîThªad
) {

1061 
	`Thªad_dñëe
(&
obj
->
£rvîThªad
);

1064 i‡(
NULL
 !
obj
->
£rvîQue
) {

1065 #i‡
USE_MESSAGEQCOPY


1066 
	`MesßgeQC›y_dñëe
(&
obj
->
£rvîQue
);

1068 
	`MesßgeQ_dñëe
(&
obj
->
£rvîQue
);

1072 i‡(
NULL
 !
obj
->
run
) {

1073 
	`SemThªad_dñëe
((
SemThªad_H™dÀ
 *)(&
obj
->
run
));

1077 i‡((
NULL
 !
obj
->
fxnTabSètic
.
ñem
) &&

1078 (
NULL
 !
obj
->
fxnTabSètic
.
ñem
[0].
«me
)) {

1079 
size
 = 0, 
i
 = 0; i < 
obj
->
fxnTabSètic
.
Àngth
; i++) {

1080 
size
 +
	`_°æí
(
obj
->
fxnTabSètic
.
ñem
[
i
].
«me
) + 1;

1082 
	`xdc_ru¡ime_Mem‹y_‰ì
(

1083 
	`RcmSîvî_ModuÀ_hóp
(),

1084 
obj
->
fxnTabSètic
.
ñem
[0].
«me
, 
size
);

1088 i‡(
NULL
 !
obj
->
fxnTabSètic
.
ñem
) {

1089 
	`xdc_ru¡ime_Mem‹y_‰ì
(
	`RcmSîvî_ModuÀ_hóp
(),

1090 
obj
->
fxnTabSètic
.
ñem
,

1091 
obj
->
fxnTabSètic
.
Àngth
 * (
RcmSîvî_FxnTabEÀm
));

1095 
	`G©eThªad_de°ru˘
(&
obj
->
g©e
);

1098 
Àave
:

1099 
	`Log_¥öt1
(
Dügs_EXIT
, "<-- "
FXNN
": %d", (
IArg
)
°©us
);

1100 (
°©us
);

1101 
	}
}

1102 #unde‡
FXNN


1108 
	#FXNN
 "RcmSîvî_addSymbﬁ"

	)

1109 
I¡
 
	$RcmSîvî_addSymbﬁ
(
RcmSîvî_Obje˘
 *
obj
, 
Såög
 
funcName
,

1110 
RcmSîvî_MsgFxn
 
addr
, 
UI¡32
 *
ödex
)

1112 
G©eThªad_H™dÀ
 
g©eH
;

1113 
IArg
 
key
;

1114 
I¡
 
Àn
;

1115 
UI¡
 
i
, 
j
;

1116 
UI¡
 
èbCou¡
;

1117 
SizeT
 
èbSize
;

1118 
UI¡32
 
fxnIdx
 = 0xFFFF;

1119 
RcmSîvî_FxnTabEÀm
 *
¶Ÿ
 = 
NULL
;

1120 
Eº‹_Block
 
eb
;

1121 
I¡
 
°©us
 = 
RcmSîvî_S_SUCCESS
;

1124 
	`Log_¥öt3
(
Dügs_ENTRY
,

1125 "--> "
FXNN
": (obj=0x%x,Çame=0x%x,áddr=0x%x)",

1126 (
IArg
)
obj
, (IArg)
funcName
, (IArg)
addr
);

1128 
	`Eº‹_öô
(&
eb
);

1131 
g©eH
 = 
	`G©eThªad_h™dÀ
(&
obj
->
g©e
);

1132 
key
 = 
	`G©eThªad_íãr
(
g©eH
);

1135 
i
 = 1; i < 
RcmSîvî_MAX_TABLES
; i++) {

1136 i‡(
obj
->
fxnTab
[
i
] !
NULL
) {

1137 
j
 = 0; j < (1 << (
i
 + 4)); j++) {

1138 i‡(((
obj
->
fxnTab
[
i
])+
j
)->
addr
.
fxn
 == 0) {

1139 
¶Ÿ
 = (
obj
->
fxnTab
[
i
]Ë+ 
j
;

1146 
èbCou¡
 = (1 << (
i
 + 4));

1147 
èbSize
 = 
èbCou¡
 * (
RcmSîvî_FxnTabEÀm
);

1148 
obj
->
fxnTab
[
i
] = (
RcmSîvî_FxnTabEÀm
 *)
	`xdc_ru¡ime_Mem‹y_Æloc
(

1149 
	`RcmSîvî_ModuÀ_hóp
(), 
èbSize
, (
På
), &
eb
);

1151 i‡(
	`Eº‹_check
(&
eb
)) {

1152 
	`Log_îr‹0
(
FXNN
": unableÅoállocateÇew functionÅable");

1153 
obj
->
fxnTab
[
i
] = 
NULL
;

1154 
°©us
 = 
RcmSîvî_E_NOMEMORY
;

1155 
Àave
;

1159 
j
 = 0; j < 
èbCou¡
; j++) {

1160 ((
obj
->
fxnTab
[
i
])+
j
)->
addr
.
fxn
 = 0;

1161 ((
obj
->
fxnTab
[
i
])+
j
)->
«me
 = 
NULL
;

1162 ((
obj
->
fxnTab
[
i
])+
j
)->
key
 = 0;

1166 
j
 = 0;

1167 
¶Ÿ
 = (
obj
->
fxnTab
[
i
])+
j
;

1171 i‡(
¶Ÿ
 !
NULL
) {

1177 i‡(
¶Ÿ
 !
NULL
) {

1178 
¶Ÿ
->
addr
.
fxn
 =áddr;

1179 
Àn
 = 
	`_°æí
(
funcName
) + 1;

1180 
¶Ÿ
->
«me
 = (
Såög
)
	`xdc_ru¡ime_Mem‹y_Æloc
(

1181 
	`RcmSîvî_ModuÀ_hóp
(), 
Àn
, (
Ch¨
 *), &
eb
);

1183 i‡(
	`Eº‹_check
(&
eb
)) {

1184 
	`Log_îr‹0
(
FXNN
": unableÅoállocate functionÇame");

1185 
¶Ÿ
->
«me
 = 
NULL
;

1186 
°©us
 = 
RcmSîvî_E_NOMEMORY
;

1187 
Àave
;

1190 
	`_°r˝y
(
¶Ÿ
->
«me
, 
funcName
);

1191 
¶Ÿ
->
key
 = 
	`RcmSîvî_gëNextKey_P
(
obj
);

1192 
fxnIdx
 = (
¶Ÿ
->
key
 << 
_RCM_KeyShi·
Ë| (
i
 << 12Ë| 
j
;

1197 
	`Log_îr‹0
(
FXNN
": cannotádd symbol,Åable is full");

1198 
°©us
 = 
RcmSîvî_E_SYMBOLTABLEFULL
;

1199 
Àave
;

1203 
Àave
:

1204 
	`G©eThªad_Àave
(
g©eH
, 
key
);

1207 i‡(
°©us
 >= 0) {

1208 *
ödex
 = 
fxnIdx
;

1210 
	`Log_¥öt1
(
Dügs_EXIT
, "<-- "
FXNN
": %d", (
IArg
)
°©us
);

1211 (
°©us
);

1212 
	}
}

1213 #unde‡
FXNN


1219 
	#FXNN
 "RcmSîvî_ªmoveSymbﬁ"

	)

1220 
I¡
 
	$RcmSîvî_ªmoveSymbﬁ
(
RcmSîvî_Obje˘
 *
obj
, 
Såög
 
«me
)

1222 
G©eThªad_H™dÀ
 
g©eH
;

1223 
IArg
 
key
;

1224 
UI¡32
 
fxnIdx
;

1225 
UI¡
 
èbIdx
, 
èbOff
;

1226 
RcmSîvî_FxnTabEÀm
 *
¶Ÿ
;

1227 
I¡
 
°©us
 = 
RcmSîvî_S_SUCCESS
;

1230 
	`Log_¥öt2
(
Dügs_ENTRY
,

1231 "--> "
FXNN
": (obj=0x%x,Çame=0x%x)", (
IArg
)
obj
, (IArg)
«me
);

1234 
g©eH
 = 
	`G©eThªad_h™dÀ
(&
obj
->
g©e
);

1235 
key
 = 
	`G©eThªad_íãr
(
g©eH
);

1238 
°©us
 = 
	`RcmSîvî_gëSymIdx_P
(
obj
, 
«me
, &
fxnIdx
);

1240 i‡(
°©us
 < 0) {

1241 
	`Log_îr‹0
(
FXNN
": given symbolÇot found");

1242 
Àave
;

1246 i‡(
fxnIdx
 & 0x80000000) {

1247 
	`Log_îr‹0
(
FXNN
": cannotÑemove static symbol");

1248 
°©us
 = 
RcmSîvî_E_SYMBOLSTATIC
;

1249 
Àave
;

1253 
èbIdx
 = (
fxnIdx
 & 0xF000) >> 12;

1254 
èbOff
 = (
fxnIdx
 & 0xFFF);

1255 
¶Ÿ
 = (
obj
->
fxnTab
[
èbIdx
]Ë+ 
èbOff
;

1258 
¶Ÿ
->
addr
.
fxn
 = 0;

1259 i‡(
¶Ÿ
->
«me
 !
NULL
) {

1260 
	`xdc_ru¡ime_Mem‹y_‰ì
(

1261 
	`RcmSîvî_ModuÀ_hóp
(), 
¶Ÿ
->
«me
, 
	`_°æí
(slot->name) + 1);

1262 
¶Ÿ
->
«me
 = 
NULL
;

1264 
¶Ÿ
->
key
 = 0;

1266 
Àave
:

1267 
	`G©eThªad_Àave
(
g©eH
, 
key
);

1268 
	`Log_¥öt1
(
Dügs_EXIT
, "<-- "
FXNN
": %d", (
IArg
)
°©us
);

1269 (
°©us
);

1270 
	}
}

1271 #unde‡
FXNN


1277 
	#FXNN
 "RcmSîvî_°¨t"

	)

1278 
I¡
 
	$RcmSîvî_°¨t
(
RcmSîvî_Obje˘
 *
obj
)

1280 
Eº‹_Block
 
eb
;

1281 
I¡
 
°©us
 = 
RcmSîvî_S_SUCCESS
;

1284 
	`Log_¥öt1
(
Dügs_ENTRY
, "--> "
FXNN
": (obj=0x%x)", (
IArg
)
obj
);

1286 
	`Eº‹_öô
(&
eb
);

1289 
	`Sem≠h‹e_po°
(
obj
->
run
, &
eb
);

1291 i‡(
	`Eº‹_check
(&
eb
)) {

1292 
	`Log_îr‹0
(
FXNN
": semaphoreÖost failed");

1293 
°©us
 = 
RcmSîvî_E_FAIL
;

1296 
	`Log_¥öt1
(
Dügs_EXIT
, "<-- "
FXNN
": %d", (
IArg
)
°©us
);

1297 (
°©us
);

1298 
	}
}

1299 #unde‡
FXNN


1305 
	#FXNN
 "RcmSîvî_acqJobId_P"

	)

1306 
I¡
 
	$RcmSîvî_acqJobId_P
(
RcmSîvî_Obje˘
 *
obj
, 
UI¡16
 *
jobIdPå
)

1308 
Eº‹_Block
 
eb
;

1309 
G©eThªad_H™dÀ
 
g©eH
;

1310 
IArg
 
key
;

1311 
I¡
 
cou¡
;

1312 
UI¡16
 
jobId
;

1313 
Li°_EÀm
 *
ñem
;

1314 
RcmSîvî_JobSåóm
 *
job
;

1315 
I¡
 
°©us
 = 
RcmSîvî_S_SUCCESS
;

1318 
	`Log_¥öt2
(
Dügs_ENTRY
,

1319 "--> "
FXNN
": (obj=0x%x, jobIdPå=0x%x)", (
IArg
)
obj
, (IArg)
jobIdPå
);

1321 
	`Eº‹_öô
(&
eb
);

1322 
g©eH
 = 
	`G©eThªad_h™dÀ
(&
obj
->
g©e
);

1325 
key
 = 
	`G©eThªad_íãr
(
g©eH
);

1328 
cou¡
 = 0xFFFF; count > 0; count--) {

1331 
jobId
 = (
obj
->jobId == 0xFFFF ? obj->jobId = 1 : ++(obj->jobId));

1334 
ñem
 = 
NULL
;

1335 (
ñem
 = 
	`Li°_√xt
(
obj
->
jobLi°
,ÉÀm)Ë!
NULL
) {

1336 
job
 = (
RcmSîvî_JobSåóm
 *)
ñem
;

1337 i‡(
jobId
 =
job
->jobId) {

1338 
jobId
 = 
RcmClõ¡_DISCRETEJOBID
;

1343 i‡(
jobId
 !
RcmClõ¡_DISCRETEJOBID
) {

1349 i‡(
jobId
 =
RcmClõ¡_DISCRETEJOBID
) {

1350 *
jobIdPå
 = 
RcmClõ¡_DISCRETEJOBID
;

1351 
	`Log_îr‹0
(
FXNN
":Ço job idávailable");

1352 
°©us
 = 
RcmSîvî_E_FAIL
;

1353 
	`G©eThªad_Àave
(
g©eH
, 
key
);

1354 
Àave
;

1358 
job
 = 
	`xdc_ru¡ime_Mem‹y_Æloc
(
	`RcmSîvî_ModuÀ_hóp
(),

1359 (
RcmSîvî_JobSåóm
), (
På
), &
eb
);

1361 i‡(
	`Eº‹_check
(&
eb
)) {

1362 
	`Log_îr‹2
(
FXNN
": out of memory: heap=0x%x, size=%u",

1363 (
IArg
)
	`RcmSîvî_ModuÀ_hóp
(), (
RcmSîvî_JobSåóm
));

1364 
°©us
 = 
RcmSîvî_E_NOMEMORY
;

1365 
	`G©eThªad_Àave
(
g©eH
, 
key
);

1366 
Àave
;

1370 
job
->
jobId
 = jobId;

1371 
job
->
em±y
 = 
TRUE
;

1372 
	`Li°_c⁄°ru˘
(&(
job
->
msgQue
), 
NULL
);

1375 
	`Li°_put
(
obj
->
jobLi°
, (
Li°_EÀm
 *)
job
);

1378 
	`G©eThªad_Àave
(
g©eH
, 
key
);

1381 *
jobIdPå
 = 
jobId
;

1384 
Àave
:

1385 
	`Log_¥öt1
(
Dügs_EXIT
, "<-- "
FXNN
": %d", (
IArg
)
°©us
);

1386 (
°©us
);

1387 
	}
}

1388 #unde‡
FXNN


1414 
	#FXNN
 "RcmSîvî_di•©ch_P"

	)

1415 
I¡
 
	$RcmSîvî_di•©ch_P
(
RcmSîvî_Obje˘
 *
obj
, 
RcmClõ¡_Packë
 *
∑ckë
)

1417 
G©eThªad_H™dÀ
 
g©eH
;

1418 
IArg
 
key
;

1419 
Li°_EÀm
 *
ñem
;

1420 
Li°_H™dÀ
 
li°H
;

1421 
RcmSîvî_ThªadPoﬁ
 *
poﬁ
;

1422 
UI¡16
 
jobId
;

1423 
RcmSîvî_JobSåóm
 *
job
;

1424 
Eº‹_Block
 
eb
;

1425 
I¡
 
°©us
 = 
RcmSîvî_S_SUCCESS
;

1428 
	`Log_¥öt2
(
Dügs_ENTRY
,

1429 "--> "
FXNN
": (obj=0x%x,Öackë=0x%x)", (
IArg
)
obj
, (IArg)
∑ckë
);

1431 
	`Eº‹_öô
(&
eb
);

1434 
°©us
 = 
	`RcmSîvî_gëPoﬁ_P
(
obj
, 
∑ckë
, &
poﬁ
);

1436 i‡(
°©us
 < 0) {

1437 
Àave
;

1440 
	`Sy°em_¥ötf
("Rcm dispatch:Ö:%d j:%d f:%dÜ:%d\n",

1441 
∑ckë
->
mesßge
.
poﬁId
,Öackë->mesßge.
jobId
,

1442 
∑ckë
->
mesßge
.
fxnIdx
,Öackë->mesßge.
d©aSize
);

1445 
jobId
 = 
∑ckë
->
mesßge
.jobId;

1447 i‡(
jobId
 =
RcmClõ¡_DISCRETEJOBID
) {

1448 
li°H
 = 
	`Li°_h™dÀ
(&
poﬁ
->
ªadyQueue
);

1449 
	`Li°_put
(
li°H
, (
Li°_EÀm
 *)
∑ckë
);

1452 
	`Sem≠h‹e_po°
(
poﬁ
->
£m
, &
eb
);

1454 i‡(
	`Eº‹_check
(&
eb
)) {

1455 
	`Log_îr‹0
(
FXNN
": semaphoreÖost failed");

1462 
g©eH
 = 
	`G©eThªad_h™dÀ
(&
obj
->
g©e
);

1463 
key
 = 
	`G©eThªad_íãr
(
g©eH
);

1466 
ñem
 = 
NULL
;

1467 (
ñem
 = 
	`Li°_√xt
(
obj
->
jobLi°
,ÉÀm)Ë!
NULL
) {

1468 
job
 = (
RcmSîvî_JobSåóm
 *)
ñem
;

1469 i‡(
job
->
jobId
 == jobId) {

1474 i‡(
ñem
 =
NULL
) {

1475 
	`Log_îr‹1
(
FXNN
": faûedÅÿföd jobId=%d", (
IArg
)
jobId
);

1476 
°©us
 = 
RcmSîvî_E_JobIdNŸFound
;

1480 i‡(
job
->
em±y
) {

1481 
job
->
em±y
 = 
FALSE
;

1482 
li°H
 = 
	`Li°_h™dÀ
(&
poﬁ
->
ªadyQueue
);

1483 
	`Li°_put
(
li°H
, (
Li°_EÀm
 *)
∑ckë
);

1486 
	`Sem≠h‹e_po°
(
poﬁ
->
£m
, &
eb
);

1488 i‡(
	`Eº‹_check
(&
eb
)) {

1489 
	`Log_îr‹0
(
FXNN
": semaphoreÖost failed");

1495 
li°H
 = 
	`Li°_h™dÀ
(&
job
->
msgQue
);

1496 
	`Li°_put
(
li°H
, (
Li°_EÀm
 *)
∑ckë
);

1499 
	`G©eThªad_Àave
(
g©eH
, 
key
);

1503 
Àave
:

1504 
	`Log_¥öt1
(
Dügs_EXIT
, "<-- "
FXNN
": %d", (
IArg
)
°©us
);

1505 (
°©us
);

1506 
	}
}

1507 #unde‡
FXNN


1513 
I¡
 
	$RcmSîvî_execMsg_I
(
RcmSîvî_Obje˘
 *
obj
, 
RcmClõ¡_Mesßge
 *
msg
)

1515 
RcmSîvî_MsgFxn
 
fxn
;

1516 #i‡
USE_MESSAGEQCOPY


1517 
RcmSîvî_MsgCª©eFxn
 
¸óãFxn
 = 
NULL
;

1519 
I¡
 
°©us
;

1521 
°©us
 = 
	`RcmSîvî_gëFxnAddr_P
(
obj
, 
msg
->
fxnIdx
, &
fxn
, &
¸óãFxn
);

1523 i‡(
°©us
 >= 0) {

1525 
	`Sy°em_¥ötf
("RcmServer_execMsg_I: Calling fxnIdx: %d\n",

1526 (
msg
->
fxnIdx
 & 0x0000FFFF));

1528 #i‡
USE_MESSAGEQCOPY


1529 i‡(
¸óãFxn
) {

1530 
msg
->
ªsu…
 = (*
¸óãFxn
)(
obj
, msg->
d©aSize
, msg->
d©a
);

1533 
msg
->
ªsu…
 = (*
fxn
)(msg->
d©aSize
, msg->
d©a
);

1536 
msg
->
ªsu…
 = (*
fxn
)(msg->
d©aSize
, msg->
d©a
);

1540 (
°©us
);

1541 
	}
}

1572 
	#FXNN
 "RcmSîvî_gëFxnAddr_P"

	)

1573 
I¡
 
	$RcmSîvî_gëFxnAddr_P
(
RcmSîvî_Obje˘
 *
obj
, 
UI¡32
 
fxnIdx
,

1574 
RcmSîvî_MsgFxn
 *
addrPå
, 
RcmSîvî_MsgCª©eFxn
 *
¸óãPå
)

1576 
UI¡
 
i
, 
j
;

1577 
UI¡16
 
key
;

1578 
RcmSîvî_FxnTabEÀm
 *
¶Ÿ
;

1579 
RcmSîvî_MsgFxn
 
addr
 = 
NULL
;

1580 
RcmSîvî_MsgCª©eFxn
 
¸óãAddr
 = 
NULL
;

1581 
I¡
 
°©us
 = 
RcmSîvî_S_SUCCESS
;

1584 i‡(
fxnIdx
 & 0x80000000) {

1585 
j
 = (
fxnIdx
 & 0x0000FFFF);

1586 i‡(
j
 < (
obj
->
fxnTabSètic
.
Àngth
)) {

1589 
¶Ÿ
 = (
obj
->
fxnTab
[0])+
j
;

1590 i‡(
j
 == 0) {

1591 
¸óãAddr
 = 
¶Ÿ
->
addr
.
¸óãFxn
;

1594 
addr
 = 
¶Ÿ
->addr.
fxn
;

1598 
	`Log_îr‹1
(
FXNN
": invÆid fun˘i⁄ index 0x%x", (
IArg
)
fxnIdx
);

1599 
°©us
 = 
RcmSîvî_E_InvÆidFxnIdx
;

1600 
Àave
;

1606 
key
 = (
fxnIdx
 & 
_RCM_KeyMask
Ë>> 
_RCM_KeyShi·
;

1608 
i
 = (
fxnIdx
 & 0xF000) >> 12;

1609 i‡((
i
 > 0Ë&& (ò< 
RcmSîvî_MAX_TABLES
Ë&& (
obj
->
fxnTab
[i] !
NULL
)) {

1612 
j
 = (
fxnIdx
 & 0x0FFF);

1613 
¶Ÿ
 = (
obj
->
fxnTab
[
i
])+
j
;

1614 
addr
 = 
¶Ÿ
->addr.
fxn
;

1617 i‡(
key
 !
¶Ÿ
->key) {

1618 
	`Log_îr‹1
(
FXNN
": invÆid fun˘i⁄ index 0x%x", (
IArg
)
fxnIdx
);

1619 
°©us
 = 
RcmSîvî_E_InvÆidFxnIdx
;

1620 
Àave
;

1624 
	`Log_îr‹1
(
FXNN
": invÆid fun˘i⁄ index 0x%x", (
IArg
)
fxnIdx
);

1625 
°©us
 = 
RcmSîvî_E_InvÆidFxnIdx
;

1626 
Àave
;

1630 
Àave
:

1631 i‡(
°©us
 >= 0) {

1632 i‡(
j
 == 0) {

1633 *
¸óãPå
 = 
¸óãAddr
;

1636 *
addrPå
 = 
addr
;

1639 (
°©us
);

1640 
	}
}

1641 #unde‡
FXNN


1648 
	#FXNN
 "RcmSîvî_gëSymIdx_P"

	)

1649 
I¡
 
	$RcmSîvî_gëSymIdx_P
(
RcmSîvî_Obje˘
 *
obj
, 
Såög
 
«me
, 
UI¡32
 *
ödex
)

1651 
UI¡
 
i
, 
j
, 
Àn
;

1652 
RcmSîvî_FxnTabEÀm
 *
¶Ÿ
;

1653 
UI¡32
 
fxnIdx
 = 0xFFFFFFFF;

1654 
I¡
 
°©us
 = 
RcmSîvî_S_SUCCESS
;

1657 
	`Log_¥öt3
(
Dügs_ENTRY
,

1658 "--> "
FXNN
": (obj=0x%x,Çame=0x%x, index=0x%x)",

1659 (
IArg
)
obj
, (IArg)
«me
, (IArg)
ödex
);

1662 
i
 = 0; i < 
RcmSîvî_MAX_TABLES
; i++) {

1663 i‡(
obj
->
fxnTab
[
i
] !
NULL
) {

1664 
Àn
 = (
i
 =0Ë? 
obj
->
fxnTabSètic
.
Àngth
 : (1 << (i + 4));

1665 
j
 = 0; j < 
Àn
; j++) {

1666 
¶Ÿ
 = (
obj
->
fxnTab
[
i
]Ë+ 
j
;

1667 i‡((((
obj
->
fxnTab
[
i
])+
j
)->
«me
 !
NULL
) &&

1668 (
	`_°rcmp
(((
obj
->
fxnTab
[
i
])+
j
)->
«me
,Çame) == 0)) {

1670 i‡(
i
 == 0) {

1671 
fxnIdx
 = 0x80000000 | 
j
;

1673 
fxnIdx
 = (
¶Ÿ
->
key
 << 
_RCM_KeyShi·
Ë| (
i
 << 12Ë| 
j
;

1680 i‡(0xFFFFFFFF !
fxnIdx
) {

1686 i‡(
fxnIdx
 == 0xFFFFFFFF) {

1687 
	`Log_îr‹0
(
FXNN
": given symbolÇot found");

1688 
°©us
 = 
RcmSîvî_E_SYMBOLNOTFOUND
;

1692 i‡(
°©us
 >= 0) {

1693 *
ödex
 = 
fxnIdx
;

1696 
	`Log_¥öt1
(
Dügs_EXIT
, "<-- "
FXNN
": %d", (
IArg
)
°©us
);

1697 (
°©us
);

1698 
	}
}

1699 #unde‡
FXNN


1705 
UI¡16
 
	$RcmSîvî_gëNextKey_P
(
RcmSîvî_Obje˘
 *
obj
)

1707 
G©eThªad_H™dÀ
 
g©eH
;

1708 
IArg
 
g©eKey
;

1709 
UI¡16
 
key
;

1712 
g©eH
 = 
	`G©eThªad_h™dÀ
(&
obj
->
g©e
);

1713 
g©eKey
 = 
	`G©eThªad_íãr
(
g©eH
);

1715 i‡(
obj
->
key
 <= 1) {

1716 
obj
->
key
 = 
_RCM_KeyRe£tVÆue
;

1719 (
obj
->
key
)--;

1721 
key
 = 
obj
->key;

1723 
	`G©eThªad_Àave
(
g©eH
, 
g©eKey
);

1725 (
key
);

1726 
	}
}

1732 
	#FXNN
 "RcmSîvî_gëPoﬁ_P"

	)

1733 
I¡
 
	$RcmSîvî_gëPoﬁ_P
(
RcmSîvî_Obje˘
 *
obj
,

1734 
RcmClõ¡_Packë
 *
∑ckë
, 
RcmSîvî_ThªadPoﬁ
 **
poﬁP
)

1736 
UI¡16
 
poﬁId
;

1737 
UI¡16
 
off£t
;

1738 
I¡
 
°©us
 = 
RcmSîvî_S_SUCCESS
;

1741 
poﬁId
 = 
∑ckë
->
mesßge
.poolId;

1744 i‡(
poﬁId
 & 0x8000) {

1745 
off£t
 = (
poﬁId
 & 0x00FF);

1746 i‡(
off£t
 < 
obj
->
poﬁM≠0Lí
) {

1747 *
poﬁP
 = &(
obj
->
poﬁM≠
[0])[
off£t
];

1750 
	`Log_îr‹1
(
FXNN
":Öoﬁ id=0x%xÇŸ found", (
IArg
)
poﬁId
);

1751 *
poﬁP
 = 
NULL
;

1752 
°©us
 = 
RcmSîvî_E_PoﬁIdNŸFound
;

1753 
Àave
;

1757 
Àave
:

1758 (
°©us
);

1759 
	}
}

1760 #unde‡
FXNN


1766 
	#FXNN
 "RcmSîvî_¥o˚ss_P"

	)

1767 
Void
 
	$RcmSîvî_¥o˚ss_P
(
RcmSîvî_Obje˘
 *
obj
, 
RcmClõ¡_Packë
 *
∑ckë
)

1769 
Såög
 
«me
;

1770 
UI¡32
 
fxnIdx
;

1771 
RcmSîvî_MsgFxn
 
fxn
;

1772 
RcmClõ¡_Mesßge
 *
rcmMsg
;

1773 #i‡
USE_MESSAGEQCOPY


1774 
RcmSîvî_MsgCª©eFxn
 
¸óãFxn
 = 
NULL
;

1776 #i‡
USE_MESSAGEQCOPY
 == 0

1777 
MesßgeQ_Msg
 
msgqMsg
;

1779 
UI¡16
 
mesßgeTy≥
;

1780 
Eº‹_Block
 
eb
;

1781 
UI¡16
 
jobId
;

1782 
I¡
 
rvÆ
;

1783 
I¡
 
°©us
 = 
RcmSîvî_S_SUCCESS
;

1786 
	`Log_¥öt2
(
Dügs_ENTRY
,

1787 "--> "
FXNN
": (obj=0x%x,Öackë=0x%x)", (
IArg
)
obj
, (IArg)
∑ckë
);

1789 
	`Eº‹_öô
(&
eb
);

1792 
rcmMsg
 = &
∑ckë
->
mesßge
;

1793 #i‡
USE_MESSAGEQCOPY
 == 0

1794 
msgqMsg
 = &
∑ckë
->
msgqHódî
;

1796 
	`Log_¥öt1
(
Dügs_INFO
, 
FXNN
": mesßgêdesc=0x%x", (
IArg
)
∑ckë
->
desc
);

1799 
mesßgeTy≥
 = (
RcmClõ¡_Desc_TYPE_MASK
 & 
∑ckë
->
desc
) >>

1800 
RcmClõ¡_Desc_TYPE_SHIFT
;

1803 
mesßgeTy≥
) {

1805 
RcmClõ¡_Desc_RCM_MSG
:

1806 
rvÆ
 = 
	`RcmSîvî_execMsg_I
(
obj
, 
rcmMsg
);

1808 i‡(
rvÆ
 < 0) {

1809 
rvÆ
) {

1810 
RcmSîvî_E_InvÆidFxnIdx
:

1811 
	`RcmSîvî_£tSètusCode_I
(

1812 
∑ckë
, 
RcmSîvî_Sètus_INVALID_FXN
);

1815 
	`RcmSîvî_£tSètusCode_I
(

1816 
∑ckë
, 
RcmSîvî_Sètus_Eº‹
);

1820 i‡(
rcmMsg
->
ªsu…
 < 0) {

1821 
	`RcmSîvî_£tSètusCode_I
(
∑ckë
, 
RcmSîvî_Sètus_MSG_FXN_ERR
);

1824 
	`RcmSîvî_£tSètusCode_I
(
∑ckë
, 
RcmSîvî_Sètus_SUCCESS
);

1827 #i‡
USE_MESSAGEQCOPY


1829 
	`Sy°em_¥ötf
("RcmServer_process_P: SendingÑeply from: %dÅo: %d\n",

1830 
obj
->
loˇlAddr
, obj->
ª∂yAddr
);

1833 
∑ckë
->
hdr
.
ty≥
 = 
OMX_RAW_MSG
;

1834 
∑ckë
->
hdr
.
Àn
 = 
PACKET_DATA_SIZE
 +Öackë->
mesßge
.
d©aSize
;

1835 
°©us
 = 
	`MesßgeQC›y_£nd
(
obj
->
d°Proc
, obj->
ª∂yAddr
,

1836 
obj
->
loˇlAddr
, (
På
)&
∑ckë
->
hdr
,

1837 
PACKET_HDR_SIZE
 + 
∑ckë
->
mesßge
.
d©aSize
);

1839 
°©us
 = 
	`MesßgeQ_put
(
	`MesßgeQ_gëRïlyQueue
(
msgqMsg
), msgqMsg);

1841 i‡(
°©us
 < 0) {

1842 
	`Log_îr‹1
(
FXNN
": unknow¿ù¯îr‹, 0x%x", (
IArg
)
°©us
);

1846 
RcmClõ¡_Desc_CMD
:

1847 
°©us
 = 
	`RcmSîvî_execMsg_I
(
obj
, 
rcmMsg
);

1850 i‡((
°©us
 >0Ë&& (
rcmMsg
->
ªsu…
 >= 0)) {

1852 #i‡
USE_MESSAGEQCOPY
 == 0

1853 
°©us
 = 
	`MesßgeQ_‰ì
(
msgqMsg
);

1855 i‡(
°©us
 < 0) {

1856 
	`Log_îr‹1
(

1857 
FXNN
": MesßgeQ_‰ìÑëu∫edÉº‹ %d", (
IArg
)
°©us
);

1863 i‡(
°©us
 < 0) {

1865 
°©us
) {

1866 
RcmSîvî_E_InvÆidFxnIdx
:

1867 
	`RcmSîvî_£tSètusCode_I
(

1868 
∑ckë
, 
RcmSîvî_Sètus_INVALID_FXN
);

1871 
	`RcmSîvî_£tSètusCode_I
(

1872 
∑ckë
, 
RcmSîvî_Sètus_Eº‹
);

1878 
	`RcmSîvî_£tSètusCode_I
(

1879 
∑ckë
, 
RcmSîvî_Sètus_MSG_FXN_ERR
);

1883 #i‡
USE_MESSAGEQCOPY


1884 
∑ckë
->
hdr
.
ty≥
 = 
OMX_RAW_MSG
;

1885 
∑ckë
->
hdr
.
Àn
 = 
PACKET_DATA_SIZE
 +Öackë->
mesßge
.
d©aSize
;

1886 
°©us
 = 
	`MesßgeQC›y_£nd
(
obj
->
d°Proc
, obj->
ª∂yAddr
,

1887 
obj
->
loˇlAddr
, (
På
)&
∑ckë
->
hdr
,

1888 
PACKET_HDR_SIZE
 + 
∑ckë
->
mesßge
.
d©aSize
);

1890 
°©us
 = 
	`MesßgeQ_put
(
	`MesßgeQ_gëRïlyQueue
(
msgqMsg
), msgqMsg);

1892 i‡(
°©us
 < 0) {

1893 
	`Log_îr‹1
(
FXNN
": unknow¿ù¯îr‹, 0x%x", (
IArg
)
°©us
);

1898 
RcmClõ¡_Desc_DPC
:

1899 
rvÆ
 = 
	`RcmSîvî_gëFxnAddr_P
(
obj
, 
rcmMsg
->
fxnIdx
, &
fxn
,

1900 &
¸óãFxn
);

1902 i‡(
rvÆ
 < 0) {

1903 
	`RcmSîvî_£tSètusCode_I
(

1904 
∑ckë
, 
RcmSîvî_Sètus_SYMBOL_NOT_FOUND
);

1905 
	`Eº‹_öô
(&
eb
);

1908 #i‡
USE_MESSAGEQCOPY


1909 
∑ckë
->
hdr
.
ty≥
 = 
OMX_RAW_MSG
;

1910 
∑ckë
->
hdr
.
Àn
 = 
PACKET_DATA_SIZE
 +Öackë->
mesßge
.
d©aSize
;

1911 
°©us
 = 
	`MesßgeQC›y_£nd
(
obj
->
d°Proc
, obj->
ª∂yAddr
,

1912 
obj
->
loˇlAddr
, (
På
)&
∑ckë
->
hdr
,

1913 
PACKET_HDR_SIZE
 + 
∑ckë
->
mesßge
.
d©aSize
);

1915 
°©us
 = 
	`MesßgeQ_put
(
	`MesßgeQ_gëRïlyQueue
(
msgqMsg
), msgqMsg);

1917 i‡(
°©us
 < 0) {

1918 
	`Log_îr‹1
(
FXNN
": unknow¿ù¯îr‹, 0x%x", (
IArg
)
°©us
);

1922 #i‡
USE_MESSAGEQCOPY


1923 i‡(
¸óãFxn
) {

1924 (*
¸óãFxn
)(
obj
, 0, 
NULL
);

1927 (*
fxn
)(0, 
NULL
);

1930 (*
fxn
)(0, 
NULL
);

1934 
RcmClõ¡_Desc_SYM_ADD
:

1937 
RcmClõ¡_Desc_SYM_IDX
:

1938 
«me
 = (
Såög
)
rcmMsg
->
d©a
;

1939 
rvÆ
 = 
	`RcmSîvî_gëSymIdx_P
(
obj
, 
«me
, &
fxnIdx
);

1941 i‡(
rvÆ
 < 0) {

1942 
	`RcmSîvî_£tSètusCode_I
(

1943 
∑ckë
, 
RcmSîvî_Sètus_SYMBOL_NOT_FOUND
);

1946 
	`RcmSîvî_£tSètusCode_I
(
∑ckë
, 
RcmSîvî_Sètus_SUCCESS
);

1947 
rcmMsg
->
d©a
[0] = 
fxnIdx
;

1948 
rcmMsg
->
ªsu…
 = 0;

1951 #i‡
USE_MESSAGEQCOPY


1952 
∑ckë
->
hdr
.
ty≥
 = 
OMX_RAW_MSG
;

1953 
∑ckë
->
hdr
.
Àn
 = 
PACKET_DATA_SIZE
 +Öackë->
mesßge
.
d©aSize
;

1954 
°©us
 = 
	`MesßgeQC›y_£nd
(
obj
->
d°Proc
, obj->
ª∂yAddr
,

1955 
obj
->
loˇlAddr
, (
På
)&
∑ckë
->
hdr
,

1956 
PACKET_HDR_SIZE
 + 
∑ckë
->
mesßge
.
d©aSize
);

1958 
°©us
 = 
	`MesßgeQ_put
(
	`MesßgeQ_gëRïlyQueue
(
msgqMsg
), msgqMsg);

1960 i‡(
°©us
 < 0) {

1961 
	`Log_îr‹1
(
FXNN
": unknow¿ù¯îr‹, 0x%x", (
IArg
)
°©us
);

1965 
RcmClõ¡_Desc_JOB_ACQ
:

1966 
rvÆ
 = 
	`RcmSîvî_acqJobId_P
(
obj
, &
jobId
);

1968 i‡(
rvÆ
 < 0) {

1969 
	`RcmSîvî_£tSètusCode_I
(
∑ckë
, 
RcmSîvî_Sètus_Eº‹
);

1972 
	`RcmSîvî_£tSètusCode_I
(
∑ckë
, 
RcmSîvî_Sètus_SUCCESS
);

1973 *(
UI¡16
 *)(&
rcmMsg
->
d©a
[0]Ë
jobId
;

1974 
rcmMsg
->
ªsu…
 = 0;

1977 #i‡
USE_MESSAGEQCOPY


1978 
∑ckë
->
hdr
.
ty≥
 = 
OMX_RAW_MSG
;

1979 
∑ckë
->
hdr
.
Àn
 = 
PACKET_DATA_SIZE
 +Öackë->
mesßge
.
d©aSize
;

1980 
°©us
 = 
	`MesßgeQC›y_£nd
(
obj
->
d°Proc
, obj->
ª∂yAddr
,

1981 
obj
->
loˇlAddr
, (
På
)&
∑ckë
->
hdr
,

1982 
PACKET_HDR_SIZE
 + 
∑ckë
->
mesßge
.
d©aSize
);

1984 
°©us
 = 
	`MesßgeQ_put
(
	`MesßgeQ_gëRïlyQueue
(
msgqMsg
), msgqMsg);

1986 i‡(
°©us
 < 0) {

1987 
	`Log_îr‹1
(
FXNN
": unknow¿ù¯îr‹, 0x%x", (
IArg
)
°©us
);

1991 
RcmClõ¡_Desc_JOB_REL
:

1992 
jobId
 = (
UI¡16
)(
rcmMsg
->
d©a
[0]);

1993 
rvÆ
 = 
	`RcmSîvî_ªlJobId_P
(
obj
, 
jobId
);

1995 i‡(
rvÆ
 < 0) {

1996 
rvÆ
) {

1997 
RcmSîvî_E_JobIdNŸFound
:

1998 
	`RcmSîvî_£tSètusCode_I
(

1999 
∑ckë
, 
RcmSîvî_Sètus_JobNŸFound
);

2002 
	`RcmSîvî_£tSètusCode_I
(

2003 
∑ckë
, 
RcmSîvî_Sètus_Eº‹
);

2006 
rcmMsg
->
ªsu…
 = 
rvÆ
;

2009 
	`RcmSîvî_£tSètusCode_I
(
∑ckë
, 
RcmSîvî_Sètus_SUCCESS
);

2010 
rcmMsg
->
ªsu…
 = 0;

2013 #i‡
USE_MESSAGEQCOPY


2014 
∑ckë
->
hdr
.
ty≥
 = 
OMX_RAW_MSG
;

2015 
∑ckë
->
hdr
.
Àn
 = 
PACKET_DATA_SIZE
 +Öackë->
mesßge
.
d©aSize
;

2016 
°©us
 = 
	`MesßgeQC›y_£nd
(
obj
->
d°Proc
, obj->
ª∂yAddr
,

2017 
obj
->
loˇlAddr
, (
På
)&
∑ckë
->
hdr
,

2018 
PACKET_HDR_SIZE
 + 
∑ckë
->
mesßge
.
d©aSize
);

2020 
°©us
 = 
	`MesßgeQ_put
(
	`MesßgeQ_gëRïlyQueue
(
msgqMsg
), msgqMsg);

2022 i‡(
°©us
 < 0) {

2023 
	`Log_îr‹1
(
FXNN
": unknow¿ù¯îr‹, 0x%x", (
IArg
)
°©us
);

2028 
	`Log_îr‹1
(
FXNN
": unknown messageÅypeÑecieved, 0x%x",

2029 (
IArg
)
mesßgeTy≥
);

2033 
	`Log_¥öt0
(
Dügs_EXIT
, "<-- "
FXNN
":");

2034 
	}
}

2035 #unde‡
FXNN


2041 
	#FXNN
 "RcmSîvî_ªlJobId_P"

	)

2042 
I¡
 
	$RcmSîvî_ªlJobId_P
(
RcmSîvî_Obje˘
 *
obj
, 
UI¡16
 
jobId
)

2044 
G©eThªad_H™dÀ
 
g©eH
;

2045 
IArg
 
key
;

2046 
Li°_EÀm
 *
ñem
;

2047 
Li°_H™dÀ
 
msgQueH
;

2048 
RcmClõ¡_Packë
 *
∑ckë
;

2049 
RcmSîvî_JobSåóm
 *
job
;

2050 #i‡
USE_MESSAGEQCOPY
 == 0

2051 
MesßgeQ_Msg
 
msgqMsg
;

2053 
I¡
 
rvÆ
;

2054 
I¡
 
°©us
 = 
RcmSîvî_S_SUCCESS
;

2057 
	`Log_¥öt2
(
Dügs_ENTRY
,

2058 "--> "
FXNN
": (obj=0x%x, jobId=0x%x)", (
IArg
)
obj
, (IArg)
jobId
);

2062 
g©eH
 = 
	`G©eThªad_h™dÀ
(&
obj
->
g©e
);

2063 
key
 = 
	`G©eThªad_íãr
(
g©eH
);

2066 
ñem
 = 
NULL
;

2067 (
ñem
 = 
	`Li°_√xt
(
obj
->
jobLi°
,ÉÀm)Ë!
NULL
) {

2068 
job
 = (
RcmSîvî_JobSåóm
 *)
ñem
;

2071 i‡(
job
->
jobId
 == jobId) {

2072 
	`Li°_ªmove
(
obj
->
jobLi°
, 
ñem
);

2077 
	`G©eThªad_Àave
(
g©eH
, 
key
);

2079 i‡(
ñem
 =
NULL
) {

2080 
°©us
 = 
RcmSîvî_E_JobIdNŸFound
;

2081 
	`Log_îr‹1
(
FXNN
": faûedÅÿföd jobId=%d", (
IArg
)
jobId
);

2082 
Àave
;

2086 
msgQueH
 = 
	`Li°_h™dÀ
(&
job
->
msgQue
);

2088 (
ñem
 = 
	`Li°_gë
(
msgQueH
)Ë!
NULL
) {

2089 
∑ckë
 = (
RcmClõ¡_Packë
 *)
ñem
;

2090 
	`Log_w¨nög2
(

2091 
FXNN
":Ñeturning unprocessed message, jobId=0x%x,Öacket=0x%x",

2092 (
IArg
)
jobId
, (IArg)
∑ckë
);

2094 
	`RcmSîvî_£tSètusCode_I
(
∑ckë
, 
RcmSîvî_Sètus_U≈ro˚s£d
);

2096 #i‡
USE_MESSAGEQCOPY


2097 
∑ckë
->
hdr
.
ty≥
 = 
OMX_RAW_MSG
;

2098 
∑ckë
->
hdr
.
Àn
 = 
PACKET_DATA_SIZE
 +Öackë->
mesßge
.
d©aSize
;

2099 
rvÆ
 = 
	`MesßgeQC›y_£nd
(
obj
->
d°Proc
, obj->
ª∂yAddr
,

2100 
obj
->
loˇlAddr
, (
På
)&
∑ckë
->
hdr
,

2101 
PACKET_HDR_SIZE
 + 
∑ckë
->
mesßge
.
d©aSize
);

2103 
msgqMsg
 = &
∑ckë
->
msgqHódî
;

2104 
rvÆ
 = 
	`MesßgeQ_put
(
	`MesßgeQ_gëRïlyQueue
(
msgqMsg
), msgqMsg);

2106 i‡(
rvÆ
 < 0) {

2107 
	`Log_îr‹1
(
FXNN
": unknow¿ù¯îr‹, 0x%x", (
IArg
)
rvÆ
);

2112 
	`Li°_de°ru˘
(&
job
->
msgQue
);

2114 
	`xdc_ru¡ime_Mem‹y_‰ì
(
	`RcmSîvî_ModuÀ_hóp
(),

2115 (
På
)
job
, (
RcmSîvî_JobSåóm
));

2118 
Àave
:

2119 
	`Log_¥öt1
(
Dügs_EXIT
, "<-- "
FXNN
": %d", (
IArg
)
°©us
);

2120 (
°©us
);

2121 
	}
}

2122 #unde‡
FXNN


2128 
	#FXNN
 "RcmSîvî_£rvîThrFxn_P"

	)

2129 
Void
 
	$RcmSîvî_£rvîThrFxn_P
(
IArg
 
¨g
)

2131 
Eº‹_Block
 
eb
;

2132 
RcmClõ¡_Packë
 *
∑ckë
;

2133 #i‡
USE_MESSAGEQCOPY


2134 
Ch¨
 
ªcvBuf
[
MSGBUFFERSIZE
];

2135 
UI¡16
 
Àn
;

2137 
MesßgeQ_Msg
 
msgqMsg
 = 
NULL
;

2139 
I¡
 
rvÆ
;

2140 
Boﬁ
 
ru¬ög
 = 
TRUE
;

2141 
RcmSîvî_Obje˘
 *
obj
 = (RcmSîvî_Obje˘ *)
¨g
;

2142 
I¡
 
d©aSize
;

2144 #i‡
USE_MESSAGEQCOPY


2145 
∑ckë
 = (
RcmClõ¡_Packë
 *)&
ªcvBuf
[0];

2148 
	`Log_¥öt1
(
Dügs_ENTRY
, "--> "
FXNN
": (¨g=0x%x)", 
¨g
);

2150 
	`Eº‹_öô
(&
eb
);

2153 
	`Sem≠h‹e_≥nd
(
obj
->
run
, 
Sem≠h‹e_FOREVER
, &
eb
);

2155 i‡(
	`Eº‹_check
(&
eb
)) {

2156 
	`Log_îr‹0
(
FXNN
": Semaphore_pend failure in serverÅhread");

2160 
ru¬ög
) {

2161 
	`Log_¥öt1
(
Dügs_INFO
,

2162 
FXNN
": waiting for message,Åhread=0x%x",

2163 (
IArg
)(
obj
->
£rvîThªad
));

2167 #i‡
USE_MESSAGEQCOPY


2168 
rvÆ
 = 
	`MesßgeQC›y_ªcv
(
obj
->
£rvîQue
, (
På
)&
∑ckë
->
hdr
, &
Àn
,

2169 &
obj
->
ª∂yAddr
, 
MesßgeQC›y_FOREVER
);

2171 
	`Sy°em_¥ötf
("RcmServer_serverThrFxn_P: Received msg ofÜen %d "

2173 
Àn
, 
obj
->
ª∂yAddr
);

2175 
	`Sy°em_¥ötf
("hd∏-Å:%d f:%dÜ:%d\n", 
∑ckë
->
hdr
.
ty≥
,

2176 
∑ckë
->
hdr
.
Êags
,Öackë->hdr.
Àn
);

2178 
	`Sy°em_¥ötf
("pkà- d:%d m:%d\n", 
∑ckë
->
desc
,Öackë->
msgId
);

2180 i‡(
∑ckë
->
hdr
.
ty≥
 =
OMX_DISC_REQ
) {

2181 
	`Sy°em_¥ötf
("RcmServer_serverThrFxn_P: Got OMX_DISCONNECT\n");

2183 
	`As£π_isTrue
((
Àn
 <
MSGBUFFERSIZE
), 
NULL
);

2184 
	`As£π_isTrue
((
∑ckë
->
hdr
.
ty≥
 =
OMX_RAW_MSG
) ||

2185 (
∑ckë
->
hdr
.
ty≥
 =
OMX_DISC_REQ
Ë, 
NULL
);

2187 i‡((
rvÆ
 < 0Ë&& (rvÆ !
MesßgeQC›y_E_UNBLOCKED
)) {

2189 
rvÆ
 = 
	`MesßgeQ_gë
(
obj
->
£rvîQue
, &
msgqMsg
, 
MesßgeQ_FOREVER
);

2190 i‡((
rvÆ
 < 0Ë&& (rvÆ !
MesßgeQ_E_UNBLOCKED
)) {

2192 
	`Log_îr‹1
(
FXNN
": ip¯îr‹ 0x%x", (
IArg
)
rvÆ
);

2195 #i‡
USE_MESSAGEQCOPY


2196 } 
FALSE
);

2198 } (
msgqMsg
 =
NULL
Ë&& !
obj
->
shutdown
);

2202 #i‡
USE_MESSAGEQCOPY


2203 i‡(
obj
->
shutdown
 || 
∑ckë
->
hdr
.
ty≥
 =
OMX_DISC_REQ
) {

2204 
ru¬ög
 = 
FALSE
;

2205 
	`Log_¥öt1
(
Dügs_INFO
,

2206 
FXNN
":Åîmö©ög,Åhªad=0x%x", (
IArg
)(
obj
->
£rvîThªad
));

2210 i‡(
obj
->
shutdown
) {

2211 
ru¬ög
 = 
FALSE
;

2212 
	`Log_¥öt1
(
Dügs_INFO
,

2213 
FXNN
":Åîmö©ög,Åhªad=0x%x", (
IArg
)(
obj
->
£rvîThªad
));

2214 i‡(
msgqMsg
 =
NULL
 ) {

2220 #i‡
USE_MESSAGEQCOPY
 == 0

2221 
∑ckë
 = (
RcmClõ¡_Packë
 *)
msgqMsg
;

2224 
	`Log_¥öt2
(
Dügs_INFO
,

2225 
FXNN
": messageÑeceived,Åhread=0x%xÖacket=0x%x",

2226 (
IArg
)(
obj
->
£rvîThªad
), (IArg)
∑ckë
);

2228 i‡((
∑ckë
->
mesßge
.
poﬁId
 =
RcmClõ¡_DEFAULTPOOLID
)

2229 && ((
obj
->
poﬁM≠
[0])[0].
cou¡
 == 0)) {

2232 
	`RcmSîvî_¥o˚ss_P
(
obj
, 
∑ckë
);

2236 
rvÆ
 = 
	`RcmSîvî_di•©ch_P
(
obj
, 
∑ckë
);

2239 i‡(
rvÆ
 < 0) {

2240 
rvÆ
) {

2241 
RcmSîvî_E_JobIdNŸFound
:

2242 
	`RcmSîvî_£tSètusCode_I
(

2243 
∑ckë
, 
RcmSîvî_Sètus_JobNŸFound
);

2246 
RcmSîvî_E_PoﬁIdNŸFound
:

2247 
	`RcmSîvî_£tSètusCode_I
(

2248 
∑ckë
, 
RcmSîvî_Sètus_PoﬁNŸFound
);

2252 
	`RcmSîvî_£tSètusCode_I
(

2253 
∑ckë
, 
RcmSîvî_Sètus_Eº‹
);

2256 
∑ckë
->
mesßge
.
ªsu…
 = 
rvÆ
;

2259 #i‡
USE_MESSAGEQCOPY


2261 
	`Sy°em_¥ötf
("RcmServer_serverThrFxn_P: "

2263 
obj
->
loˇlAddr
, obj->
ª∂yAddr
);

2264 
	`Sy°em_¥ötf
("£ndög: %d + %d\n", 
PACKET_HDR_SIZE
,

2265 
∑ckë
->
mesßge
.
d©aSize
);

2267 
∑ckë
->
hdr
.
ty≥
 = 
OMX_RAW_MSG
;

2268 i‡(
rvÆ
 < 0) {

2269 
∑ckë
->
hdr
.
Àn
 = (
UI¡32
);

2270 
∑ckë
->
desc
 = 0x4142;

2271 
∑ckë
->
msgId
 = 0x0044;

2272 
d©aSize
 = (
Ωmsg_omx_hdr
Ë+ (
UI¡32
);

2275 
∑ckë
->
hdr
.
Àn
 = 
PACKET_DATA_SIZE
 +

2276 
∑ckë
->
mesßge
.
d©aSize
;

2277 
d©aSize
 = 
PACKET_HDR_SIZE
 + 
∑ckë
->
mesßge
.dataSize;

2279 
rvÆ
 = 
	`MesßgeQC›y_£nd
(
obj
->
d°Proc
, obj->
ª∂yAddr
,

2280 
obj
->
loˇlAddr
, (
På
)&
∑ckë
->
hdr
, 
d©aSize
);

2282 
rvÆ
 = 
	`MesßgeQ_put
(
	`MesßgeQ_gëRïlyQueue
(
msgqMsg
), msgqMsg);

2284 i‡(
rvÆ
 < 0) {

2285 
	`Log_îr‹1
(
FXNN
": unknow¿ù¯îr‹, 0x%x", (
IArg
)
rvÆ
);

2291 
	`Sy°em_¥ötf
("RcmServer_serverThrFxn_P: ExitingÅhread.\n");

2293 
	`Log_¥öt0
(
Dügs_EXIT
, "<-- "
FXNN
":");

2294 
	}
}

2295 #unde‡
FXNN


2301 
Void
 
	$RcmSîvî_£tSètusCode_I
(
RcmClõ¡_Packë
 *
∑ckë
, 
UI¡16
 
code
)

2305 
	`As£π_isTrue
((
code
 < 16), 
NULL
);

2307 
∑ckë
->
desc
 &~(
RcmClõ¡_Desc_TYPE_MASK
);

2308 
∑ckë
->
desc
 |((
code
 << 
RcmClõ¡_Desc_TYPE_SHIFT
)

2309 & 
RcmClõ¡_Desc_TYPE_MASK
);

2310 
	}
}

2316 
	#FXNN
 "RcmSîvî_w‹kîThrFxn_P"

	)

2317 
Void
 
	$RcmSîvî_w‹kîThrFxn_P
(
IArg
 
¨g
)

2319 
Eº‹_Block
 
eb
;

2320 
RcmClõ¡_Packë
 *
∑ckë
;

2321 
Li°_EÀm
 *
ñem
;

2322 
Li°_H™dÀ
 
li°H
;

2323 
Li°_H™dÀ
 
ªadyQueueH
;

2324 
UI¡16
 
jobId
;

2325 
G©eThªad_H™dÀ
 
g©eH
;

2326 
IArg
 
key
;

2327 
RcmSîvî_ThªadPoﬁ
 *
poﬁ
;

2328 
RcmSîvî_JobSåóm
 *
job
;

2329 
RcmSîvî_W‹kîThªad
 *
obj
;

2330 
Boﬁ
 
ru¬ög
;

2331 
I¡
 
rvÆ
;

2334 
	`Log_¥öt1
(
Dügs_ENTRY
, "--> "
FXNN
": (¨g=0x%x)", 
¨g
);

2336 
	`Eº‹_öô
(&
eb
);

2337 
obj
 = (
RcmSîvî_W‹kîThªad
 *)
¨g
;

2338 
ªadyQueueH
 = 
	`Li°_h™dÀ
(&
obj
->
poﬁ
->
ªadyQueue
);

2339 
∑ckë
 = 
NULL
;

2340 
ru¬ög
 = 
TRUE
;

2343 
ru¬ög
) {

2344 
	`Log_¥öt1
(
Dügs_INFO
,

2345 
FXNN
": waôög f‹ job,Åhªad=0x%x", (
IArg
)(
obj
->
thªad
));

2348 i‡(
∑ckë
 =
NULL
) {

2349 
	`Sem≠h‹e_≥nd
(
obj
->
poﬁ
->
£m
, 
Sem≠h‹e_FOREVER
, &
eb
);

2351 i‡(
	`Eº‹_check
(&
eb
)) {

2352 
	`Log_îr‹0
(
FXNN
": semaphoreÖend failed");

2357 i‡(
obj
->
ãrmö©e
) {

2358 
ru¬ög
 = 
FALSE
;

2359 
	`Log_¥öt1
(
Dügs_INFO
,

2360 
FXNN
":Åîmö©ög,Åhªad=0x%x", (
IArg
)(
obj
->
thªad
));

2365 i‡(
∑ckë
 =
NULL
) {

2366 
∑ckë
 = (
RcmClõ¡_Packë
 *)
	`Li°_gë
(
ªadyQueueH
);

2369 i‡(
∑ckë
 =
NULL
) {

2370 
	`Log_îr‹1
(
FXNN
":Ñeady queue isÉmpty,Åhread=0x%x",

2371 (
IArg
)(
obj
->
thªad
));

2375 
	`Log_¥öt2
(
Dügs_INFO
, 
FXNN
": jobÑeceived,Åhread=0x%xÖacket=0x%x",

2376 (
IArg
)
obj
->
thªad
, (IArg)
∑ckë
);

2379 
jobId
 = 
∑ckë
->
mesßge
.jobId;

2382 
	`RcmSîvî_¥o˚ss_P
(
obj
->
£rvî
, 
∑ckë
);

2383 
∑ckë
 = 
NULL
;

2392 i‡(
jobId
 !
RcmClõ¡_DISCRETEJOBID
) {

2395 
g©eH
 = 
	`G©eThªad_h™dÀ
(&
obj
->
£rvî
->
g©e
);

2396 
key
 = 
	`G©eThªad_íãr
(
g©eH
);

2399 
ñem
 = 
NULL
;

2400 (
ñem
 = 
	`Li°_√xt
(
obj
->
£rvî
->
jobLi°
,ÉÀm)Ë!
NULL
) {

2401 
job
 = (
RcmSîvî_JobSåóm
 *)
ñem
;

2402 i‡(
job
->
jobId
 == jobId) {

2408 i‡(
ñem
 =
NULL
) {

2409 
	`G©eThªad_Àave
(
g©eH
, 
key
);

2414 
li°H
 = 
	`Li°_h™dÀ
(&
job
->
msgQue
);

2418 
ñem
 = 
	`Li°_gë
(
li°H
);

2420 i‡(
ñem
 =
NULL
) {

2421 
job
->
em±y
 = 
TRUE
;

2426 
∑ckë
 = (
RcmClõ¡_Packë
 *)
ñem
;

2427 
rvÆ
 = 
	`RcmSîvî_gëPoﬁ_P
(
obj
->
£rvî
, 
∑ckë
, &
poﬁ
);

2430 i‡(
rvÆ
 < 0) {

2431 
rvÆ
) {

2432 
RcmSîvî_E_PoﬁIdNŸFound
:

2433 
	`RcmSîvî_£tSètusCode_I
(

2434 
∑ckë
, 
RcmSîvî_Sètus_PoﬁNŸFound
);

2438 
	`RcmSîvî_£tSètusCode_I
(

2439 
∑ckë
, 
RcmSîvî_Sètus_Eº‹
);

2442 
∑ckë
->
mesßge
.
ªsu…
 = 
rvÆ
;

2444 #i‡
USE_MESSAGEQCOPY


2445 
∑ckë
->
hdr
.
ty≥
 = 
OMX_RAW_MSG
;

2446 
∑ckë
->
hdr
.
Àn
 = 
PACKET_DATA_SIZE
 +Öackë->
mesßge
.
d©aSize
;

2447 
rvÆ
 = 
	`MesßgeQC›y_£nd
(

2448 (
obj
->
£rvî
)->
d°Proc
,

2449 (
obj
->
£rvî
)->
ª∂yAddr
,

2450 (
obj
->
£rvî
)->
loˇlAddr
, (
På
)&
∑ckë
->
hdr
,

2451 
PACKET_HDR_SIZE
 + 
∑ckë
->
mesßge
.
d©aSize
);

2453 
rvÆ
 = 
	`MesßgeQ_put
(

2454 
	`MesßgeQ_gëRïlyQueue
(&
∑ckë
->
msgqHódî
),

2455 &
∑ckë
->
msgqHódî
);

2457 i‡(
rvÆ
 < 0) {

2458 
	`Log_îr‹1
(

2459 
FXNN
": unknow¿ù¯îr‹, 0x%x", (
IArg
)
rvÆ
);

2465 
li°H
 = 
	`Li°_h™dÀ
(&
poﬁ
->
ªadyQueue
);

2466 
	`Li°_put
(
li°H
, 
ñem
);

2467 
∑ckë
 = 
NULL
;

2468 
	`Sem≠h‹e_po°
(
poﬁ
->
£m
, &
eb
);

2470 i‡(
	`Eº‹_check
(&
eb
)) {

2471 
	`Log_îr‹0
(
FXNN
": semaphoreÖost failed");

2478 } 
rvÆ
 < 0);

2480 
	`G©eThªad_Àave
(
g©eH
, 
key
);

2484 
	`Log_¥öt0
(
Dügs_EXIT
, "<-- "
FXNN
":");

2485 
	}
}

2486 #unde‡
FXNN


2492 
UI¡32
 
	$RcmSîvî_gëLoˇlAddªss
(
RcmSîvî_Obje˘
 *
obj
)

2494 (
obj
->
loˇlAddr
);

2495 
	}
}

2501 
UI¡32
 
	$RcmSîvî_gëRemŸeAddªss
(
RcmSîvî_Obje˘
 *
obj
)

2503 (
obj
->
ª∂yAddr
);

2504 
	}
}

2511 
UI¡16
 
	$RcmSîvî_gëRemŸeProc
(
RcmSîvî_Obje˘
 *
obj
)

2513 (
obj
->
d°Proc
);

2514 
	}
}

	@ti/grcm/RcmServer.h

73 #i‚de‡
ti_grcm_RcmSîvî__ö˛ude


74 
	#ti_grcm_RcmSîvî__ö˛ude


	)

76 
	~<xdc/ru¡ime/k∆/G©eThªad.h
>

77 
	~<xdc/ru¡ime/k∆/Thªad.h
>

83 #i‡
deföed
 (
__˝lu•lus
)

93 
	#RcmSîvî_S_SUCCESS
 (0)

	)

98 
	#RcmSîvî_E_FAIL
 (-1)

	)

103 
	#RcmSîvî_E_NOMEMORY
 (-2)

	)

111 
	#RcmSîvî_E_SYMBOLNOTFOUND
 (-3)

	)

120 
	#RcmSîvî_E_SYMBOLSTATIC
 (-4)

	)

128 
	#RcmSîvî_E_SYMBOLTABLEFULL
 (-5)

	)

149 
I¡32
 (*
	tRcmSîvî_MsgFxn
)(
	tUI¡32
, UInt32 *);

151 #i‡
USE_MESSAGEQCOPY


157 
I¡32
 (*
	tRcmSîvî_MsgCª©eFxn
)(
	tVoid
 *, 
	tUI¡32
, UInt32 *);

178 
Såög
 
«me
;

185 #i‡
USE_MESSAGEQCOPY


187 
RcmSîvî_MsgFxn
 
fxn
;

188 
RcmSîvî_MsgCª©eFxn
 
¸óãFxn
;

189 }
addr
;

191 
RcmSîvî_MsgFxn
 
addr
;

194 } 
	tRcmSîvî_FxnDesc
;

203 
I¡
 
Àngth
;

208 
RcmSîvî_FxnDesc
 *
ñem
;

210 } 
	tRcmSîvî_FxnDescAry
;

222 
Såög
 
«me
;

227 
UI¡
 
cou¡
;

235 
Thªad_Pri‹ôy
 
¥i‹ôy
;

244 
I¡
 
osPri‹ôy
;

249 
SizeT
 
°ackSize
;

254 
Såög
 
°ackSeg
;

256 } 
	tRcmSîvî_ThªadPoﬁDesc
;

265 
I¡
 
Àngth
;

270 
RcmSîvî_ThªadPoﬁDesc
 *
ñem
;

272 } 
	tRcmSîvî_ThªadPoﬁDescAry
;

278 
RcmSîvî_Obje˘_èg
 *
	tRcmSîvî_H™dÀ
;

293 
Thªad_Pri‹ôy
 
¥i‹ôy
;

306 
I¡
 
osPri‹ôy
;

311 
SizeT
 
°ackSize
;

316 
Såög
 
°ackSeg
;

321 
RcmSîvî_ThªadPoﬁDesc
 
deÁu…Poﬁ
;

332 
RcmSîvî_ThªadPoﬁDescAry
 
w‹kîPoﬁs
;

366 
RcmSîvî_FxnDescAry
 
fxns
;

368 } 
	tRcmSîvî_P¨ams
;

378 
G©eThªad_Såu˘
 
_f1
;

379 
På
 
_f2
;

380 #i‡
USE_MESSAGEQCOPY


381 
På
 
_f3a
;

382 
UI¡32
 
_f3b
;

383 
UI¡32
 
_f3c
;

384 
UI¡32
 
_f3d
;

386 
På
 
_f3
;

388 
På
 
_f4
;

390 
I¡
 
_f1
;

391 
På
 
_f2
;

392 } 
_f5
;

393 
På
 
_f6
[9];

394 
UI¡16
 
_f7
;

395 
UI¡16
 
_f8
;

396 
Boﬁ
 
_f9
;

397 
I¡
 
_f10
;

398 
På
 
_f11
[4];

399 
På
 
_f12
;

400 } 
	tRcmSîvî_Såu˘
;

427 
I¡
 
RcmSîvî_addSymbﬁ
(

428 
RcmSîvî_H™dÀ
 
h™dÀ
,

429 
Såög
 
«me
,

430 
RcmSîvî_MsgFxn
 
addr
,

431 
UI¡32
 * 
ödex


459 
I¡
 
RcmSîvî_c⁄°ru˘
(

460 
RcmSîvî_Såu˘
 * 
°ru˘På
,

461 
Såög
 
«me
,

462 c⁄° 
RcmSîvî_P¨ams
 *
∑øms


488 
I¡
 
RcmSîvî_¸óã
(

489 
Såög
 
«me
,

490 
RcmSîvî_P¨ams
 * 
∑øms
,

491 
RcmSîvî_H™dÀ
 * 
h™dÀ


502 
I¡
 
RcmSîvî_dñëe
(

503 
RcmSîvî_H™dÀ
 * 
h™dÀPå


515 
I¡
 
RcmSîvî_de°ru˘
(

516 
RcmSîvî_Såu˘
 * 
°ru˘På


531 
Void
 
RcmSîvî_exô
(Void);

544 
Void
 
RcmSîvî_öô
(Void);

552 
Void
 
RcmSîvî_P¨ams_öô
(

553 
RcmSîvî_P¨ams
 * 
∑øms


572 
I¡
 
RcmSîvî_ªmoveSymbﬁ
(

573 
RcmSîvî_H™dÀ
 
h™dÀ
,

574 
Såög
 
«me


591 
I¡
 
RcmSîvî_°¨t
(

592 
RcmSîvî_H™dÀ
 
h™dÀ


596 #i‡
USE_MESSAGEQCOPY


607 
UI¡32
 
RcmSîvî_gëLoˇlAddªss
(

608 
RcmSîvî_H™dÀ
 
h™dÀ


621 
UI¡32
 
RcmSîvî_gëRemŸeAddªss
(

622 
RcmSîvî_H™dÀ
 
h™dÀ


635 
UI¡16
 
RcmSîvî_gëRemŸeProc
(

636 
RcmSîvî_H™dÀ
 
h™dÀ


643 #i‡
deföed
 (
__˝lu•lus
)

	@ti/grcm/RcmTypes.h

39 #i‚de‡
ti_grcm_RcmTy≥s_h


40 
	#ti_grcm_RcmTy≥s_h


	)

47 
	#USE_MESSAGEQCOPY
 1

	)

49 #i‡
USE_MESSAGEQCOPY


50 
	~<ti/ùc/Ωmsg/MesßgeQC›y.h
>

52 
	~<ti/ùc/MesßgeQ.h
>

55 
	~<ti/grcm/RcmClõ¡.h
>

83 
	#RcmClõ¡_Desc_RCM_MSG
 0x1

84 
	#RcmClõ¡_Desc_DPC
 0x2

85 
	#RcmClõ¡_Desc_SYM_ADD
 0x3

86 
	#RcmClõ¡_Desc_SYM_IDX
 0x4

87 
	#RcmClõ¡_Desc_CMD
 0x5

88 
	#RcmClõ¡_Desc_JOB_ACQ
 0x6

89 
	#RcmClõ¡_Desc_JOB_REL
 0x7

90 
	#RcmClõ¡_Desc_TYPE_MASK
 0x0F00

91 
	#RcmClõ¡_Desc_TYPE_SHIFT
 8

92 

	)

94 
	#RcmSîvî_Sètus_SUCCESS
 ((
UI¡16
)0)

95 
	#RcmSîvî_Sètus_INVALID_FXN
 ((
UI¡16
)1)

96 
	#RcmSîvî_Sètus_SYMBOL_NOT_FOUND
 ((
UI¡16
)2)

97 
	#RcmSîvî_Sètus_INVALID_MSG_TYPE
 ((
UI¡16
)3)

98 
	#RcmSîvî_Sètus_MSG_FXN_ERR
 ((
UI¡16
)4)

99 
	#RcmSîvî_Sètus_Eº‹
 ((
UI¡16
)5)

100 
	#RcmSîvî_Sètus_U≈ro˚s£d
 ((
UI¡16
)6)

101 
	#RcmSîvî_Sètus_JobNŸFound
 ((
UI¡16
)7)

102 
	#RcmSîvî_Sètus_PoﬁNŸFound
 ((
UI¡16
)8)

103 

	)

106 #i‡
USE_MESSAGEQCOPY


108 
	sΩmsg_omx_hdr
 {

109 
UI¡32
 
	mty≥
;

110 
UI¡32
 
	mÊags
;

111 
UI¡32
 
	mÀn
;

117 
Bôs32
 
	mª£rved0
;

118 
Bôs32
 
	mª£rved1
;

119 
Ωmsg_omx_hdr
 
	mhdr
;

120 
UI¡16
 
	mdesc
;

121 
UI¡16
 
	mmsgId
;

122 
RcmClõ¡_Mesßge
 
	mmesßge
;

123 } 
	tRcmClõ¡_Packë
;

129 
	#PACKET_HDR_SIZE
 ((
RcmClõ¡_Packë
Ë- 3 * (
UI¡32
))

	)

130 
	#PACKET_DATA_SIZE
 (
PACKET_HDR_SIZE
 - (
Ωmsg_omx_hdr
))

	)

139 
MesßgeQ_MsgHódî
 
	mmsgqHódî
;

140 
UI¡16
 
	mdesc
;

141 
UI¡16
 
	mmsgId
;

142 
RcmClõ¡_Mesßge
 
	mmesßge
;

143 } 
	tRcmClõ¡_Packë
;

148 
Void
 *
_mem£t
(Void *
s
, 
I¡
 
c
, I¡ 
n
);

149 
I¡
 
_°rcmp
(
Ch¨
 *
s
, Ch¨ *
t
);

150 
Void
 
_°r˝y
(
Ch¨
 *
s
, Ch¨ *
t
);

151 
I¡
 
_°æí
(c⁄° 
Ch¨
 *
s
);

	@ti/grcm/RcmUtils.c

39 
	~<xdc/°d.h
>

40 
	~"RcmTy≥s.h
"

46 
Void
 *
	$_mem£t
(
Void
 *
s
, 
I¡
 
c
, I¡ 
n
)

48 
UCh¨
 *
p
 = (UCh¨ *)
s
;

50 
n
-- > 0) {

51 *
p
++ = (
UCh¨
)
c
;

54 (
s
);

55 
	}
}

62 
Void
 
	$_°r˝y
(
Ch¨
 *
s
, Ch¨ *
t
)

64 (*
s
++ = *
t
++))

66 
	}
}

73 
I¡
 
	$_°rcmp
(
Ch¨
 *
s
, Ch¨ *
t
)

75  ; *
s
 =*
t
; s++,Å++) {

76 i‡(*
s
 == '\0') {

80 (*
s
 - *
t
);

81 
	}
}

88 
I¡
 
	$_°æí
(c⁄° 
Ch¨
 *
s
)

90 
I¡
 
n
;

92 
n
 = 0; *
s
 != '\0'; s++) {

93 
n
++;

95 (
n
);

96 
	}
}

	@ti/hdmiwa/HdmiWa.c

36 
	~<xdc/°d.h
>

37 
	~<°dio.h
>

38 
	~<°rög.h
>

39 
	~<°dlib.h
>

41 
	~<xdc/ru¡ime/Sy°em.h
>

42 
	~<xdc/ru¡ime/Sèπup.h
>

44 
	~<ti/sysbios/k∆/Clock.h
>

45 
	~<ti/sysbios/k∆/Task.h
>

46 
	~<ti/sysbios/timîs/dmtimî/Timî.h
>

48 
	~<ti/ùc/Ωmsg/MesßgeQC›y.h
>

49 
	~<ti/§vmgr/NameM≠.h
>

50 
	~<ti/ùc/Mu…iProc.h
>

52 
	~"∑ckage/öã∫Æ/HdmiWa.xdc.h
"

54 
	#REG32
(
A
Ë(*(vﬁ©ûê
UI¡32
 *Ë(A))

	)

55 
	#HDMIREG
(
off£t
Ë(
HdmiWa_hdmiBa£Addr
 + off£t)

	)

57 
	#GPT_IRQSTATUS_MAT_IT_FLAG
 0x1

	)

58 
	#GPT_IRQSTATUS_OVF_IT_FLAG
 0x2

	)

60 
	#GPT_IRQWAKEEN_MAT_WUP_ENA
 0x1

	)

61 
	#GPT_IRQWAKEEN_OVF_WUP_ENA
 0x2

	)

63 
	#GPT_IRQENABLE_CLR_MAT_EN_FLAG
 0x1

	)

64 
	#GPT_IRQENABLE_CLR_OVF_EN_FLAG
 0x2

	)

65 
	#GPT_IRQENABLE_CLR_MAT_OVF_EN_FLAG
 0x3

	)

67 
	#GPT_TCLR_COMPARE_ENABLE
 (1 << 0x6)

	)

69 
	#HDMI_ACR_CTRL
 
	`HDMIREG
(0x0904)

	)

70 
	#HDMI_FREQ_SVAL
 
	`HDMIREG
(0x0908)

	)

71 
	#HDMI_INTR2
 
	`HDMIREG
(0x05C8)

	)

72 
	#HDMI_CTS_CHG_INT
 (1 << 3)

	)

73 
	#HDMI_CTS_SEL_SW
 (1 << 0)

	)

74 
	#HDMI_NCTSPKT_EN
 (1 << 1)

	)

76 
	#HDMI_FREQ_SVAL_MCLK_IS_128_FS
 0x0

	)

77 
	#HDMI_FREQ_SVAL_MCLK_IS_1024_FS
 0x5

	)

80 
	#TEN_MICROSECONDS
 10000

	)

83 
	#ONE_MILLISECOND
 1000000

	)

85 
	#TIME_IN_NS_TO_GPT_CYCLES
(
timeNs
, 
g±Fªq
) \

86 (
timeNs
 * (
g±Fªq
 / 100000Ë/ 10000)

	)

88 c⁄° 
Timî_H™dÀ
 
SysM3TickTmr
;

90 
Void
 *
IpcPowî_˛ockFxn
;

95 
Void
 
	$HdmiWa_èskFxn
(
UArg
 
¨g0
, UArg 
¨g1
)

97 
MesßgeQC›y_H™dÀ
 
h™dÀ
;

98 
UI¡32
 
myEndpoöt
 = 0;

99 
UI¡32
 
ªmŸeEndpoöt
;

100 
UI¡16
 
d°Proc
;

101 
UI¡16
 
Àn
;

102 
UI¡32
 
ãmp
;

103 
UI¡32
 
˘sI¡îvÆ
 = 0;

104 
UI¡32
 
timîPîiod
 = 0;

105 
HdmiWa_PaylﬂdD©a
 
∑ylﬂd
;

107 
	`Sy°em_¥ötf
("HdmiWa_taskFxn Entered...:\n");

108 
d°Proc
 = 
	`Mu…iProc_gëId
("HOST");

110 
	`MesßgeQC›y_öô
(
d°Proc
);

113 
h™dÀ
 = 
	`MesßgeQC›y_¸óã
(70, &
myEndpoöt
);

115 
	`NameM≠_ªgi°î
("rpmsg-hdmiwa", 70);

117 
TRUE
) {

119 
	`MesßgeQC›y_ªcv
(
h™dÀ
, (
På
)&
∑ylﬂd
, &
Àn
, &
ªmŸeEndpoöt
,

120 
MesßgeQC›y_FOREVER
);

122 i‡(!
∑ylﬂd
.
åiggî
) {

123 
	`Sy°em_¥ötf
("HDMIÖayloadÑeceived CTSInterval = %d, "

124 "ACRR©ê%d, SysCLK = %d\n", 
∑ylﬂd
.
˘sI¡îvÆ
,

125 
∑ylﬂd
.
a¸R©e
,Öaylﬂd.
sysClockFªq
);

126 i‡(!
∑ylﬂd
.
˘sI¡îvÆ
 || !∑ylﬂd.
a¸R©e
 ||

127 !
∑ylﬂd
.
sysClockFªq
) {

128 
	`Sy°em_¥ötf
("Stop ACR WA, setáutoÑeloadÅimerÅo "

130 
moduÀ
->
waE«bÀ
 = 
FALSE
;

131 
timîPîiod
 = 
Clock_tickPîiod
;

132 
£t_timî
;

136 
timîPîiod
 = 1000000 / 
∑ylﬂd
.
a¸R©e
;

137 
˘sI¡îvÆ
 = 
	`TIME_IN_NS_TO_GPT_CYCLES
(
∑ylﬂd
.ctsInterval,

138 
∑ylﬂd
.
sysClockFªq
);

140 
ãmp
 = 
ONE_MILLISECOND
 % 
∑ylﬂd
.
˘sI¡îvÆ
;

141 i‡(
ãmp
 < 
TEN_MICROSECONDS
) {

142 
moduÀ
->
˘sI¡îvÆDñè
 = 1;

145 
moduÀ
->
˘sI¡îvÆDñè
 =

146 
	`TIME_IN_NS_TO_GPT_CYCLES
(
ãmp
, 
∑ylﬂd
.
sysClockFªq
);

149 
	`REG32
(
HDMI_ACR_CTRL
Ë
HDMI_CTS_SEL_SW
;

151 
	`REG32
(
HDMI_INTR2
Ë
HDMI_CTS_CHG_INT
;

153 
	`REG32
(
HDMI_FREQ_SVAL
Ë
HDMI_FREQ_SVAL_MCLK_IS_1024_FS
;

154 
	`REG32
(
HDMI_FREQ_SVAL
Ë!
HDMI_FREQ_SVAL_MCLK_IS_1024_FS
);

156 
ãmp
 = 
moduÀ
->
pTmr
->
t¸r
;

157 
ãmp
 +
moduÀ
->
˘sI¡îvÆDñè
;

159 
moduÀ
->
pTmr
->
t¸r
 < 
ãmp
);

161 
	`REG32
(
HDMI_FREQ_SVAL
Ë
HDMI_FREQ_SVAL_MCLK_IS_128_FS
;

163 
ãmp
 = 0; (temp < 100000) &&

164 ((
	`REG32
(
HDMI_INTR2
Ë& 
HDMI_CTS_CHG_INT
) != HDMI_CTS_CHG_INT);

165 
ãmp
++);

167 
	`REG32
(
HDMI_INTR2
Ë
HDMI_CTS_CHG_INT
;

169 
moduÀ
->
g±T¸rHÆfCts
 = 
˘sI¡îvÆ
 / 2;

170 
moduÀ
->
g±T¸rFuŒCts
 = 
˘sI¡îvÆ
;

172 
£t_timî
:

173 
	`Sy°em_¥ötf
("Aut‹ñﬂdÅimîÅÿ%d\n", 
timîPîiod
);

174 
	`Timî_£tPîiodMi¸oSecs
(
SysM3TickTmr
, 
timîPîiod
);

175 
	`Timî_°¨t
(
SysM3TickTmr
);

176 
	`MesßgeQC›y_£nd
(
d°Proc
, 
ªmŸeEndpoöt
, 
myEndpoöt
,

177 (
På
)&
∑ylﬂd
, 
Àn
);

180 
	`Sy°em_¥ötf
("Start HDMI ACRWA\n");

181 
moduÀ
->
waE«bÀ
 = 
TRUE
;

185 
	}
}

190 
I¡
 
	$HdmiWa_ModuÀ_°¨tup
(
I¡
 
pha£
)

193 
Task_P¨ams
 
∑øms
;

196 
IpcPowî_˛ockFxn
 = 
HdmiWa_tick
;

198 
	`Task_P¨ams_öô
(&
∑øms
);

199 
∑øms
.
ö°™˚
->
«me
 = "HdmiWa_taskFxn";

200 
∑øms
.
¥i‹ôy
 = 1;

201 
	`Task_¸óã
(
HdmiWa_èskFxn
, &
∑øms
, 
NULL
);

203  
Sèπup_DONE
;

204 
	}
}

210 
ölöe
 
Void
 
	$HdmiWa_m©chTmrI¡CÃ
(
HdmiWa_TimîRegs
* 
pTmr
)

212 
pTmr
->
úqEnCÃ
 = 
GPT_IRQENABLE_CLR_MAT_EN_FLAG
;

213 
pTmr
->
tõr
 &~
GPT_IRQSTATUS_MAT_IT_FLAG
;

214 
pTmr
->
twî
 &~
GPT_IRQWAKEEN_MAT_WUP_ENA
;

215 
pTmr
->
tm¨
 = 0x0;

216 
moduÀ
->
m©chTmrE«bÀ
 = 
FALSE
;

217 
	}
}

225 
ölöe
 
I¡32
 
	$HdmiWa_m©chTmrSèπ
(
HdmiWa_TimîRegs
* 
pTmr
, 
UI¡32
 
lﬂd
)

229 i‡(
pTmr
->
édr
 > 0xFFFFFFFF - 
lﬂd
) {

230  
HdmiWa_E_TIMER_FAIL
;

233 
pTmr
->
tm¨
 =ÖTmr->
t¸r
 + 
lﬂd
;

234 
pTmr
->
ti§
 |
GPT_IRQSTATUS_MAT_IT_FLAG
;

235 
pTmr
->
t˛r
 |
GPT_TCLR_COMPARE_ENABLE
;

236 
pTmr
->
úqEnCÃ
 = 
GPT_IRQENABLE_CLR_MAT_OVF_EN_FLAG
;

237 
pTmr
->
tõr
 = 
GPT_IRQSTATUS_MAT_IT_FLAG
;

238 
pTmr
->
twî
 = 
GPT_IRQWAKEEN_MAT_WUP_ENA
;

239 
moduÀ
->
m©chTmrE«bÀ
 = 
TRUE
;

241  
HdmiWa_S_SUCCESS
;

242 
	}
}

248 
ölöe
 
Void
 
	$HdmiWa_autoRldTmrI§
()

250 
UI¡32
 vﬁ©ûê
ãmp
;

251 
I¡
 
ªt
;

254 i‡(!
moduÀ
->
waE«bÀ
) {

258 
	`REG32
(
HDMI_FREQ_SVAL
Ë
HDMI_FREQ_SVAL_MCLK_IS_1024_FS
;

259 
	`REG32
(
HDMI_FREQ_SVAL
Ë!
HDMI_FREQ_SVAL_MCLK_IS_1024_FS
);

261 
ãmp
 = 
moduÀ
->
pTmr
->
t¸r
;

262 
ãmp
 +
moduÀ
->
˘sI¡îvÆDñè
;

264 
moduÀ
->
pTmr
->
t¸r
 < 
ãmp
);

266 
	`REG32
(
HDMI_FREQ_SVAL
Ë
HDMI_FREQ_SVAL_MCLK_IS_128_FS
;

268 
ãmp
 = 0; (temp < 100000) &&

269 ((
	`REG32
(
HDMI_INTR2
Ë& 
HDMI_CTS_CHG_INT
) != HDMI_CTS_CHG_INT);

270 
ãmp
++);

272 
	`REG32
(
HDMI_INTR2
Ë
HDMI_CTS_CHG_INT
;

274 
ªt
 = 
	`HdmiWa_m©chTmrSèπ
(
moduÀ
->
pTmr
, moduÀ->
g±T¸rHÆfCts
);

275 i‡(
ªt
) {

276 
	`Sy°em_¥ötf
("Error starting MatchÅimer halfcts\n");

278 
moduÀ
->
a¸Off
 = 
TRUE
;

279 
	}
}

285 
ölöe
 
Void
 
	$HdmiWa_m©chTmrI§
()

287 
I¡
 
ªt
;

289 
	`HdmiWa_m©chTmrI¡CÃ
(
moduÀ
->
pTmr
);

291 i‡(
moduÀ
->
a¸Off
) {

292 
ªt
 = 
	`HdmiWa_m©chTmrSèπ
(
moduÀ
->
pTmr
, moduÀ->
g±T¸rFuŒCts
);

293 i‡(
ªt
) {

294 
	`Sy°em_¥ötf
("Error starting MatchÅimer fullcts \n");

297 
	`REG32
(
HDMI_ACR_CTRL
Ë
HDMI_CTS_SEL_SW
 | 
HDMI_NCTSPKT_EN
;

298 
moduÀ
->
a¸Off
 = 
FALSE
;

301 
moduÀ
->
pTmr
->
úqEnCÃ
 = 
GPT_IRQENABLE_CLR_MAT_OVF_EN_FLAG
;

302 
moduÀ
->
pTmr
->
tõr
 = 
GPT_IRQSTATUS_OVF_IT_FLAG
;

303 
moduÀ
->
pTmr
->
twî
 = 
GPT_IRQWAKEEN_OVF_WUP_ENA
;

305 
	`REG32
(
HDMI_ACR_CTRL
Ë
HDMI_CTS_SEL_SW
;

306 
moduÀ
->
a¸Off
 = 
TRUE
;

308 
	}
}

313 
Void
 
	$HdmiWa_tick
(
UArg
 
¨g
)

315 i‡(
moduÀ
->
m©chTmrE«bÀ
) {

317 
	`HdmiWa_m©chTmrI§
();

322 
	`Clock_tick
();

323 
	`HdmiWa_autoRldTmrI§
();

324 
	}
}

	@ti/ipc/rpmsg/InterruptDsp.c

37 
	~<xdc/°d.h
>

38 
	~<xdc/ru¡ime/As£π.h
>

40 
	~<ti/sysbios/hÆ/Hwi.h
>

41 
	~<ti/sysbios/Ámûy/c64p/ã¶a/Wugí.h
>

43 
	~<ti/ùc/Mu…iProc.h
>

45 
	~<ti/ùc/Ωmsg/I¡îru±D•.h
>

48 
	#REG16
(
A
Ë(*(vﬁ©ûê
UI¡16
 *Ë(A))

	)

49 
	#REG32
(
A
Ë(*(vﬁ©ûê
UI¡32
 *Ë(A))

	)

51 
	#HOSTINT
 26

	)

52 
	#DSPINT
 55

	)

53 
	#M3INT_MBX
 50

	)

54 
	#M3INT
 19

	)

56 
	#DSPEVENTID
 5

	)

59 
	#HOST_TO_SYSM3_MBX
 0

	)

60 
	#M3_TO_HOST_MBX
 1

	)

61 
	#DSP_TO_HOST_MBX
 2

	)

62 
	#HOST_TO_DSP_MBX
 3

	)

63 
	#SYSM3_TO_APPM3_MBX
 4

	)

65 
	#MAILBOX_BASEADDR
 (0x4A0F4000)

	)

67 
	#MAILBOX_MESSAGE
(
M
Ë(
MAILBOX_BASEADDR
 + 0x040 + (0x4 * M))

	)

68 
	#MAILBOX_STATUS
(
M
Ë(
MAILBOX_BASEADDR
 + 0x0C0 + (0x4 * M))

	)

69 
	#MAILBOX_REG_VAL
(
M
Ë(0x1 << (2 * M))

	)

71 
	#MAILBOX_IRQSTATUS_CLR_DSP
 (
MAILBOX_BASEADDR
 + 0x114)

	)

72 
	#MAILBOX_IRQENABLE_SET_DSP
 (
MAILBOX_BASEADDR
 + 0x118)

	)

73 
	#MAILBOX_IRQENABLE_CLR_DSP
 (
MAILBOX_BASEADDR
 + 0x11C)

	)

75 
Hwi_FuncPå
 
	gu£rFxn
 = 
NULL
;

77 
Void
 
I¡îru±D•_i§
(
UArg
 
¨g
);

89 
Void
 
	$I¡îru±D•_ötE«bÀ
()

91 
	`REG32
(
MAILBOX_IRQENABLE_SET_DSP
Ë
	`MAILBOX_REG_VAL
(
HOST_TO_DSP_MBX
);

92 
	}
}

98 
Void
 
	$I¡îru±D•_ötDißbÀ
()

100 
	`REG32
(
MAILBOX_IRQENABLE_CLR_DSP
Ë
	`MAILBOX_REG_VAL
(
HOST_TO_DSP_MBX
);

101 
	}
}

106 
Void
 
	$I¡îru±D•_ötRegi°î
(
Hwi_FuncPå
 
fxn
)

108 
Hwi_P¨ams
 
hwiAârs
;

109 
UI¡
 
key
;

111 
u£rFxn
 = 
fxn
;

114 
key
 = 
	`Hwi_dißbÀ
();

121 
	`REG32
(
MAILBOX_IRQSTATUS_CLR_DSP
Ë
	`MAILBOX_REG_VAL
(
HOST_TO_DSP_MBX
);

123 
	`Hwi_P¨ams_öô
(&
hwiAârs
);

125 
hwiAârs
.
evítId
 = 
DSPINT
;

126 
	`Hwi_¸óã
(
DSPEVENTID
,

127 (
Hwi_FuncPå
)
I¡îru±D•_i§
,

128 &
hwiAârs
,

129 
NULL
);

132 
	`Wugí_íabÀEvít
(
DSPINT
);

133 
	`Hwi_íabÀI¡îru±
(
DSPEVENTID
);

136 
	`I¡îru±D•_ötE«bÀ
();

139 
	`Hwi_ª°‹e
(
key
);

140 
	}
}

146 
Void
 
	$I¡îru±D•_ötSíd
(
UI¡16
 
ªmŸeProcId
, 
UArg
 
¨g
)

148 
Boﬁ
 
c⁄figuªd
 = 
FALSE
;

149 
UI¡16
 
sysm3ProcId
 = 
Mu…iProc_INVALIDID
;

150 
UI¡16
 
≠pm3ProcId
 = 
Mu…iProc_INVALIDID
;

151 
UI¡16
 
ho°ProcId
 = 
Mu…iProc_INVALIDID
;

152 
UI¡16
 
d•ProcId
 = 
Mu…iProc_INVALIDID
;

154 i‡(!
c⁄figuªd
) {

155 
ho°ProcId
 = 
	`Mu…iProc_gëId
("HOST");

156 
d•ProcId
 = 
	`Mu…iProc_gëId
("DSP");

157 
sysm3ProcId
 = 
	`Mu…iProc_gëId
("CORE0");

158 
≠pm3ProcId
 = 
	`Mu…iProc_gëId
("CORE1");

159 
c⁄figuªd
 = 
TRUE
;

162 i‡(
ªmŸeProcId
 =
sysm3ProcId
) {

163 
	`REG32
(
	`MAILBOX_MESSAGE
(
HOST_TO_SYSM3_MBX
)Ë
¨g
;

165 i‡(
ªmŸeProcId
 =
≠pm3ProcId
) {

166 
	`REG32
(
	`MAILBOX_MESSAGE
(
SYSM3_TO_APPM3_MBX
)Ë
¨g
;

168 i‡(
ªmŸeProcId
 =
ho°ProcId
) {

169 
	`REG32
(
	`MAILBOX_MESSAGE
(
DSP_TO_HOST_MBX
)Ë
¨g
;

171 i‡(
ªmŸeProcId
 =
d•ProcId
) {

172 
	`REG32
(
	`MAILBOX_MESSAGE
(
HOST_TO_DSP_MBX
)Ë
¨g
;

176 
	`As£π_isTrue
(
FALSE
, 
NULL
);

178 
	}
}

184 
UI¡
 
	$I¡îru±D•_ötCÀ¨
()

186 
UI¡
 
¨g
 = 
INVALIDPAYLOAD
;

188 i‡(
	`REG32
(
	`MAILBOX_STATUS
(
HOST_TO_DSP_MBX
)) != 0) {

190 
¨g
 = 
	`REG32
(
	`MAILBOX_MESSAGE
(
HOST_TO_DSP_MBX
));

191 
	`REG32
(
MAILBOX_IRQSTATUS_CLR_DSP
Ë
	`MAILBOX_REG_VAL
(
HOST_TO_DSP_MBX
);

194  (
¨g
);

195 
	}
}

200 
Void
 
	$I¡îru±D•_i§
(
UArg
 
¨g
)

202 
UArg
 
∑ylﬂd
;

204 
∑ylﬂd
 = 
	`I¡îru±D•_ötCÀ¨
();

205 i‡(
∑ylﬂd
 !(
UI¡
)
INVALIDPAYLOAD
) {

206 
	`u£rFxn
(
∑ylﬂd
);

208 
	}
}

	@ti/ipc/rpmsg/InterruptDsp.h

37 
	~<ti/sysbios/hÆ/Hwi.h
>

39 
	#INVALIDPAYLOAD
 (0xFFFFFFFF)

	)

46 
Void
 
I¡îru±D•_ötE«bÀ
();

51 
Void
 
I¡îru±D•_ötDißbÀ
();

56 
Void
 
I¡îru±D•_ötRegi°î
(
Hwi_FuncPå
 
fxn
);

63 
Void
 
I¡îru±D•_ötSíd
(
UI¡16
 
ªmŸeProcId
, 
UArg
 
¨g
);

70 
UI¡
 
I¡îru±D•_ötCÀ¨
();

	@ti/ipc/rpmsg/InterruptIpu.c

37 
	~<xdc/°d.h
>

38 
	~<xdc/ru¡ime/As£π.h
>

39 
	~<xdc/ru¡ime/Log.h
>

40 
	~<xdc/ru¡ime/Dügs.h
>

42 
	~<ti/sysbios/hÆ/Hwi.h
>

43 #i‚de‡
SMP


44 
	~<ti/sysbios/Ámûy/¨m/duˇti/C‹e.h
>

47 
	~<ti/ùc/Mu…iProc.h
>

49 
	~<ti/ùc/Ωmsg/I¡îru±Ipu.h
>

52 
	#REG16
(
A
Ë(*(vﬁ©ûê
UI¡16
 *Ë(A))

	)

53 
	#REG32
(
A
Ë(*(vﬁ©ûê
UI¡32
 *Ë(A))

	)

55 
	#HOSTINT
 26

	)

56 
	#DSPINT
 55

	)

57 
	#M3INT_MBX
 50

	)

58 
	#M3INT
 19

	)

61 
	#HOST_TO_SYSM3_MBX
 0

	)

62 
	#M3_TO_HOST_MBX
 1

	)

63 
	#DSP_TO_HOST_MBX
 2

	)

64 
	#HOST_TO_DSP_MBX
 3

	)

65 
	#SYSM3_TO_APPM3_MBX
 4

	)

67 
	#MAILBOX_BASEADDR
 (0xAA0F4000)

	)

69 
	#MAILBOX_MESSAGE
(
M
Ë(
MAILBOX_BASEADDR
 + 0x040 + (0x4 * M))

	)

70 
	#MAILBOX_FIFOSTATUS
(
M
Ë(
MAILBOX_BASEADDR
 + 0x080 + (0x4 * M))

	)

71 
	#MAILBOX_STATUS
(
M
Ë(
MAILBOX_BASEADDR
 + 0x0C0 + (0x4 * M))

	)

72 
	#MAILBOX_REG_VAL
(
M
Ë(0x1 << (2 * M))

	)

74 
	#MAILBOX_IRQSTATUS_CLR_M3
 (
MAILBOX_BASEADDR
 + 0x124)

	)

75 
	#MAILBOX_IRQENABLE_SET_M3
 (
MAILBOX_BASEADDR
 + 0x128)

	)

76 
	#MAILBOX_IRQENABLE_CLR_M3
 (
MAILBOX_BASEADDR
 + 0x12C)

	)

84 
	#INTERRUPT_CORE_0
 (0x40001000)

	)

85 
	#INTERRUPT_CORE_1
 (0x40001000 + 2)

	)

87 
Hwi_FuncPå
 
	gu£rFxn
 = 
NULL
;

89 
Void
 
I¡îru±Ipu_i§
(
UArg
 
¨g
);

102 
Void
 
	$I¡îru±Ipu_ötE«bÀ
()

109 #i‚de‡
SMP


110 i‡(
	`C‹e_gëId
() == 0) {

112 
	`REG32
(
MAILBOX_IRQENABLE_SET_M3
Ë
	`MAILBOX_REG_VAL
(
HOST_TO_SYSM3_MBX
);

113 #i‚de‡
SMP


116 
	`Hwi_íabÀI¡îru±
(
M3INT
);

119 
	}
}

125 
Void
 
	$I¡îru±Ipu_ötDißbÀ
()

132 #i‚de‡
SMP


133 i‡(
	`C‹e_gëId
() == 0) {

135 
	`REG32
(
MAILBOX_IRQENABLE_CLR_M3
Ë
	`MAILBOX_REG_VAL
(
HOST_TO_SYSM3_MBX
);

136 #i‚de‡
SMP


139 
	`Hwi_dißbÀI¡îru±
(
M3INT
);

142 
	}
}

147 
Void
 
	$I¡îru±Ipu_ötRegi°î
(
Hwi_FuncPå
 
fxn
)

149 
Hwi_P¨ams
 
hwiAârs
;

150 
UI¡
 
key
;

153 
key
 = 
	`Hwi_dißbÀ
();

155 
u£rFxn
 = 
fxn
;

156 
	`Hwi_P¨ams_öô
(&
hwiAârs
);

157 
hwiAârs
.
maskSëtög
 = 
Hwi_MaskögO±i⁄_LOWER
;

159 #i‚de‡
SMP


160 i‡(
	`C‹e_gëId
() == 0) {

162 
	`Hwi_¸óã
(
M3INT_MBX
,

163 (
Hwi_FuncPå
)
I¡îru±Ipu_i§
,

164 &
hwiAârs
,

165 
NULL
);

167 
	`Hwi_íabÀI¡îru±
(
M3INT_MBX
);

168 #i‚de‡
SMP


171 
	`Hwi_¸óã
(
M3INT
,

172 (
Hwi_FuncPå
)
I¡îru±Ipu_i§
,

173 &
hwiAârs
,

174 
NULL
);

179 
	`I¡îru±Ipu_ötE«bÀ
();

182 
	`Hwi_ª°‹e
(
key
);

183 
	}
}

189 
Void
 
	$I¡îru±Ipu_ötSíd
(
UI¡16
 
ªmŸeProcId
, 
UArg
 
¨g
)

191 
Boﬁ
 
c⁄figuªd
 = 
FALSE
;

192 #i‚de‡
SMP


193 
UI¡16
 
sysm3ProcId
 = 
Mu…iProc_INVALIDID
;

194 
UI¡16
 
≠pm3ProcId
 = 
Mu…iProc_INVALIDID
;

196 
UI¡16
 
ho°ProcId
 = 
Mu…iProc_INVALIDID
;

197 
UI¡16
 
d•ProcId
 = 
Mu…iProc_INVALIDID
;

199 
	`Log_¥öt2
(
Dügs_USER1
,

201 (
IArg
)
¨g
, (IArg)
ªmŸeProcId
);

203 i‡(!
c⁄figuªd
) {

204 
ho°ProcId
 = 
	`Mu…iProc_gëId
("HOST");

205 
d•ProcId
 = 
	`Mu…iProc_gëId
("DSP");

206 #i‚de‡
SMP


207 
sysm3ProcId
 = 
	`Mu…iProc_gëId
("CORE0");

208 
≠pm3ProcId
 = 
	`Mu…iProc_gëId
("CORE1");

210 
c⁄figuªd
 = 
TRUE
;

213 #i‚de‡
SMP


214 i‡(
ªmŸeProcId
 =
sysm3ProcId
) {

215 
	`REG32
(
	`MAILBOX_FIFOSTATUS
(
HOST_TO_SYSM3_MBX
)));

216 
	`REG32
(
	`MAILBOX_MESSAGE
(
HOST_TO_SYSM3_MBX
)Ë
¨g
;

218 i‡(
ªmŸeProcId
 =
≠pm3ProcId
) {

219 
	`REG32
(
	`MAILBOX_FIFOSTATUS
(
SYSM3_TO_APPM3_MBX
)));

221 
	`REG32
(
	`MAILBOX_MESSAGE
(
SYSM3_TO_APPM3_MBX
)Ë
¨g
;

223 
	`REG16
(
INTERRUPT_CORE_1
) |= 0x1;

227 i‡(
ªmŸeProcId
 =
d•ProcId
) {

228 
	`REG32
(
	`MAILBOX_FIFOSTATUS
(
HOST_TO_DSP_MBX
)));

229 
	`REG32
(
	`MAILBOX_MESSAGE
(
HOST_TO_DSP_MBX
)Ë
¨g
;

231 i‡(
ªmŸeProcId
 =
ho°ProcId
) {

232 
	`REG32
(
	`MAILBOX_FIFOSTATUS
(
M3_TO_HOST_MBX
)));

233 
	`REG32
(
	`MAILBOX_MESSAGE
(
M3_TO_HOST_MBX
)Ë
¨g
;

237 
	`As£π_isTrue
(
FALSE
, 
NULL
);

239 
	}
}

245 
UI¡
 
	$I¡îru±Ipu_ötCÀ¨
()

247 
UI¡
 
¨g
 = 
INVALIDPAYLOAD
;

250 #i‚de‡
SMP


251 i‡(
	`C‹e_gëId
() == 0) {

254 i‡(
	`REG32
(
	`MAILBOX_STATUS
(
HOST_TO_SYSM3_MBX
)) == 0) {

255  (
¨g
);

259 
¨g
 = 
	`REG32
(
	`MAILBOX_MESSAGE
(
HOST_TO_SYSM3_MBX
));

260 
	`REG32
(
MAILBOX_IRQSTATUS_CLR_M3
) =

261 
	`MAILBOX_REG_VAL
(
HOST_TO_SYSM3_MBX
);

263 #i‚de‡
SMP


267 i‡((
	`REG16
(
INTERRUPT_CORE_1
) & 0x1) == 0x1) {

268 
	`REG16
(
INTERRUPT_CORE_1
) &= ~(0x1);

272 i‡(
	`REG32
(
	`MAILBOX_STATUS
(
SYSM3_TO_APPM3_MBX
)) == 0) {

273  (
¨g
);

277 
¨g
 = 
	`REG32
(
	`MAILBOX_MESSAGE
(
SYSM3_TO_APPM3_MBX
));

278 
	`REG32
(
MAILBOX_IRQSTATUS_CLR_M3
) =

279 
	`MAILBOX_REG_VAL
(
SYSM3_TO_APPM3_MBX
);

281 i‡(
	`REG32
(
	`MAILBOX_STATUS
(
SYSM3_TO_APPM3_MBX
)) != 0) {

283 
	`REG16
(
INTERRUPT_CORE_1
) |= 0x1;

289  (
¨g
);

290 
	}
}

296 
Void
 
	$I¡îru±Ipu_i§
(
UArg
 
¨g
)

298 
UArg
 
∑ylﬂd
;

300 
∑ylﬂd
 = 
	`I¡îru±Ipu_ötCÀ¨
();

301 i‡(
∑ylﬂd
 !
INVALIDPAYLOAD
) {

302 
	`Log_¥öt1
(
Dügs_USER1
,

304 (
IArg
)
∑ylﬂd
);

305 
	`u£rFxn
(
∑ylﬂd
);

307 
	}
}

	@ti/ipc/rpmsg/InterruptIpu.h

37 
	~<ti/sysbios/hÆ/Hwi.h
>

39 
	#INVALIDPAYLOAD
 (0xFFFFFFFF)

	)

46 
Void
 
I¡îru±Ipu_ötE«bÀ
();

51 
Void
 
I¡îru±Ipu_ötDißbÀ
();

56 
Void
 
I¡îru±Ipu_ötRegi°î
(
Hwi_FuncPå
 
fxn
);

62 
Void
 
I¡îru±Ipu_ötSíd
(
UI¡16
 
ªmŸeProcId
, 
UArg
 
¨g
);

68 
UI¡
 
I¡îru±Ipu_ötCÀ¨
();

	@ti/ipc/rpmsg/InterruptIpu_norouting.c

37 
	~<xdc/°d.h
>

38 
	~<xdc/ru¡ime/As£π.h
>

39 
	~<xdc/ru¡ime/Log.h
>

40 
	~<xdc/ru¡ime/Dügs.h
>

42 
	~<ti/sysbios/hÆ/Hwi.h
>

43 
	~<ti/sysbios/Ámûy/¨m/duˇti/C‹e.h
>

45 
	~<ti/ùc/Mu…iProc.h
>

47 
	~<ti/ùc/Ωmsg/I¡îru±Ipu.h
>

50 
	#REG16
(
A
Ë(*(vﬁ©ûê
UI¡16
 *Ë(A))

	)

51 
	#REG32
(
A
Ë(*(vﬁ©ûê
UI¡32
 *Ë(A))

	)

53 
	#HOSTINT
 26

	)

54 
	#DSPINT
 55

	)

55 
	#M3INT_MBX
 50

	)

56 
	#M3INT
 19

	)

59 
	#SYSM3_MBX
 0

	)

60 
	#HOST_MBX_0
 1

	)

61 
	#HOST_MBX_1
 2

	)

62 
	#APPM3_MBX
 3

	)

63 
	#DSP_MBX
 4

	)

65 
	#MAILBOX_BASEADDR
 (0xAA0F4000)

	)

67 
	#MAILBOX_MESSAGE
(
M
Ë(
MAILBOX_BASEADDR
 + 0x040 + (0x4 * M))

	)

68 
	#MAILBOX_FIFOSTATUS
(
M
Ë(
MAILBOX_BASEADDR
 + 0x080 + (0x4 * M))

	)

69 
	#MAILBOX_STATUS
(
M
Ë(
MAILBOX_BASEADDR
 + 0x0C0 + (0x4 * M))

	)

70 
	#MAILBOX_REG_VAL
(
M
Ë(0x1 << (2 * M))

	)

72 
	#MAILBOX_IRQSTATUS_CLR_M3
 (
MAILBOX_BASEADDR
 + 0x124)

	)

73 
	#MAILBOX_IRQENABLE_SET_M3
 (
MAILBOX_BASEADDR
 + 0x128)

	)

74 
	#MAILBOX_IRQENABLE_CLR_M3
 (
MAILBOX_BASEADDR
 + 0x12C)

	)

76 
Hwi_FuncPå
 
	gu£rFxn
 = 
NULL
;

78 
Void
 
I¡îru±Ipu_i§
(
UArg
 
¨g
);

90 
Void
 
	$I¡îru±Ipu_ötE«bÀ
()

97 i‡(
	`C‹e_gëId
() == 0) {

98 
	`REG32
(
MAILBOX_IRQENABLE_SET_M3
Ë
	`MAILBOX_REG_VAL
(
SYSM3_MBX
);

101 
	`REG32
(
MAILBOX_IRQENABLE_SET_M3
Ë
	`MAILBOX_REG_VAL
(
APPM3_MBX
);

103 
	`Hwi_íabÀI¡îru±
(
M3INT
);

104 
	}
}

110 
Void
 
	$I¡îru±Ipu_ötDißbÀ
()

117 i‡(
	`C‹e_gëId
() == 0) {

118 
	`REG32
(
MAILBOX_IRQENABLE_CLR_M3
Ë
	`MAILBOX_REG_VAL
(
SYSM3_MBX
);

121 
	`REG32
(
MAILBOX_IRQENABLE_CLR_M3
Ë
	`MAILBOX_REG_VAL
(
APPM3_MBX
);

123 
	`Hwi_dißbÀI¡îru±
(
M3INT
);

124 
	}
}

129 
Void
 
	$I¡îru±Ipu_ötRegi°î
(
Hwi_FuncPå
 
fxn
)

131 
Hwi_P¨ams
 
hwiAârs
;

132 
UI¡
 
key
;

135 
key
 = 
	`Hwi_dißbÀ
();

137 
u£rFxn
 = 
fxn
;

138 
	`Hwi_P¨ams_öô
(&
hwiAârs
);

139 
hwiAârs
.
maskSëtög
 = 
Hwi_MaskögO±i⁄_LOWER
;

141 
	`Hwi_¸óã
(
M3INT
,

142 (
Hwi_FuncPå
)
I¡îru±Ipu_i§
,

143 &
hwiAârs
,

144 
NULL
);

146 
	`Hwi_¸óã
(
M3INT_MBX
,

147 (
Hwi_FuncPå
)
I¡îru±Ipu_i§
,

148 &
hwiAârs
,

149 
NULL
);

152 
	`Hwi_íabÀI¡îru±
(
M3INT_MBX
);

154 
	`Hwi_íabÀI¡îru±
(
M3INT
);

157 
	`I¡îru±Ipu_ötE«bÀ
();

160 
	`Hwi_ª°‹e
(
key
);

161 
	}
}

167 
Void
 
	$I¡îru±Ipu_ötSíd
(
UI¡16
 
ªmŸeProcId
, 
UArg
 
¨g
)

169 
	`Log_¥öt2
(
Dügs_USER1
,

171 (
IArg
)
¨g
, (IArg)
ªmŸeProcId
);

172 i‡(
ªmŸeProcId
 =
	`Mu…iProc_gëId
("CORE0")) {

173 
	`REG32
(
	`MAILBOX_FIFOSTATUS
(
SYSM3_MBX
)) == 1);

174 
	`REG32
(
	`MAILBOX_MESSAGE
(
SYSM3_MBX
)Ë
¨g
;

176 i‡(
ªmŸeProcId
 =
	`Mu…iProc_gëId
("CORE1")) {

177 
	`REG32
(
	`MAILBOX_FIFOSTATUS
(
APPM3_MBX
)) == 1);

178 
	`REG32
(
	`MAILBOX_MESSAGE
(
APPM3_MBX
)Ë
¨g
;

180 i‡(
ªmŸeProcId
 =
	`Mu…iProc_gëId
("DSP")) {

181 
	`REG32
(
	`MAILBOX_FIFOSTATUS
(
DSP_MBX
)) == 1);

182 
	`REG32
(
	`MAILBOX_MESSAGE
(
DSP_MBX
)Ë
¨g
;

185 i‡(
	`C‹e_gëId
() == 0) {

186 
	`REG32
(
	`MAILBOX_FIFOSTATUS
(
HOST_MBX_0
)) == 1);

187 
	`REG32
(
	`MAILBOX_MESSAGE
(
HOST_MBX_0
)Ë
¨g
;

190 
	`REG32
(
	`MAILBOX_FIFOSTATUS
(
HOST_MBX_1
)) == 1);

191 
	`REG32
(
	`MAILBOX_MESSAGE
(
HOST_MBX_1
)Ë
¨g
;

194 
	}
}

200 
UI¡
 
	$I¡îru±Ipu_ötCÀ¨
()

202 
UI¡
 
¨g
 = 
INVALIDPAYLOAD
;

205 i‡(
	`C‹e_gëId
() == 0) {

206 i‡(
	`REG32
(
	`MAILBOX_STATUS
(
SYSM3_MBX
)) == 0) {

207  (
¨g
);

211 
¨g
 = 
	`REG32
(
	`MAILBOX_MESSAGE
(
SYSM3_MBX
));

212 
	`REG32
(
MAILBOX_IRQSTATUS_CLR_M3
Ë
	`MAILBOX_REG_VAL
(
SYSM3_MBX
);

216 i‡(
	`REG32
(
	`MAILBOX_STATUS
(
APPM3_MBX
)) == 0) {

217  (
¨g
);

221 
¨g
 = 
	`REG32
(
	`MAILBOX_MESSAGE
(
APPM3_MBX
));

222 
	`REG32
(
MAILBOX_IRQSTATUS_CLR_M3
Ë
	`MAILBOX_REG_VAL
(
APPM3_MBX
);

226  (
¨g
);

227 
	}
}

233 
Void
 
	$I¡îru±Ipu_i§
(
UArg
 
¨g
)

235 
UArg
 
∑ylﬂd
;

237 
∑ylﬂd
 = 
	`I¡îru±Ipu_ötCÀ¨
();

238 i‡(
∑ylﬂd
 !
INVALIDPAYLOAD
) {

239 
	`Log_¥öt1
(
Dügs_USER1
,

241 (
IArg
)
∑ylﬂd
);

242 
	`u£rFxn
(
∑ylﬂd
);

247 
	}
}

	@ti/ipc/rpmsg/InterruptProxy.h

37 #i‚de‡
ti_ùc_Ωmsg_I¡îru±Proxy__ö˛ude


38 
	#ti_ùc_Ωmsg_I¡îru±Proxy__ö˛ude


	)

40 #i‡
deföed
(
__˝lu•lus
)

44 
	~<ti/sysbios/hÆ/Hwi.h
>

46 
	#INVALIDPAYLOAD
 (0xFFFFFFFF)

	)

48 #i‡
deföed
(
M3_ONLY
Ë|| deföed(
SMP
)

49 
	~<ti/ùc/Ωmsg/I¡îru±Ipu.h
>

57 
	#I¡îru±Proxy_ötE«bÀ
 
I¡îru±Ipu_ötE«bÀ


	)

59 
	#I¡îru±Proxy_ötDißbÀ
 
I¡îru±Ipu_ötDißbÀ


	)

61 
	#I¡îru±Proxy_ötRegi°î
 
I¡îru±Ipu_ötRegi°î


	)

63 
	#I¡îru±Proxy_ötSíd
 
I¡îru±Ipu_ötSíd


	)

65 
	#I¡îru±Proxy_ötCÀ¨
 
I¡îru±Ipu_ötCÀ¨


	)

68 #i‡
deföed
(
DSP
)

69 
	~<ti/ùc/Ωmsg/I¡îru±D•.h
>

76 
	#I¡îru±Proxy_ötE«bÀ
 
I¡îru±D•_ötE«bÀ


	)

78 
	#I¡îru±Proxy_ötDißbÀ
 
I¡îru±D•_ötDißbÀ


	)

80 
	#I¡îru±Proxy_ötRegi°î
 
I¡îru±D•_ötRegi°î


	)

82 
	#I¡îru±Proxy_ötSíd
 
I¡îru±D•_ötSíd


	)

84 
	#I¡îru±Proxy_ötCÀ¨
 
I¡îru±D•_ötCÀ¨


	)

87 #i‡
deföed
(
__˝lu•lus
)

	@ti/ipc/rpmsg/MessageQCopy.c

41 
	#Regi°ry_CURDESC
 
ti_ùc_Ωmsg_MesßgeQC›y__Desc


	)

42 
	#MODULE_NAME
 "ti.ùc.Ωmsg.MesßgeQC›y"

	)

44 
	~<xdc/°d.h
>

45 
	~<xdc/ru¡ime/Sy°em.h
>

46 
	~<xdc/ru¡ime/Eº‹.h
>

47 
	~<xdc/ru¡ime/As£π.h
>

48 
	~<xdc/ru¡ime/Mem‹y.h
>

49 
	~<xdc/ru¡ime/Maö.h
>

50 
	~<xdc/ru¡ime/Regi°ry.h
>

51 
	~<xdc/ru¡ime/Log.h
>

52 
	~<xdc/ru¡ime/Dügs.h
>

54 
	~<ti/sysbios/BIOS.h
>

55 
	~<ti/sysbios/k∆/Swi.h
>

56 
	~<ti/sysbios/k∆/Sem≠h‹e.h
>

57 
	~<ti/sysbios/hóps/HópBuf.h
>

58 
	~<ti/sysbios/g©es/G©eSwi.h
>

60 
	~<ti/sdo/utûs/Li°.h
>

61 
	~<ti/ùc/Mu…iProc.h
>

63 
	~"MesßgeQC›y.h
"

64 
	~"VútQueue.h
"

72 
	#MAXMESSAGEQOBJECTS
 256

	)

73 
	#MAXMESSAGEBUFFERS
 512

	)

74 
	#MSGBUFFERSIZE
 512

75 
	#MAXHEAPSIZE
 (
MAXMESSAGEBUFFERS
 * 
MSGBUFFERSIZE
)

	)

76 
	#HEAPALIGNMENT
 8

	)

79 
	sMesßgeQC›y_Obje˘
 {

80 
UI¡32
 
	mqueueId
;

81 
Sem≠h‹e_H™dÀ
 
	m£mH™dÀ
;

82 
Li°_H™dÀ
 
	mqueue
;

83 
Boﬁ
 
	munblocked
;

84 } 
	tMesßgeQC›y_Obje˘
;

87 
	sMesßgeQC›y_ModuÀ
 {

89 
G©eSwi_H™dÀ
 
	mg©eSwi
;

91 
MesßgeQC›y_Obje˘
 *
	mmsgqObje˘s
[
MAXMESSAGEQOBJECTS
];

93 
HópBuf_H™dÀ
 
	mhóp
;

94 } 
	tMesßgeQC›y_ModuÀ
;

97 
	sMesßgeQC›y_MsgHódî
 {

98 
Bôs32
 
	m§cAddr
;

99 
Bôs32
 
	md°Addr
;

100 
Bôs32
 
	mª£rved
;

101 
Bôs16
 
	md©aLí
;

102 
Bôs16
 
	mÊags
;

103 
UI¡8
 
	m∑ylﬂd
[];

104 } 
	tMesßgeQC›y_MsgHódî
;

106 
MesßgeQC›y_MsgHódî
 *
	tMesßgeQC›y_Msg
;

109 
	sQueue_ñem
 {

110 
Li°_EÀm
 
	mñem
;

111 
UI¡
 
	mÀn
;

112 
UI¡32
 
	m§c
;

113 
Ch¨
 
	md©a
[];

114 } 
	tQueue_ñem
;

117 
	sMesßgeQC›y_Tøn•‹t
 {

118 
Swi_H™dÀ
 
	mswiH™dÀ
;

119 
VútQueue_H™dÀ
 
	mvútQueue_toHo°
;

120 
VútQueue_H™dÀ
 
	mvútQueue_‰omHo°
;

121 
Sem≠h‹e_H™dÀ
 
	m£mH™dÀ_toHo°
;

122 } 
	tMesßgeQC›y_Tøn•‹t
;

126 
Regi°ry_Desc
 
	gRegi°ry_CURDESC
;

128 
MesßgeQC›y_ModuÀ
 
	gmoduÀ
;

129 
MesßgeQC›y_Tøn•‹t
 
	gå™•‹t
;

132 #¥agm®
DATA_ALIGN
 (
ªcv_buf„rs
, 
HEAPALIGNMENT
)

133 
UI¡8
 
	gªcv_buf„rs
[
MAXHEAPSIZE
];

136 
I¡
 
	gcurInô
 = 0;

137 
Sem≠h‹e_H™dÀ
 
MesßgeQC›y_£mH™dÀ
;

142 
	#FXNN
 "MesßgeQC›y_swiFxn"

	)

143 
Void
 
	$MesßgeQC›y_swiFxn
(
UArg
 
¨g0
, UArg 
¨g1
)

145 
I¡16
 
tokí
;

146 
MesßgeQC›y_Msg
 
msg
;

147 
UI¡16
 
d°Proc
 = 
	`Mu…iProc_£lf
();

148 
Boﬁ
 
u£dBufAdded
 = 
FALSE
;

149 
I¡
 
Àn
;

151 
	`Log_¥öt0
(
Dügs_ENTRY
, "--> "
FXNN
);

154 (
tokí
 = 
	`VútQueue_gëAvaûBuf
(
å™•‹t
.
vútQueue_‰omHo°
,

155 (
Void
 **)&
msg
, &
Àn
)) >= 0) {

157 
	`Log_¥öt3
(
Dügs_INFO
, 
FXNN
": \n\tReceived msg: from: 0x%x, "

159 (
IArg
)
msg
->
§cAddr
, (IArg)msg->
d°Addr
, (IArg)msg->
d©aLí
);

162 
	`MesßgeQC›y_£nd
(
d°Proc
, 
msg
->
d°Addr
, msg->
§cAddr
,

163 (
På
)
msg
->
∑ylﬂd
, msg->
d©aLí
);

165 
	`VútQueue_addU£dBuf
(
å™•‹t
.
vútQueue_‰omHo°
, 
tokí
,

166 
RP_MSG_BUF_SIZE
);

167 
u£dBufAdded
 = 
TRUE
;

170 i‡(
u£dBufAdded
) {

172 
	`VútQueue_kick
(
å™•‹t
.
vútQueue_‰omHo°
);

174 
	`Log_¥öt0
(
Dügs_EXIT
, "<-- "
FXNN
);

175 
	}
}

176 #unde‡
FXNN


179 
	#FXNN
 "ˇŒback_avaûBufRódy"

	)

180 
Void
 
	$ˇŒback_avaûBufRódy
(
VútQueue_H™dÀ
 
vq
)

183 i‡(
vq
 =
å™•‹t
.
vútQueue_‰omHo°
) {

185 
	`Log_¥öt0
(
Dügs_INFO
, 
FXNN
": virtQueue_fromHost kicked");

186 
	`Swi_po°
(
å™•‹t
.
swiH™dÀ
);

188 i‡(
vq
 =
å™•‹t
.
vútQueue_toHo°
) {

192 
	`Sem≠h‹e_po°
(
å™•‹t
.
£mH™dÀ_toHo°
);

193 
	`Log_¥öt0
(
Dügs_INFO
, 
FXNN
": virtQueue_toHost kicked");

195 
	}
}

196 #unde‡
FXNN


208 
	#FXNN
 "MesßgeQC›y_öô"

	)

209 
Void
 
	$MesßgeQC›y_öô
(
UI¡16
 
ªmŸeProcId
)

211 
G©eSwi_P¨ams
 
g©ePrms
;

212 
HópBuf_P¨ams
 
¥ms
;

213 
i
;

214 
Regi°ry_Resu…
 
ªsu…
;

216 
	`Sem≠h‹e_≥nd
(
MesßgeQC›y_£mH™dÀ
, 
BIOS_WAIT_FOREVER
);

217 i‡(
curInô
++) {

218 
	`Log_¥öt1
(
Dügs_ENTRY
, "--> "
FXNN
": (remoteProcId=%d)",

219 (
IArg
)
ªmŸeProcId
);

220 
exô
;

224 
ªsu…
 = 
	`Regi°ry_addModuÀ
(&
Regi°ry_CURDESC
, 
MODULE_NAME
);

225 
	`As£π_isTrue
(
ªsu…
 =
Regi°ry_SUCCESS
, (
As£π_Id
)
NULL
);

228 
	`Log_¥öt1
(
Dügs_ENTRY
, "--> "
FXNN
": (remoteProcId=%d)",

229 (
IArg
)
ªmŸeProcId
);

232 
	`G©eSwi_P¨ams_öô
(&
g©ePrms
);

233 
moduÀ
.
g©eSwi
 = 
	`G©eSwi_¸óã
(&
g©ePrms
, 
NULL
);

236 
i
 = 0; i < 
MAXMESSAGEQOBJECTS
; i++) {

237 
moduÀ
.
msgqObje˘s
[
i
] = 
NULL
;

240 
	`HópBuf_P¨ams_öô
(&
¥ms
);

241 
¥ms
.
blockSize
 = 
MSGBUFFERSIZE
;

242 
¥ms
.
numBlocks
 = 
MAXMESSAGEBUFFERS
;

243 
¥ms
.
buf
 = 
ªcv_buf„rs
;

244 
¥ms
.
bufSize
 = 
MAXHEAPSIZE
;

245 
¥ms
.
Æign
 = 
HEAPALIGNMENT
;

246 
moduÀ
.
hóp
 = 
	`HópBuf_¸óã
(&
¥ms
, 
NULL
);

247 i‡(
moduÀ
.
hóp
 == 0) {

248 
	`Sy°em_ab‹t
("MessageQCopy_init: HeapBuf_createÑeturned 0\n");

250 
å™•‹t
.
£mH™dÀ_toHo°
 = 
	`Sem≠h‹e_¸óã
(0, 
NULL
, NULL);

258 
	`VútQueue_°¨tup
();

264 
å™•‹t
.
vútQueue_toHo°
 = 
	`VútQueue_¸óã
(
ˇŒback_avaûBufRódy
,

265 
ªmŸeProcId
,

266 
ID_SELF_TO_A9
);

267 
å™•‹t
.
vútQueue_‰omHo°
 = 
	`VútQueue_¸óã
(
ˇŒback_avaûBufRódy
,

268 
ªmŸeProcId
,

269 
ID_A9_TO_SELF
);

272 
å™•‹t
.
swiH™dÀ
 = 
	`Swi_¸óã
(
MesßgeQC›y_swiFxn
, 
NULL
, NULL);

274 
exô
:

275 
	`Sem≠h‹e_po°
(
MesßgeQC›y_£mH™dÀ
);

277 
	`Log_¥öt0
(
Dügs_EXIT
, "<-- "
FXNN
);

278 
	}
}

279 #unde‡
FXNN


284 
	#FXNN
 "MesßgeQC›y_föÆize"

	)

285 
Void
 
	$MesßgeQC›y_föÆize
()

287 
	`Log_¥öt0
(
Dügs_ENTRY
, "--> "
FXNN
);

289 
	`Sem≠h‹e_≥nd
(
MesßgeQC›y_£mH™dÀ
, 
BIOS_WAIT_FOREVER
);

290 i‡(!
curInô
 || --curInit) {

291 
exô
;

295 
	`HópBuf_dñëe
(&(
moduÀ
.
hóp
));

297 
	`Swi_dñëe
(&(
å™•‹t
.
swiH™dÀ
));

299 
	`G©eSwi_dñëe
(&
moduÀ
.
g©eSwi
);

301 
exô
:

302 
	`Sem≠h‹e_po°
(
MesßgeQC›y_£mH™dÀ
);

304 
	`Log_¥öt0
(
Dügs_EXIT
, "<-- "
FXNN
);

305 
	}
}

306 #unde‡
FXNN


311 
	#FXNN
 "MesßgeQC›y_¸óã"

	)

312 
MesßgeQC›y_H™dÀ
 
	$MesßgeQC›y_¸óã
(
UI¡32
 
ª£rved
, UI¡32 * 
ídpoöt
)

314 
MesßgeQC›y_Obje˘
 *
obj
 = 
NULL
;

315 
Boﬁ
 
found
 = 
FALSE
;

316 
I¡
 
i
;

317 
UI¡16
 
queueIndex
 = 0;

318 
IArg
 
key
;

320 
	`Log_¥öt2
(
Dügs_ENTRY
, "--> "
FXNN
": (reserved=%d,Éndpoint=0x%x)",

321 (
IArg
)
ª£rved
, (IArg)
ídpoöt
);

323 
	`As£π_isTrue
((
curInô
 > 0Ë, 
NULL
);

325 
key
 = 
	`G©eSwi_íãr
(
moduÀ
.
g©eSwi
);

327 i‡(
ª£rved
 =
MesßgeQC›y_ASSIGN_ANY
) {

329 
i
 = 
MesßgeQC›y_MAX_RESERVED_ENDPOINT
 + 1;

330 (
i
 < 
MAXMESSAGEQOBJECTS
Ë&& (
found
 =
FALSE
) ; i++) {

331 i‡(
moduÀ
.
msgqObje˘s
[
i
] =
NULL
) {

332 
queueIndex
 = 
i
;

333 
found
 = 
TRUE
;

338 i‡((
queueIndex
 = 
ª£rved
Ë<
MesßgeQC›y_MAX_RESERVED_ENDPOINT
) {

339 i‡(
moduÀ
.
msgqObje˘s
[
queueIndex
] =
NULL
) {

340 
found
 = 
TRUE
;

344 i‡(
found
) {

345 
obj
 = 
	`Mem‹y_Æloc
(
NULL
, (
MesßgeQC›y_Obje˘
), 0, NULL);

346 i‡(
obj
 !
NULL
) {

348 
obj
->
£mH™dÀ
 = 
	`Sem≠h‹e_¸óã
(0, 
NULL
, NULL);

351 
obj
->
queue
 = 
	`Li°_¸óã
(
NULL
, NULL);

354 
obj
->
queueId
 = 
queueIndex
;

355 
moduÀ
.
msgqObje˘s
[
queueIndex
] = 
obj
;

358 
obj
->
unblocked
 = 
FALSE
;

360 *
ídpoöt
 = 
queueIndex
;

361 
	`Log_¥öt1
(
Dügs_LIFECYCLE
, 
FXNN
":ÉndPt created: %d",

362 (
IArg
)
queueIndex
);

366 
	`G©eSwi_Àave
(
moduÀ
.
g©eSwi
, 
key
);

368 
	`Log_¥öt1
(
Dügs_EXIT
, "<-- "
FXNN
": 0x%x", (
IArg
)
obj
);

369  (
obj
);

370 
	}
}

371 #unde‡
FXNN


376 
	#FXNN
 "MesßgeQC›y_dñëe"

	)

377 
I¡
 
	$MesßgeQC›y_dñëe
(
MesßgeQC›y_H™dÀ
 *
h™dÀPå
)

379 
I¡
 
°©us
 = 
MesßgeQC›y_S_SUCCESS
;

380 
MesßgeQC›y_Obje˘
 *
obj
;

381 
Queue_ñem
 *
∑ylﬂd
;

382 
IArg
 
key
;

384 
	`Log_¥öt1
(
Dügs_ENTRY
, "--> "
FXNN
": (h™dÀPå=0x%x)", (
IArg
)
h™dÀPå
);

386 
	`As£π_isTrue
((
curInô
 > 0Ë, 
NULL
);

388 i‡(
h™dÀPå
 && (
obj
 = (
MesßgeQC›y_Obje˘
 *)(*handlePtr))) {

390 
	`Sem≠h‹e_dñëe
(&(
obj
->
£mH™dÀ
));

393 (
∑ylﬂd
 = (
Queue_ñem
 *)
	`Li°_gë
(
obj
->
queue
)Ë!
NULL
) {

394 
	`HópBuf_‰ì
(
moduÀ
.
hóp
, (
På
)
∑ylﬂd
, 
MSGBUFFERSIZE
);

397 
	`Li°_dñëe
(&(
obj
->
queue
));

400 
key
 = 
	`G©eSwi_íãr
(
moduÀ
.
g©eSwi
);

401 
moduÀ
.
msgqObje˘s
[
obj
->
queueId
] = 
NULL
;

402 
	`G©eSwi_Àave
(
moduÀ
.
g©eSwi
, 
key
);

404 
	`Log_¥öt1
(
Dügs_LIFECYCLE
, 
FXNN
":ÉndPt deleted: %d",

405 (
IArg
)
obj
->
queueId
);

408 
	`Mem‹y_‰ì
(
NULL
, 
obj
, (
MesßgeQC›y_Obje˘
));

410 *
h™dÀPå
 = 
NULL
;

413 
	`Log_¥öt1
(
Dügs_EXIT
, "<-- "
FXNN
": %d", (
IArg
)
°©us
);

414 (
°©us
);

415 
	}
}

416 #unde‡
FXNN


421 
	#FXNN
 "MesßgeQC›y_ªcv"

	)

422 
I¡
 
	$MesßgeQC›y_ªcv
(
MesßgeQC›y_H™dÀ
 
h™dÀ
, 
På
 
d©a
, 
UI¡16
 *
Àn
,

423 
UI¡32
 *
ΩlyEnd±
, 
UI¡
 
timeout
)

425 
I¡
 
°©us
 = 
MesßgeQC›y_S_SUCCESS
;

426 
MesßgeQC›y_Obje˘
 *
obj
 = (MesßgeQC›y_Obje˘ *)
h™dÀ
;

427 
Boﬁ
 
£mSètus
;

428 
Queue_ñem
 *
∑ylﬂd
;

430 
	`Log_¥öt5
(
Dügs_ENTRY
, "--> "
FXNN
": (handle=0x%x, data=0x%x,Üen=0x%x,"

431 "ΩlyEnd±=0x%x,Åimeout=%d)", (
IArg
)
h™dÀ
, (IArg)
d©a
,

432 (
IArg
)
Àn
, (IArg)
ΩlyEnd±
, (IArg)
timeout
);

434 
	`As£π_isTrue
((
curInô
 > 0Ë, 
NULL
);

437 
	`Swi_po°
(
å™•‹t
.
swiH™dÀ
);

440 
£mSètus
 = 
	`Sem≠h‹e_≥nd
(
obj
->
£mH™dÀ
, 
timeout
);

442 i‡(
£mSètus
 =
FALSE
) {

443 
°©us
 = 
MesßgeQC›y_E_TIMEOUT
;

444 
	`Log_¥öt0
(
Dügs_STATUS
, 
FXNN
": SemÖendÅimeout!");

446 i‡(
obj
->
unblocked
) {

447 
°©us
 = 
MesßgeQC›y_E_UNBLOCKED
;

450 
∑ylﬂd
 = (
Queue_ñem
 *)
	`Li°_gë
(
obj
->
queue
);

452 i‡(!
∑ylﬂd
) {

453 
	`Sy°em_ab‹t
("MessageQCopy_recv: gotá NULLÖayload\n");

457 i‡(
°©us
 =
MesßgeQC›y_S_SUCCESS
) {

459 
	`mem˝y
(
d©a
, 
∑ylﬂd
->d©a,Öaylﬂd->
Àn
);

460 *
Àn
 = 
∑ylﬂd
->len;

461 *
ΩlyEnd±
 = 
∑ylﬂd
->
§c
;

463 
	`HópBuf_‰ì
(
moduÀ
.
hóp
, (
På
)
∑ylﬂd
,

464 (
∑ylﬂd
->
Àn
 + (
Queue_ñem
)));

467 
	`Log_¥öt1
(
Dügs_EXIT
, "<-- "
FXNN
": %d", (
IArg
)
°©us
);

468  (
°©us
);

469 
	}
}

470 #unde‡
FXNN


475 
	#FXNN
 "MesßgeQC›y_£nd"

	)

476 
I¡
 
	$MesßgeQC›y_£nd
(
UI¡16
 
d°Proc
,

477 
UI¡32
 
d°End±
,

478 
UI¡32
 
§cEnd±
,

479 
På
 
d©a
,

480 
UI¡16
 
Àn
)

482 
I¡
 
°©us
 = 
MesßgeQC›y_S_SUCCESS
;

483 
MesßgeQC›y_Obje˘
 *
obj
;

484 
I¡16
 
tokí
 = 0;

485 
MesßgeQC›y_Msg
 
msg
;

486 
Queue_ñem
 *
∑ylﬂd
;

487 
UI¡
 
size
;

488 
IArg
 
key
;

489 
I¡
 
Àngth
;

491 
	`Log_¥öt5
(
Dügs_ENTRY
, "--> "
FXNN
": (dstProc=%d, dstEndpt=%d, "

492 "§cEnd±=%d, d©a=0x%x,Üí=%d", (
IArg
)
d°Proc
, (IArg)
d°End±
,

493 (
IArg
)
§cEnd±
, (IArg)
d©a
, (IArg)
Àn
);

495 
	`As£π_isTrue
((
curInô
 > 0Ë, 
NULL
);

497 i‡(
d°Proc
 !
	`Mu…iProc_£lf
()) {

500 
key
 = 
	`G©eSwi_íãr
(
moduÀ
.
g©eSwi
);

501 
	`Sem≠h‹e_ª£t
(
å™•‹t
.
£mH™dÀ_toHo°
, 0);

502 
tokí
 = 
	`VútQueue_gëAvaûBuf
(
å™•‹t
.
vútQueue_toHo°
,

503 (
Void
 **)&
msg
, &
Àngth
);

504 
	`G©eSwi_Àave
(
moduÀ
.
g©eSwi
, 
key
);

505 } 
tokí
 < 0 && 
	`Sem≠h‹e_≥nd
(
å™•‹t
.
£mH™dÀ_toHo°
,

506 
BIOS_WAIT_FOREVER
));

507 i‡(
tokí
 >= 0) {

509 
	`mem˝y
(
msg
->
∑ylﬂd
, 
d©a
, 
Àn
);

510 
msg
->
d©aLí
 = 
Àn
;

511 
msg
->
d°Addr
 = 
d°End±
;

512 
msg
->
§cAddr
 = 
§cEnd±
;

513 
msg
->
Êags
 = 0;

514 
msg
->
ª£rved
 = 0;

516 
key
 = 
	`G©eSwi_íãr
(
moduÀ
.
g©eSwi
);

517 
	`VútQueue_addU£dBuf
(
å™•‹t
.
vútQueue_toHo°
, 
tokí
,

518 
RP_MSG_BUF_SIZE
);

519 
	`VútQueue_kick
(
å™•‹t
.
vútQueue_toHo°
);

520 
	`G©eSwi_Àave
(
moduÀ
.
g©eSwi
, 
key
);

523 
°©us
 = 
MesßgeQC›y_E_FAIL
;

524 
	`Log_¥öt0
(
Dügs_STATUS
, 
FXNN
": getAvailBuf failed!");

531 
key
 = 
	`G©eSwi_íãr
(
moduÀ
.
g©eSwi
);

532 
obj
 = 
moduÀ
.
msgqObje˘s
[
d°End±
];

533 
	`G©eSwi_Àave
(
moduÀ
.
g©eSwi
, 
key
);

535 i‡(
obj
 =
NULL
) {

536 
	`Log_¥öt1
(
Dügs_STATUS
, 
FXNN
":Ço object forÉndpoint: %d",

537 (
IArg
)
d°End±
);

538 
°©us
 = 
MesßgeQC›y_E_NOENDPT
;

539  
°©us
;

543 
size
 = 
Àn
 + (
Queue_ñem
);

546 
key
 = 
	`G©eSwi_íãr
(
moduÀ
.
g©eSwi
);

547 
∑ylﬂd
 = (
Queue_ñem
 *)
	`HópBuf_Æloc
(
moduÀ
.
hóp
, 
size
, 0, 
NULL
);

548 
	`G©eSwi_Àave
(
moduÀ
.
g©eSwi
, 
key
);

550 i‡(
∑ylﬂd
 !
NULL
) {

551 
	`mem˝y
(
∑ylﬂd
->
d©a
, d©a, 
Àn
);

552 
∑ylﬂd
->
Àn
 =Üen;

553 
∑ylﬂd
->
§c
 = 
§cEnd±
;

556 
	`Li°_put
(
obj
->
queue
, (
Li°_EÀm
 *)
∑ylﬂd
);

557 
	`Sem≠h‹e_po°
(
obj
->
£mH™dÀ
);

560 
°©us
 = 
MesßgeQC›y_E_MEMORY
;

561 
	`Log_¥öt0
(
Dügs_STATUS
, 
FXNN
": HeapBuf_alloc failed!");

565 
	`Log_¥öt1
(
Dügs_EXIT
, "<-- "
FXNN
": %d", (
IArg
)
°©us
);

566  (
°©us
);

567 
	}
}

568 #unde‡
FXNN


573 
	#FXNN
 "MesßgeQC›y_unblock"

	)

574 
Void
 
	$MesßgeQC›y_unblock
(
MesßgeQC›y_H™dÀ
 
h™dÀ
)

576 
MesßgeQC›y_Obje˘
 *
obj
 = (MesßgeQC›y_Obje˘ *)
h™dÀ
;

578 
	`Log_¥öt1
(
Dügs_ENTRY
, "--> "
FXNN
": (h™dÀ=0x%x)", (
IArg
)
h™dÀ
);

581 
obj
->
unblocked
 = 
TRUE
;

582 
	`Sem≠h‹e_po°
(
obj
->
£mH™dÀ
);

583 
	`Log_¥öt0
(
Dügs_EXIT
, "<-- "
FXNN
);

584 
	}
}

585 #unde‡
FXNN


	@ti/ipc/rpmsg/MessageQCopy.h

74 #i‚de‡
ti_ùc_MesßgeQC›y__ö˛ude


75 
	#ti_ùc_MesßgeQC›y__ö˛ude


	)

77 #i‡
deföed
 (
__˝lu•lus
)

90 
	#MesßgeQC›y_FOREVER
 ~(0)

	)

96 
	#MesßgeQC›y_S_SUCCESS
 0

	)

102 
	#MesßgeQC›y_E_FAIL
 -1

	)

108 
	#MesßgeQC›y_E_MEMORY
 -3

	)

114 
	#MesßgeQC›y_E_TIMEOUT
 -6

	)

120 
	#MesßgeQC›y_E_NOENDPT
 -7

	)

126 
	#MesßgeQC›y_E_UNBLOCKED
 -19

	)

132 
	#MesßgeQC›y_MAX_RESERVED_ENDPOINT
 100

	)

138 
	#MesßgeQC›y_ASSIGN_ANY
 0xFFFFFFFF

	)

142 
MesßgeQC›y_Obje˘
 *
	tMesßgeQC›y_H™dÀ
;

157 
Void
 
MesßgeQC›y_öô
(
UI¡16
 
ªmŸeProcId
);

163 
Void
 
MesßgeQC›y_föÆize
();

184 
MesßgeQC›y_H™dÀ
 
MesßgeQC›y_¸óã
(
UI¡32
 
ª£rved
, UI¡32 * 
ídpoöt
);

218 
I¡
 
MesßgeQC›y_ªcv
(
MesßgeQC›y_H™dÀ
 
h™dÀ
, 
På
 
d©a
, 
UI¡16
 *
Àn
,

219 
UI¡32
 *
ΩlyEnd±
, 
UI¡
 
timeout
);

239 
I¡
 
MesßgeQC›y_£nd
(
UI¡16
 
d°Proc
,

240 
UI¡32
 
d°End±
,

241 
UI¡32
 
§cEnd±
,

242 
På
 
d©a
,

243 
UI¡16
 
Àn
);

258 
I¡
 
MesßgeQC›y_dñëe
(
MesßgeQC›y_H™dÀ
 *
h™dÀPå
);

276 
Void
 
MesßgeQC›y_unblock
(
MesßgeQC›y_H™dÀ
 
h™dÀ
);

278 #i‡
deföed
 (
__˝lu•lus
)

	@ti/ipc/rpmsg/OffloadM3.c

38 
	~<xdc/°d.h
>

39 
	~<xdc/cfg/globÆ.h
>

40 
	~<xdc/ru¡ime/Sy°em.h
>

41 
	~<xdc/ru¡ime/Dügs.h
>

42 
	~<xdc/ru¡ime/Log.h
>

43 
	~<xdc/ru¡ime/k∆/Thªad.h
>

45 
	~<ti/sysbios/BIOS.h
>

46 
	~<ti/sysbios/k∆/Task.h
>

47 
	~<ti/sysbios/k∆/Sem≠h‹e.h
>

49 
	~<ti/ùc/Mu…iProc.h
>

51 
	#RP_MSG_OFFLOAD_BASE
 0xF0F0F0F0

	)

54 
	mOFFLOAD_CREATE_IDX
 = 0,

55 
	mOFFLOAD_DELETE_IDX
 = 1,

56 
	mOFFLOAD_AC_IDX
 = 2,

57 
	mOFFLOAD_VS_IDX
 = 3,

58 
	mOFFLOAD_MM_IDX
 = 4,

59 
	mOFFLOAD_MAX_IDX
 = 5

63 
Void
 (*
fxn
)(
	mVoid
 *);

64 
Void
 *
	md©a
;

65 
I¡
 
	m°©us
;

66 } 
	tMSP_PAYLOAD_TYPE
;

69 
Boﬁ
 
	m¸óãd
;

70 
Sem≠h‹e_H™dÀ
 
	mmuãx
;

71 
Task_H™dÀ
 
	mèsks
[
OFFLOAD_MAX_IDX
];

72 
Sem≠h‹e_H™dÀ
 
	m£m≠h‹es
[
OFFLOAD_MAX_IDX
];

73 } 
	tOfÊﬂdM3_moduÀ
;

75 #¥agm®
DATA_SECTION
(
öãrm3PaylﬂdAC
, ".interm3offload")

76 
MSP_PAYLOAD_TYPE
 
	göãrm3PaylﬂdAC
;

77 #¥agm®
DATA_SECTION
(
öãrm3PaylﬂdVS
, ".interm3offload")

78 
MSP_PAYLOAD_TYPE
 
	göãrm3PaylﬂdVS
;

79 #¥agm®
DATA_SECTION
(
öãrm3PaylﬂdMM
, ".interm3offload")

80 
MSP_PAYLOAD_TYPE
 
	göãrm3PaylﬂdMM
;

82 
OfÊﬂdM3_moduÀ
 
	gmoduÀ
;

83 
UI¡16
 
	gsysm3ProcId
;

91 
I¡
 
	$OfÊﬂdM3_¥o˚ssSysM3Tasks
(
UArg
 
msg
)

93 
UI¡
 
ödex
 = (UI¡)
msg
 - 
RP_MSG_OFFLOAD_BASE
;

94 i‡(
ödex
 >
OFFLOAD_MAX_IDX
)

97 
	`Sem≠h‹e_po°
(
moduÀ
.
£m≠h‹es
[
ödex
]);

99 
	}
}

101 
Void
 
ölöe
 
	$Muãx_íãr
()

103 
	`Sem≠h‹e_≥nd
(
moduÀ
.
muãx
, 
BIOS_WAIT_FOREVER
);

104 
	}
}

106 
Void
 
ölöe
 
	$Muãx_Àave
()

108 
	`Sem≠h‹e_po°
(
moduÀ
.
muãx
);

109 
	}
}

111 
Void
 
	$OfÊﬂdM3_w‹kîTask
(
UArg
 
£m
, UArg 
fxn
)

113 
Sem≠h‹e_H™dÀ
 
£mH™dÀ
 = (Sem≠h‹e_H™dÀ)
£m
;

114 
MSP_PAYLOAD_TYPE
 *
∑ylﬂd
 = (MSP_PAYLOAD_TYPE *)
fxn
;

117 
	`Sem≠h‹e_≥nd
(
£mH™dÀ
, 
BIOS_WAIT_FOREVER
);

118 
∑ylﬂd
->
	`fxn
’aylﬂd->
d©a
);

119 
∑ylﬂd
->
°©us
 = 0;

121 
	}
}

123 
Void
 
	$OfÊﬂdM3_¸óãTask
(
UArg
 
£m
, UArg 
¨g1
)

125 
Sem≠h‹e_H™dÀ
 
£mH™dÀ
 = (Sem≠h‹e_H™dÀ)
£m
;

126 
Task_P¨ams
 
∑øms
;

127 
I¡
 
i
;

130 
	`Sem≠h‹e_≥nd
(
£mH™dÀ
, 
BIOS_WAIT_FOREVER
);

132 
	`Muãx_íãr
();

133 i‡(!
moduÀ
.
¸óãd
) {

134 
i
 = 
OFFLOAD_AC_IDX
; i < 
OFFLOAD_MAX_IDX
; i++) {

135 
moduÀ
.
£m≠h‹es
[
i
] = 
	`Sem≠h‹e_¸óã
(0, 
NULL
, NULL);

138 
	`Task_P¨ams_öô
(&
∑øms
);

139 
∑øms
.
ö°™˚
->
«me
 = "workerTaskAC";

140 
∑øms
.
¥i‹ôy
 = 
xdc_ru¡ime_k∆_Thªad_Pri‹ôy_NORMAL
;

141 
∑øms
.
¨g0
 = (
UArg
)
moduÀ
.
£m≠h‹es
[
OFFLOAD_AC_IDX
];

142 
∑øms
.
¨g1
 = (
UArg
)&
öãrm3PaylﬂdAC
;

143 
moduÀ
.
èsks
[
OFFLOAD_AC_IDX
] = 
	`Task_¸óã
(
OfÊﬂdM3_w‹kîTask
, &
∑øms
, 
NULL
);

145 
	`Task_P¨ams_öô
(&
∑øms
);

146 
∑øms
.
ö°™˚
->
«me
 = "workerTaskVS";

147 
∑øms
.
¥i‹ôy
 = 
xdc_ru¡ime_k∆_Thªad_Pri‹ôy_NORMAL
;

148 
∑øms
.
¨g0
 = (
UArg
)
moduÀ
.
£m≠h‹es
[
OFFLOAD_VS_IDX
];

149 
∑øms
.
¨g1
 = (
UArg
)&
öãrm3PaylﬂdVS
;

150 
moduÀ
.
èsks
[
OFFLOAD_VS_IDX
] = 
	`Task_¸óã
(
OfÊﬂdM3_w‹kîTask
, &
∑øms
, 
NULL
);

152 
	`Task_P¨ams_öô
(&
∑øms
);

154 
∑øms
.
ö°™˚
->
«me
 = "workerTaskMM";

155 
∑øms
.
¥i‹ôy
 = 
xdc_ru¡ime_k∆_Thªad_Pri‹ôy_BELOW_NORMAL
;

156 
∑øms
.
¨g0
 = (
UArg
)
moduÀ
.
£m≠h‹es
[
OFFLOAD_MM_IDX
];

157 
∑øms
.
¨g1
 = (
UArg
)&
öãrm3PaylﬂdMM
;

158 
moduÀ
.
èsks
[
OFFLOAD_MM_IDX
] = 
	`Task_¸óã
(
OfÊﬂdM3_w‹kîTask
, &
∑øms
, 
NULL
);

160 
moduÀ
.
¸óãd
 = 
TRUE
;

162 
	`Muãx_Àave
();

164 
	}
}

166 
Void
 
	$OfÊﬂdM3_dñëeTask
(
UArg
 
£m
, UArg 
¨g1
)

168 
Sem≠h‹e_H™dÀ
 
£mH™dÀ
 = (Sem≠h‹e_H™dÀ)
£m
;

169 
I¡
 
i
;

172 
	`Sem≠h‹e_≥nd
(
£mH™dÀ
, 
BIOS_WAIT_FOREVER
);

174 
	`Muãx_íãr
();

175 i‡(
moduÀ
.
¸óãd
) {

181 
i
 = 
OFFLOAD_AC_IDX
; i < 
OFFLOAD_MAX_IDX
; i++) {

182 
	`Task_dñëe
(&
moduÀ
.
èsks
[
i
]);

183 
	`Sem≠h‹e_dñëe
(&
moduÀ
.
£m≠h‹es
[
i
]);

184 
moduÀ
.
èsks
[
i
] = 
NULL
;

185 
moduÀ
.
£m≠h‹es
[
i
] = 
NULL
;

187 
moduÀ
.
¸óãd
 = 
FALSE
;

189 
	`Muãx_Àave
();

191 
	}
}

198 
Void
 
	$OfÊﬂdM3_öô
()

200 
Task_P¨ams
 
èskP¨ams
;

201 
Sem≠h‹e_P¨ams
 
muãxP¨ams
;

203 
sysm3ProcId
 = 
	`Mu…iProc_gëId
("CORE0");

204 i‡(
	`Mu…iProc_£lf
(Ë!
sysm3ProcId
)

207 
	`Sem≠h‹e_P¨ams_öô
(&
muãxP¨ams
);

208 
muãxP¨ams
.
mode
 = 
Sem≠h‹e_Mode_BINARY
;

209 
moduÀ
.
muãx
 = 
	`Sem≠h‹e_¸óã
(1, 
NULL
, NULL);

211 
moduÀ
.
¸óãd
 = 
FALSE
;

212 
moduÀ
.
£m≠h‹es
[
OFFLOAD_CREATE_IDX
] = 
	`Sem≠h‹e_¸óã
(0, 
NULL
, NULL);

213 
moduÀ
.
£m≠h‹es
[
OFFLOAD_DELETE_IDX
] = 
	`Sem≠h‹e_¸óã
(0, 
NULL
, NULL);

215 
	`Task_P¨ams_öô
(&
èskP¨ams
);

216 
èskP¨ams
.
ö°™˚
->
«me
 = "OffloadM3_createTask";

217 
èskP¨ams
.
¥i‹ôy
 = 
xdc_ru¡ime_k∆_Thªad_Pri‹ôy_NORMAL
;

218 
èskP¨ams
.
¨g0
 = (
UArg
)
moduÀ
.
£m≠h‹es
[
OFFLOAD_CREATE_IDX
];

219 
moduÀ
.
èsks
[
OFFLOAD_CREATE_IDX
] = 
	`Task_¸óã
(
OfÊﬂdM3_¸óãTask
, &
èskP¨ams
, 
NULL
);

221 
	`Task_P¨ams_öô
(&
èskP¨ams
);

222 
èskP¨ams
.
ö°™˚
->
«me
 = "OffloadM3_deleteTask";

223 
èskP¨ams
.
¥i‹ôy
 = 
xdc_ru¡ime_k∆_Thªad_Pri‹ôy_HIGHEST
;

224 
èskP¨ams
.
¨g0
 = (
UArg
)
moduÀ
.
£m≠h‹es
[
OFFLOAD_DELETE_IDX
];

225 
moduÀ
.
èsks
[
OFFLOAD_DELETE_IDX
] = 
	`Task_¸óã
(
OfÊﬂdM3_dñëeTask
, &
èskP¨ams
, 
NULL
);

226 
	}
}

233 
Void
 
	$OfÊﬂdM3_exô
()

235 i‡(
	`Mu…iProc_£lf
(Ë!
sysm3ProcId
)

238 
	`Task_dñëe
(&
moduÀ
.
èsks
[
OFFLOAD_CREATE_IDX
]);

239 
	`Task_dñëe
(&
moduÀ
.
èsks
[
OFFLOAD_DELETE_IDX
]);

241 
	`Sem≠h‹e_dñëe
(&
moduÀ
.
£m≠h‹es
[
OFFLOAD_CREATE_IDX
]);

242 
	`Sem≠h‹e_dñëe
(&
moduÀ
.
£m≠h‹es
[
OFFLOAD_DELETE_IDX
]);

243 
	`Sem≠h‹e_dñëe
(&
moduÀ
.
muãx
);

244 
	}
}

	@ti/ipc/rpmsg/VirtQueue.c

56 
	~<xdc/°d.h
>

57 
	~<xdc/ru¡ime/Sy°em.h
>

58 
	~<xdc/ru¡ime/Eº‹.h
>

59 
	~<xdc/ru¡ime/Mem‹y.h
>

60 
	~<xdc/ru¡ime/Log.h
>

61 
	~<xdc/ru¡ime/Dügs.h
>

63 
	~<ti/sysbios/hÆ/Hwi.h
>

64 
	~<ti/sysbios/k∆/Sem≠h‹e.h
>

65 
	~<ti/sysbios/k∆/Clock.h
>

66 
	~<ti/sysbios/BIOS.h
>

67 
	~<ti/sysbios/hÆ/Cache.h
>

69 
	~<ti/ùc/Ωmsg/I¡îru±Proxy.h
>

70 
	~<ti/ùc/Ωmsg/VútQueue.h
>

71 
	~<ti/pm/IpcPowî.h
>

73 
	~<ti/ùc/Mu…iProc.h
>

75 
	~<°rög.h
>

77 
	~"vútio_rög.h
"

80 
	#NUM_QUEUES
 4

	)

83 
	#IPC_MEM_VRING0
 0xA0000000

	)

84 
	#IPC_MEM_VRING1
 0xA0004000

	)

85 
	#IPC_MEM_VRING2
 0xA0008000

	)

86 
	#IPC_MEM_VRING3
 0xA000c000

	)

92 
	#VQ0_SIZE
 256

	)

93 
	#VQ1_SIZE
 256

	)

94 
	#VQ2_SIZE
 256

	)

95 
	#VQ3_SIZE
 256

	)

127 
	mRP_MSG_MBOX_READY
 = (
I¡
)0xFFFFFF00,

128 
	mRP_MSG_MBOX_STATE_CHANGE
 = (
I¡
)0xFFFFFF01,

129 
	mRP_MSG_MBOX_CRASH
 = (
I¡
)0xFFFFFF02,

130 
	mRP_MBOX_ECHO_REQUEST
 = (
I¡
)0xFFFFFF03,

131 
	mRP_MBOX_ECHO_REPLY
 = (
I¡
)0xFFFFFF04,

132 
	mRP_MBOX_ABORT_REQUEST
 = (
I¡
)0xFFFFFF05,

133 
	mRP_MSG_FLUSH_CACHE
 = (
I¡
)0xFFFFFF06,

134 
	mRP_MSG_BOOTINIT_DONE
 = (
I¡
)0xFFFFFF07,

135 
	mRP_MSG_HIBERNATION
 = (
I¡
)0xFFFFFF10,

136 
	mRP_MSG_HIBERNATION_FORCE
 = (
I¡
)0xFFFFFF11,

137 
	mRP_MSG_HIBERNATION_ACK
 = (
I¡
)0xFFFFFF12,

138 
	mRP_MSG_HIBERNATION_CANCEL
 = (
I¡
)0xFFFFFF13

141 
	#DIV_ROUND_UP
(
n
,
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

142 
	#RP_MSG_NUM_BUFS
 (
VQ0_SIZE
Ë

	)

143 
	#RP_MSG_BUF_SIZE
 (512)

	)

144 
	#RP_MSG_BUFS_SPACE
 (
RP_MSG_NUM_BUFS
 * 
RP_MSG_BUF_SIZE
 * 2)

	)

146 
	#PAGE_SIZE
 (4096)

	)

152 
	#RP_MSG_VRING_ALIGN
 (4096)

	)

155 
	#RP_MSG_RING_SIZE
 ((
	`DIV_ROUND_UP
(
	`vrög_size
(
RP_MSG_NUM_BUFS
, \

156 
RP_MSG_VRING_ALIGN
), 
PAGE_SIZE
)Ë* PAGE_SIZE)

	)

159 
	#RPMSG_IPC_MEM
 (
RP_MSG_BUFS_SPACE
 + 2 * 
RP_MSG_RING_SIZE
)

	)

161 
	#ID_SYSM3_TO_A9
 
ID_SELF_TO_A9


	)

162 
	#ID_A9_TO_SYSM3
 
ID_A9_TO_SELF


	)

163 
	#ID_DSP_TO_A9
 
ID_SELF_TO_A9


	)

164 
	#ID_A9_TO_DSP
 
ID_A9_TO_SELF


	)

165 
	#ID_APPM3_TO_A9
 200

	)

166 
	#ID_A9_TO_APPM3
 201

	)

168 
	sVútQueue_Obje˘
 {

170 
UI¡16
 
	mid
;

173 
VútQueue_ˇŒback
 
	mˇŒback
;

176 
vrög
 
	mvrög
;

179 
UI¡16
 
	mnum_‰ì
;

182 
UI¡16
 
	mœ°_avaû_idx
;

185 
UI¡16
 
	mœ°_u£d_idx
;

188 
UI¡16
 
	m¥ocId
;

189 } 
	tVútQueue_Obje˘
;

191 
VútQueue_Obje˘
 *
	gqueueRegi°ry
[
NUM_QUEUES
] = {
NULL
};

193 
UI¡16
 
	gho°ProcId
;

194 #i‚de‡
SMP


195 
UI¡16
 
	gd•ProcId
;

196 
UI¡16
 
	gsysm3ProcId
;

197 
UI¡16
 
	g≠pm3ProcId
;

200 #i‡
deföed
(
M3_ONLY
Ë&& !deföed(
SMP
)

201 
Void
 
OfÊﬂdM3_öô
();

202 
I¡
 
OfÊﬂdM3_¥o˚ssSysM3Tasks
(
UArg
 
msg
);

205 
ölöe
 
Void
 * 
	$m≠PAtoVA
(
UI¡
 
∑
)

207  (
Void
 *)((
∑
 & 0x000fffffU) | 0xa0000000U);

208 
	}
}

210 
ölöe
 
UI¡
 
	$m≠VAtoPA
(
Void
 * 
va
)

212  ((
UI¡
)
va
 & 0x000fffffU) | 0x9cf00000U;

213 
	}
}

218 
Void
 
	$VútQueue_kick
(
VútQueue_H™dÀ
 
vq
)

221 i‡(
vq
->
vrög
.
avaû
->
Êags
 & 
VRING_AVAIL_F_NO_INTERRUPT
) {

222 
	`Log_¥öt0
(
Dügs_USER1
,

227 
	`Log_¥öt2
(
Dügs_USER1
,

229 (
IArg
)
vq
->
¥ocId
, (IArg)vq->
id
);

230 
	`I¡îru±Proxy_ötSíd
(
vq
->
¥ocId
, vq->
id
);

231 
	}
}

236 
I¡
 
	$VútQueue_addU£dBuf
(
VútQueue_H™dÀ
 
vq
, 
I¡16
 
hód
, 
I¡
 
Àn
)

238 
vrög_u£d_ñem
 *
u£d
;

240 i‡((
hód
 > 
vq
->
vrög
.
num
) || (head < 0)) {

241 
	`Eº‹_øi£
(
NULL
, 
Eº‹_E_gíîic
, 0, 0);

248 
u£d
 = &
vq
->
vrög
.u£d->
rög
[vq->vrög.u£d->
idx
 % vq->vrög.
num
];

249 
u£d
->
id
 = 
hód
;

250 
u£d
->
Àn
 =Üen;

252 
vq
->
vrög
.
u£d
->
idx
++;

255 
	}
}

260 
I¡
 
	$VútQueue_addAvaûBuf
(
VútQueue_Obje˘
 *
vq
, 
Void
 *
buf
)

262 
UI¡16
 
avaû
;

264 i‡(
vq
->
num_‰ì
 == 0) {

266 
	`Eº‹_øi£
(
NULL
, 
Eº‹_E_gíîic
, 0, 0);

269 
vq
->
num_‰ì
--;

271 
avaû
 = 
vq
->
vrög
.avaû->
idx
++ % vq->vrög.
num
;

273 
vq
->
vrög
.
desc
[
avaû
].
addr
 = 
	`m≠VAtoPA
(
buf
);

274 
vq
->
vrög
.
desc
[
avaû
].
Àn
 = 
RP_MSG_BUF_SIZE
;

276  (
vq
->
num_‰ì
);

277 
	}
}

282 
Void
 *
	$VútQueue_gëU£dBuf
(
VútQueue_Obje˘
 *
vq
)

284 
UI¡16
 
hód
;

285 
Void
 *
buf
;

288 i‡(
vq
->
œ°_u£d_idx
 =vq->
vrög
.
u£d
->
idx
) {

289  (
NULL
);

292 
hód
 = 
vq
->
vrög
.
u£d
->
rög
[vq->
œ°_u£d_idx
 % vq->vrög.
num
].
id
;

293 
vq
->
œ°_u£d_idx
++;

295 
buf
 = 
	`m≠PAtoVA
(
vq
->
vrög
.
desc
[
hód
].
addr
);

297  (
buf
);

298 
	}
}

303 
I¡16
 
	$VútQueue_gëAvaûBuf
(
VútQueue_H™dÀ
 
vq
, 
Void
 **
buf
, 
I¡
 *
Àn
)

305 
UI¡16
 
hód
;

307 
	`Log_¥öt6
(
Dügs_USER1
, "getAvailBuf vq: 0x%x %d %d %d 0x%x 0x%x\n",

308 (
IArg
)
vq
, vq->
œ°_avaû_idx
, vq->
vrög
.
avaû
->
idx
, vq->vrög.
num
,

309 (
IArg
)&
vq
->
vrög
.
avaû
, (IArg)vq->vring.avail);

312 i‡(
vq
->
œ°_avaû_idx
 =vq->
vrög
.
avaû
->
idx
) {

314 
vq
->
vrög
.
u£d
->
Êags
 &~
VRING_USED_F_NO_NOTIFY
;

322 
hód
 = 
vq
->
vrög
.
avaû
->
rög
[vq->
œ°_avaû_idx
++ % vq->vrög.
num
];

324 *
buf
 = 
	`m≠PAtoVA
(
vq
->
vrög
.
desc
[
hód
].
addr
);

325 *
Àn
 = 
vq
->
vrög
.
desc
[
hód
].len;

327  (
hód
);

328 
	}
}

333 
Void
 
	$VútQueue_dißbÀCÆlback
(
VútQueue_Obje˘
 *
vq
)

336 
	`Log_¥öt0
(
Dügs_USER1
, "VirtQueue_disableCallback called.");

337 
	}
}

342 
Boﬁ
 
	$VútQueue_íabÀCÆlback
(
VútQueue_Obje˘
 *
vq
)

344 
	`Log_¥öt0
(
Dügs_USER1
, "VirtQueue_enableCallback called.");

347  (
FALSE
);

348 
	}
}

354 
Void
 
	$VútQueue_i§
(
UArg
 
msg
)

356 
VútQueue_Obje˘
 *
vq
;

358 
	`Log_¥öt1
(
Dügs_USER1
, "VútQueue_i§Ñe˚ived msg = 0x%x\n", 
msg
);

360 #i‚de‡
SMP


361 i‡(
	`Mu…iProc_£lf
(Ë=
sysm3ProcId
 || Mu…iProc_£lf(Ë=
d•ProcId
) {

363 
msg
) {

364 (
UI¡
)
RP_MSG_MBOX_READY
:

367 (
UI¡
)
RP_MBOX_ECHO_REQUEST
:

368 
	`I¡îru±Proxy_ötSíd
(
ho°ProcId
, (
UI¡
)(
RP_MBOX_ECHO_REPLY
));

371 (
UI¡
)
RP_MBOX_ABORT_REQUEST
:

373 
Fxn
 
f
 = (Fxn)0x0;

374 
	`Log_¥öt0
(
Dügs_USER1
, "Crash on demand ...\n");

375 
	`f
();

379 (
UI¡
)
RP_MSG_FLUSH_CACHE
:

380 
	`Cache_wbAŒ
();

383 (
UI¡
)
RP_MSG_HIBERNATION
:

384 i‡(
	`IpcPowî_ˇnHibî«ã
(Ë=
FALSE
) {

385 
	`I¡îru±Proxy_ötSíd
(
ho°ProcId
,

386 (
UI¡
)
RP_MSG_HIBERNATION_CANCEL
);

391 (
UI¡
)
RP_MSG_HIBERNATION_FORCE
:

392 #i‚de‡
SMP


394 i‡(
	`Mu…iProc_£lf
(Ë=
sysm3ProcId
) {

395 
	`I¡îru±Proxy_ötSíd
(
≠pm3ProcId
,

396 (
UI¡
)(
RP_MSG_HIBERNATION
));

400 
	`I¡îru±Proxy_ötSíd
(
ho°ProcId
,

401 (
UI¡
)
RP_MSG_HIBERNATION_ACK
);

402 
	`IpcPowî_su•íd
();

406 #i‡
	`deföed
(
M3_ONLY
Ë&& !deföed(
SMP
)

408 i‡(
	`OfÊﬂdM3_¥o˚ssSysM3Tasks
(
msg
))

418 #i‚de‡
SMP


420 i‡(
msg
 & 0xFFFF0000) {

421 i‡(
msg
 =(
UI¡
)
RP_MSG_HIBERNATION
) {

422 
	`IpcPowî_su•íd
();

427 i‡(
	`Mu…iProc_£lf
(Ë=
sysm3ProcId
 && (
msg
 =
ID_A9_TO_APPM3
 || msg =
ID_APPM3_TO_A9
)) {

428 
	`I¡îru±Proxy_ötSíd
(
≠pm3ProcId
, (
UI¡
)
msg
);

433 i‡(
msg
 >
NUM_QUEUES
) {

435 
	`Sy°em_¥ötf
("VirtQueue_isr: Invalid mailbox message 0x%x "

436 "ª˚ived\n", 
msg
);

440 
vq
 = 
queueRegi°ry
[
msg
];

441 i‡(
vq
) {

442 
vq
->
	`ˇŒback
(vq);

444 #i‚de‡
SMP


447 
	}
}

453 
VútQueue_Obje˘
 *
	$VútQueue_¸óã
(
VútQueue_ˇŒback
 
ˇŒback
,

454 
UI¡16
 
ªmŸeProcId
, 
I¡
 
vqId
)

456 
VútQueue_Obje˘
 *
vq
;

457 
Void
 *
vrögAddr
;

458 
Eº‹_Block
 
eb
;

460 
	`Eº‹_öô
(&
eb
);

462 
vq
 = 
	`Mem‹y_Æloc
(
NULL
, (
VútQueue_Obje˘
), 0, &
eb
);

463 i‡(!
vq
) {

464  (
NULL
);

467 
vq
->
ˇŒback
 = callback;

468 
vq
->
id
 = 
vqId
;

469 
vq
->
¥ocId
 = 
ªmŸeProcId
;

470 
vq
->
œ°_avaû_idx
 = 0;

472 #i‚de‡
SMP


473 i‡(
	`Mu…iProc_£lf
(Ë=
≠pm3ProcId
) {

476 
vq
->
id
 += 200;

480 
vq
->
id
) {

482 
ID_SELF_TO_A9
:

484 
vrögAddr
 = (
vrög
 *Ë
IPC_MEM_VRING0
;

486 
ID_A9_TO_SELF
:

488 
vrögAddr
 = (
vrög
 *Ë
IPC_MEM_VRING1
;

490 #i‚de‡
SMP


491 
ID_APPM3_TO_A9
:

493 
vrögAddr
 = (
vrög
 *Ë
IPC_MEM_VRING2
;

495 
ID_A9_TO_APPM3
:

497 
vrögAddr
 = (
vrög
 *Ë
IPC_MEM_VRING3
;

502 
	`Log_¥öt3
(
Dügs_USER1
,

503 "vrög: %d 0x%x (0x%x)\n", 
vq
->
id
, (
IArg
)
vrögAddr
,

504 
RP_MSG_RING_SIZE
);

506 
	`vrög_öô
(&(
vq
->
vrög
), 
RP_MSG_NUM_BUFS
, 
vrögAddr
, 
RP_MSG_VRING_ALIGN
);

512 i‡(
vq
->
¥ocId
 =
ho°ProcId
) {

513 
vq
->
vrög
.
u£d
->
Êags
 |
VRING_USED_F_NO_NOTIFY
;

516 
queueRegi°ry
[
vq
->
id
] = vq;

518  (
vq
);

519 
	}
}

524 
Void
 
	$VútQueue_°¨tup
()

526 
ho°ProcId
 = 
	`Mu…iProc_gëId
("HOST");

527 #i‚de‡
SMP


528 
d•ProcId
 = 
	`Mu…iProc_gëId
("DSP");

529 
sysm3ProcId
 = 
	`Mu…iProc_gëId
("CORE0");

530 
≠pm3ProcId
 = 
	`Mu…iProc_gëId
("CORE1");

534 
	`IpcPowî_öô
();

536 #i‡
	`deföed
(
M3_ONLY
Ë&& !deföed(
SMP
)

537 i‡(
	`Mu…iProc_£lf
(Ë=
sysm3ProcId
) {

538 
	`OfÊﬂdM3_öô
();

542 
	`I¡îru±Proxy_ötRegi°î
(
VútQueue_i§
);

543 
	}
}

548 
Void
 
	$VútQueue_po°CøshToMaûbox
(
Void
)

550 
	`I¡îru±Proxy_ötSíd
(0, (
UI¡
)
RP_MSG_MBOX_CRASH
);

551 
	}
}

556 
Void
 
	$VútQueue_po°InôD⁄e
(
Void
)

558 
	`I¡îru±Proxy_ötSíd
(0, (
UI¡
)
RP_MSG_BOOTINIT_DONE
);

559 
	}
}

561 
	#CACHE_WB_TICK_PERIOD
 5

	)

568 
Void
 
	$VútQueue_ˇcheWb
()

570 
UI¡32
 
ﬁdticks
 = 0;

571 
UI¡32
 
√wticks
;

573 
√wticks
 = 
	`Clock_gëTicks
();

574 i‡(
√wticks
 - 
ﬁdticks
 < (
UI¡32
)
CACHE_WB_TICK_PERIOD
) {

579 
ﬁdticks
 = 
√wticks
;

582 
	`Cache_wbAŒ
();

583 
	}
}

	@ti/ipc/rpmsg/VirtQueue.h

88 #i‚de‡
ti_ùc_VútQueue__ö˛ude


89 
	#ti_ùc_VútQueue__ö˛ude


	)

91 #i‡
deföed
 (
__˝lu•lus
)

98 
	#ID_SELF_TO_A9
 0

	)

99 
	#ID_A9_TO_SELF
 1

	)

104 
	#RP_MSG_BUF_SIZE
 (512)

	)

110 
VútQueue_Obje˘
 *
	tVútQueue_H™dÀ
;

119 
Void
 (*
	tVútQueue_ˇŒback
)(
	tVútQueue_H™dÀ
);

130 
VútQueue_H™dÀ
 
VútQueue_¸óã
(
VútQueue_ˇŒback
 
ˇŒback
, 
UI¡16
 
¥ocId
,

131 
I¡
 
vqId
);

142 
Void
 
VútQueue_kick
(
VútQueue_H™dÀ
 
vq
);

149 
Void
 
VútQueue_°¨tup
();

169 
I¡
 
VútQueue_addAvaûBuf
(
VútQueue_H™dÀ
 
vq
, 
Void
 *
buf
);

181 
Void
 *
VútQueue_gëU£dBuf
(
VútQueue_H™dÀ
 
vq
);

203 
I¡16
 
VútQueue_gëAvaûBuf
(
VútQueue_H™dÀ
 
vq
, 
Void
 **
buf
, 
I¡
 *
Àn
);

217 
I¡
 
VútQueue_addU£dBuf
(
VútQueue_H™dÀ
 
vq
, 
I¡16
 
tokí
, I¡ 
Àn
);

222 
Void
 
VútQueue_po°CøshToMaûbox
(Void);

227 
Void
 
VútQueue_po°InôD⁄e
(Void);

230 #i‡
deföed
 (
__˝lu•lus
)

	@ti/ipc/rpmsg/VirtQueue_norouting.c

56 
	~<xdc/°d.h
>

57 
	~<xdc/ru¡ime/Sy°em.h
>

58 
	~<xdc/ru¡ime/Eº‹.h
>

59 
	~<xdc/ru¡ime/Mem‹y.h
>

60 
	~<xdc/ru¡ime/Log.h
>

61 
	~<xdc/ru¡ime/Dügs.h
>

63 
	~<ti/sysbios/hÆ/Hwi.h
>

64 
	~<ti/sysbios/k∆/Sem≠h‹e.h
>

65 
	~<ti/sysbios/BIOS.h
>

67 
	~<ti/ùc/Ωmsg/I¡îru±Proxy.h
>

69 
	~<ti/ùc/Mu…iProc.h
>

70 
	~<ti/ùc/Ωmsg/VútQueue.h
>

72 
	~<°rög.h
>

74 
	~"vútio_rög.h
"

77 
	#NUM_QUEUES
 5

	)

80 
	#RP_MSG_A9_SYSM3_VRING_DA
 0xA0000000U

	)

81 
	#RP_MSG_SYSM3_A9_VRING_DA
 0xA0002000U

	)

83 
	#APPM3_OFFSET
 (0x50000)

	)

107 
	mRP_MSG_MBOX_READY
 = (
I¡
)0xFFFFFF00,

108 
	mRP_MSG_MBOX_STATE_CHANGE
 = (
I¡
)0xFFFFFF01,

109 
	mRP_MSG_MBOX_CRASH
 = (
I¡
)0xFFFFFF02,

110 
	mRP_MBOX_ECHO_REQUEST
 = (
I¡
)0xFFFFFF03,

111 
	mRP_MBOX_ECHO_REPLY
 = (
I¡
)0xFFFFFF04,

112 
	mRP_MBOX_ABORT_REQUEST
 = (
I¡
)0xFFFFFF05,

113 
	mRP_MSG_FLUSH_CACHE
 = (
I¡
)0xFFFFFF06,

114 
	mRP_MSG_HIBERNATION
 = (
I¡
)0xFFFFFF07,

115 
	mRP_MSG_BOOTINIT_DONE
 = (
I¡
)0xFFFFFF08

118 
	#DIV_ROUND_UP
(
n
,
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

119 
	#RP_MSG_NUM_BUFS
 (256)

	)

120 
	#RP_MSG_BUF_SIZE
 (512)

	)

121 
	#RP_MSG_BUFS_SPACE
 (
RP_MSG_NUM_BUFS
 * 
RP_MSG_BUF_SIZE
 * 2)

	)

123 
	#PAGE_SIZE
 (4096)

	)

129 
	#RP_MSG_VRING_ALIGN
 (4096)

	)

132 
	#RP_MSG_RING_SIZE
 ((
	`DIV_ROUND_UP
(
	`vrög_size
(
RP_MSG_NUM_BUFS
, \

133 
RP_MSG_VRING_ALIGN
), 
PAGE_SIZE
)Ë* PAGE_SIZE)

	)

136 
	#ID_A9_TO_SYSM3
 0

	)

137 
	#ID_SYSM3_TO_A9
 1

	)

138 
	#ID_A9_TO_APPM3
 2

	)

139 
	#ID_APPM3_TO_A9
 3

	)

141 
	sVútQueue_Obje˘
 {

143 
UI¡16
 
	mid
;

146 
VútQueue_ˇŒback
 
	mˇŒback
;

149 
vrög
 
	mvrög
;

152 
UI¡16
 
	mnum_‰ì
;

155 
UI¡16
 
	mœ°_avaû_idx
;

158 
UI¡16
 
	mœ°_u£d_idx
;

161 
UI¡16
 
	m¥ocId
;

162 } 
	tVútQueue_Obje˘
;

164 
UI¡
 
	göôSège
 = 0;

165 
På
 
	gbufAddr
 = (På)
RP_MSG_A9_SYSM3_VRING_DA
;

166 
Sem≠h‹e_H™dÀ
 
	g£mH™dÀ
 = 
NULL
;

168 
UI¡
 
	gnumQueues
 = 0;

169 
VútQueue_Obje˘
 *
	gqueueRegi°ry
[
NUM_QUEUES
] = {
NULL
};

171 
UI¡16
 
	gho°ProcId
;

172 
UI¡16
 
	gd•ProcId
;

173 
UI¡16
 
	gsysm3ProcId
;

174 
UI¡16
 
	g≠pm3ProcId
;

176 
ölöe
 
Void
 * 
	$m≠PAtoVA
(
UI¡
 
∑
)

178  (
Void
 *)((
∑
 & 0x000fffffU) | 0xa0000000U);

179 
	}
}

181 
ölöe
 
UI¡
 
	$m≠VAtoPA
(
Void
 * 
va
)

183  ((
UI¡
)
va
 & 0x000fffffU) | 0x9cf00000U;

184 
	}
}

189 
Void
 
	$VútQueue_P¨ams_öô
(
VútQueue_P¨ams
 *
∑øms
)

192 
∑øms
->
id
 = 0;

193 
∑øms
->
ªmŸeProcId
 = 
Mu…iProc_INVALIDID
;

194 
∑øms
->
noNŸify
 = 
FALSE
;

195 
	}
}

200 
Void
 
	$VútQueue_kick
(
VútQueue_H™dÀ
 
vq
)

203 i‡(
vq
->
vrög
.
avaû
->
Êags
 & 
VRING_AVAIL_F_NO_INTERRUPT
) {

204 
	`Log_¥öt0
(
Dügs_USER1
,

209 
	`Log_¥öt2
(
Dügs_USER1
,

211 (
IArg
)
vq
->
¥ocId
, (IArg)vq->
id
);

212 
	`I¡îru±Proxy_ötSíd
(
vq
->
¥ocId
, vq->
id
);

213 
	}
}

218 
I¡
 
	$VútQueue_addU£dBuf
(
VútQueue_H™dÀ
 
vq
, 
I¡16
 
hód
, 
I¡
 
Àn
)

220 
vrög_u£d_ñem
 *
u£d
;

222 i‡((
hód
 > 
vq
->
vrög
.
num
) || (head < 0)) {

223 
	`Eº‹_øi£
(
NULL
, 
Eº‹_E_gíîic
, 0, 0);

230 
u£d
 = &
vq
->
vrög
.u£d->
rög
[vq->vrög.u£d->
idx
 % vq->vrög.
num
];

231 
u£d
->
id
 = 
hód
;

232 
u£d
->
Àn
 =Üen;

234 
vq
->
vrög
.
u£d
->
idx
++;

237 
	}
}

242 
I¡
 
	$VútQueue_addAvaûBuf
(
VútQueue_Obje˘
 *
vq
, 
Void
 *
buf
)

244 
UI¡16
 
avaû
;

246 i‡(
vq
->
num_‰ì
 == 0) {

248 
	`Eº‹_øi£
(
NULL
, 
Eº‹_E_gíîic
, 0, 0);

251 
vq
->
num_‰ì
--;

253 
avaû
 = 
vq
->
vrög
.avaû->
idx
++ % vq->vrög.
num
;

255 
vq
->
vrög
.
desc
[
avaû
].
addr
 = 
	`m≠VAtoPA
(
buf
);

256 
vq
->
vrög
.
desc
[
avaû
].
Àn
 = 
RP_MSG_BUF_SIZE
;

258  (
vq
->
num_‰ì
);

259 
	}
}

264 
Void
 *
	$VútQueue_gëU£dBuf
(
VútQueue_Obje˘
 *
vq
)

266 
UI¡16
 
hód
;

267 
Void
 *
buf
;

270 i‡(
vq
->
œ°_u£d_idx
 =vq->
vrög
.
u£d
->
idx
) {

271  (
NULL
);

274 
hód
 = 
vq
->
vrög
.
u£d
->
rög
[vq->
œ°_u£d_idx
 % vq->vrög.
num
].
id
;

275 
vq
->
œ°_u£d_idx
++;

277 
buf
 = 
	`m≠PAtoVA
(
vq
->
vrög
.
desc
[
hód
].
addr
);

279  (
buf
);

280 
	}
}

285 
I¡16
 
	$VútQueue_gëAvaûBuf
(
VútQueue_H™dÀ
 
vq
, 
Void
 **
buf
, 
I¡
 *
Àn
)

287 
UI¡16
 
hód
;

289 
	`Log_¥öt5
(
Dügs_USER1
, "gëAvaûBu‡vq: 0x%x %d %d %d 0x%x\n", (
IArg
)
vq
,

290 
vq
->
œ°_avaû_idx
, vq->
vrög
.
avaû
->
idx
, vq->vrög.
num
,

291 (
IArg
)&
vq
->
vrög
.
avaû
);

294 i‡(
vq
->
œ°_avaû_idx
 =vq->
vrög
.
avaû
->
idx
) {

296 
vq
->
vrög
.
u£d
->
Êags
 &~
VRING_USED_F_NO_NOTIFY
;

302 
vq
->
vrög
.
u£d
->
Êags
 |
VRING_USED_F_NO_NOTIFY
;

308 
hód
 = 
vq
->
œ°_avaû_idx
++ % vq->
vrög
.
num
;

310 *
buf
 = 
	`m≠PAtoVA
(
vq
->
vrög
.
desc
[
hód
].
addr
);

311 *
Àn
 = 
vq
->
vrög
.
desc
[
hód
].len;

313  (
hód
);

314 
	}
}

319 
Void
 
	$VútQueue_dißbÀCÆlback
(
VútQueue_Obje˘
 *
vq
)

322 
	}
}

327 
Boﬁ
 
	$VútQueue_íabÀCÆlback
(
VútQueue_Obje˘
 *
vq
)

330  (
FALSE
);

331 
	}
}

337 
Void
 
	$VútQueue_i§
(
UArg
 
msg
)

339 
VútQueue_Obje˘
 *
vq
;

341 
	`Log_¥öt1
(
Dügs_USER1
, "VútQueue_i§Ñe˚ived msg = 0x%x\n", 
msg
);

343 
msg
) {

344 (
UI¡
)
RP_MSG_MBOX_READY
:

345 i‡(
	`Mu…iProc_£lf
(Ë=
sysm3ProcId
 ||

346 
	`Mu…iProc_£lf
(Ë=
≠pm3ProcId
) {

348 
öôSège
 = 1;

351 
	`Sem≠h‹e_po°
(
£mH™dÀ
);

355 (
UI¡
)
RP_MBOX_ECHO_REQUEST
:

356 
	`I¡îru±Proxy_ötSíd
(
ho°ProcId
, (
UI¡
)(
RP_MBOX_ECHO_REPLY
));

359 (
UI¡
)
RP_MBOX_ABORT_REQUEST
:

361 
Fxn
 
f
 = (Fxn)0x0;

362 
	`Log_¥öt0
(
Dügs_USER1
, "Crash on demand ...\n");

363 
	`f
();

375 i‡(
	`Mu…iProc_£lf
(Ë=
sysm3ProcId
 || Mu…iProc_£lf(Ë=
≠pm3ProcId
) {

376 
öôSège
) {

383 
bufAddr
 = (
På
)
RP_MSG_A9_SYSM3_VRING_DA
;

385 
öôSège
++;

388 
	`Sem≠h‹e_po°
(
£mH™dÀ
);

398 
vq
 = 
queueRegi°ry
[
msg
];

399 i‡(
vq
) {

400 
vq
->
	`ˇŒback
(vq);

402 
	}
}

408 
VútQueue_Obje˘
 *
	$VútQueue_¸óã
(
VútQueue_ˇŒback
 
ˇŒback
,

409 
UI¡16
 
ªmŸeProcId
, 
I¡
 
vqId
)

411 
VútQueue_Obje˘
 *
vq
;

412 *
vrögAddr
;

413 
Eº‹_Block
 
eb
;

415 
	`Eº‹_öô
(&
eb
);

417 
vq
 = 
	`Mem‹y_Æloc
(
NULL
, (
VútQueue_Obje˘
), 0, &
eb
);

418 i‡(!
vq
) {

419  (
NULL
);

422 
vq
->
ˇŒback
 = callback;

423 
vq
->
id
 = 
vqId
;

424 
vq
->
¥ocId
 = 
ªmŸeProcId
;

425 
vq
->
œ°_avaû_idx
 = 0;

427 i‡(
	`Mu…iProc_£lf
(Ë=
≠pm3ProcId
) {

428 
vq
->
id
 += 2;

431 
vq
->
id
) {

432 
ID_SELF_TO_A9
:

434 
vrögAddr
 = (
vrög
 *)((
UI¡
)
bufAddr
 + 
RP_MSG_BUFS_SPACE
);

436 
ID_A9_TO_SELF
:

438 
vrögAddr
 = (
vrög
 *)((
UI¡
)
bufAddr
 +

439 
RP_MSG_RING_SIZE
 + 
RP_MSG_BUFS_SPACE
);

441 
ID_A9_TO_APPM3
:

443 
vrögAddr
 = (
vrög
 *)((
UI¡
)
bufAddr
 + 
RP_MSG_BUFS_SPACE
 +

444 
APPM3_OFFSET
);

446 
ID_APPM3_TO_A9
:

448 
vrögAddr
 = (
vrög
 *)((
UI¡
)
bufAddr
 +

449 
RP_MSG_RING_SIZE
 + 
RP_MSG_BUFS_SPACE
 + 
APPM3_OFFSET
);

453 
	`Log_¥öt3
(
Dügs_USER1
,

454 "vrög: %d 0x%x (0x%x)\n", 
vq
->
id
, (
IArg
)
vrögAddr
,

455 
RP_MSG_RING_SIZE
);

457 
	`vrög_öô
(&(
vq
->
vrög
), 
RP_MSG_NUM_BUFS
, 
vrögAddr
, 
RP_MSG_VRING_ALIGN
);

463 i‡(
vq
->
¥ocId
 =
ho°ProcId
 || vq->¥ocId =
d•ProcId
) {

464 
vq
->
vrög
.
u£d
->
Êags
 |
VRING_USED_F_NO_NOTIFY
;

467 
queueRegi°ry
[
vq
->
id
] = vq;

469  (
vq
);

470 
	}
}

475 
Void
 
	$VútQueue_°¨tup
()

477 
ho°ProcId
 = 
	`Mu…iProc_gëId
("HOST");

478 
d•ProcId
 = 
	`Mu…iProc_gëId
("DSP");

479 
sysm3ProcId
 = 
	`Mu…iProc_gëId
("CORE0");

480 
≠pm3ProcId
 = 
	`Mu…iProc_gëId
("CORE1");

486 i‡(
	`Mu…iProc_£lf
(Ë=
d•ProcId
) {

487 
	`mem£t
((*)
RP_MSG_A9_SYSM3_VRING_DA
, 0,

488 
RP_MSG_RING_SIZE
 * 2 + 
RP_MSG_BUFS_SPACE
);

489 
	`I¡îru±Proxy_ötRegi°î
(
VútQueue_i§
);

491 
	`I¡îru±Proxy_ötSíd
(
sysm3ProcId
, (
UI¡
)
RP_MSG_MBOX_READY
);

492 
	`I¡îru±Proxy_ötSíd
(
sysm3ProcId
, (0xA0000000));

493 
	`I¡îru±Proxy_ötSíd
(
≠pm3ProcId
, (
UI¡
)
RP_MSG_MBOX_READY
);

494 
	`I¡îru±Proxy_ötSíd
(
≠pm3ProcId
, (0xA0000000));

496 
bufAddr
 = (
På
)
RP_MSG_A9_SYSM3_VRING_DA
;

499 
£mH™dÀ
 = 
	`Sem≠h‹e_¸óã
(0, 
NULL
, NULL);

500 
	`I¡îru±Proxy_ötRegi°î
(
VútQueue_i§
);

503 
	`Sem≠h‹e_≥nd
(
£mH™dÀ
, 
BIOS_WAIT_FOREVER
);

504 
	`Log_¥öt0
(
Dügs_USER1
, "VirtQueue_startup: RP_MSG_MBOX_READYÑeceived\n");

506 
	`Sem≠h‹e_≥nd
(
£mH™dÀ
, 
BIOS_WAIT_FOREVER
);

507 
	`Sy°em_¥ötf
("VirtQueue_startup: bufAddráddress of 0x%xÑeceived\n",

508 
bufAddr
);

510 
	}
}

515 
Void
 
	$VútQueue_po°CøshToMaûbox
(
Void
)

517 
	`I¡îru±Proxy_ötSíd
(0, (
UI¡
)
RP_MSG_MBOX_CRASH
);

518 
	}
}

523 
Void
 
	$VútQueue_po°InôD⁄e
(
Void
)

525 
	`I¡îru±Proxy_ötSíd
(0, (
UI¡
)
RP_MSG_BOOTINIT_DONE
);

526 
	}
}

	@ti/ipc/rpmsg/virtio_ring.h

1 #i‚de‡
_LINUX_VIRTIO_RING_H


2 
	#_LINUX_VIRTIO_RING_H


	)

34 
	~<xdc/°d.h
>

37 
	#VRING_DESC_F_NEXT
 1

	)

39 
	#VRING_DESC_F_WRITE
 2

	)

44 
	#VRING_USED_F_NO_NOTIFY
 1

	)

48 
	#VRING_AVAIL_F_NO_INTERRUPT
 1

	)

51 
	svrög_desc


54 
UI¡32
 
	maddr
;

56 
UI¡32
 
	m∑ddög
;

59 
UI¡32
 
	mÀn
;

61 
UI¡16
 
	mÊags
;

63 
UI¡16
 
	m√xt
;

66 
	svrög_avaû


68 
UI¡16
 
	mÊags
;

69 
UI¡16
 
	midx
;

70 
UI¡16
 
	mrög
[256];

74 
	svrög_u£d_ñem


77 
UI¡32
 
	mid
;

79 
UI¡32
 
	mÀn
;

82 
	svrög_u£d


84 
UI¡16
 
	mÊags
;

85 
UI¡16
 
	midx
;

86 
vrög_u£d_ñem
 
	mrög
[256];

89 
	svrög
 {

90 
	mnum
;

92 
vrög_desc
 *
	mdesc
;

94 
vrög_avaû
 *
	mavaû
;

96 
vrög_u£d
 *
	mu£d
;

128 
ölöe
 
	$vrög_öô
(
vrög
 *
vr
, 
num
, *
p
,

129 
∑gesize
)

131 
vr
->
num
 =Çum;

132 
vr
->
desc
 = 
p
;

133 
vr
->
avaû
 = (
vrög_avaû
 *)

134 (()
p
 + (
num
 * (
vrög_desc
)));

135 
vr
->
u£d
 = (*)((()&vr->
avaû
->
rög
[
num
] + 
∑gesize
-1)

136 & ~(
∑gesize
 - 1));

137 
	}
}

139 
ölöe
 
	$vrög_size
(
num
, 
∑gesize
)

141  (((
vrög_desc
Ë* 
num
 + (
UI¡16
) * (2 +Çum)

142 + 
∑gesize
 - 1) & ~(pagesize - 1))

143 + (
UI¡16
Ë* 2 + (
vrög_u£d_ñem
Ë* 
num
;

144 
	}
}

146 #ifde‡
__KERNEL__


147 
	~<löux/öãºu±.h
>

148 
	gvútio_devi˚
;

149 
	gvútqueue
;

151 
vútqueue
 *
vrög_√w_vútqueue
(
num
,

152 
vútio_devi˚
 *
vdev
,

153 *
∑ges
,

154 (*
nŸify
)(
vútqueue
 *
vq
),

155 (*
ˇŒback
)(
vútqueue
 *
vq
));

157 
	`vrög_dñ_vútqueue
(
vútqueue
 *
vq
);

159 
	`vrög_å™•‹t_„©uªs
(
vútio_devi˚
 *
vdev
);

161 
úqªtu∫_t
 
	`vrög_öãºu±
(
úq
, *
_vq
);

	@ti/pm/IpcPower.c

42 
	~<xdc/°d.h
>

43 
	~<xdc/ru¡ime/Sy°em.h
>

44 
	~<xdc/ru¡ime/Eº‹.h
>

45 
	~<xdc/ru¡ime/As£π.h
>

46 
	~<xdc/ru¡ime/Mem‹y.h
>

47 
	~<xdc/ru¡ime/Maö.h
>

48 
	~<xdc/ru¡ime/Regi°ry.h
>

49 
	~<xdc/ru¡ime/Log.h
>

50 
	~<xdc/ru¡ime/Dügs.h
>

52 
	~<ti/sysbios/BIOS.h
>

53 
	~<ti/sysbios/k∆/Sem≠h‹e.h
>

54 
	~<ti/sysbios/k∆/Task.h
>

55 
	~<ti/sysbios/hÆ/Hwi.h
>

56 
	~<ti/sysbios/k∆/Swi.h
>

57 
	~<ti/sysbios/k∆/Clock.h
>

58 
	~<ti/sysbios/timîs/dmtimî/Timî.h
>

59 #i‚de‡
SMP


60 
	~<ti/sysbios/Ámûy/¨m/duˇti/om≠4430/Powî.h
>

61 
	~<ti/sysbios/Ámûy/¨m/duˇti/C‹e.h
>

62 
	~<ti/ùc/Mu…iProc.h
>

64 
	~<ti/sysbios/Ámûy/¨m/duˇti/smp/Powî.h
>

67 
	~<ti/pm/IpcPowî.h
>

68 
	~"_IpcPowî.h
"

70 
	#MASTERCORE
 1

	)

71 
	#NO_MASTERCORE
 0

	)

72 
	#CPU_COPY
 -1

	)

73 
	#REG32
(
A
Ë(*(vﬁ©ûê
UI¡32
 *Ë(A))

	)

75 
	#SET_DEEPSLEEP
 (
	`REG32
(
M3_SCR_REG
Ë| (1 << 
DEEPSLEEP_BIT
))

	)

76 
	#CLR_DEEPSLEEP
 (
	`REG32
(
M3_SCR_REG
Ë& (~(1 << 
DEEPSLEEP_BIT
)))

	)

78 #i‚de‡
SMP


79 #¥agm®
DATA_SECTION
(
IpcPowî_hibLocks
, ".ipcpower_data")

80 
UI¡32
 
	gIpcPowî_hibLocks
[2];

82 
UI¡32
 
	gIpcPowî_hibLocks
;

86 
UI¡32
 
	gIpcPowî_idÀCou¡
 = 0;

87 
UI¡32
 
	gIpcPowî_su•ídCou¡
 = 0;

88 
UI¡32
 
	gIpcPowî_ªsumeCou¡
 = 0;

91 
Void
 *
	gIpcPowî_˛ockFxn
 = 
NULL
;

94 
Timî_H™dÀ
 
	gtickTimîH™dÀ
 = 
NULL
;

96 
Powî_Su•ídArgs
 
	gPowîSu•Args
;

97 
Swi_H™dÀ
 
	gsu•ídResumeSwi
;

98 #i‚de‡
SMP


99 
Sem≠h‹e_H™dÀ
 
	gIpcPowî_£mSu•íd
 = 
NULL
;

100 
Sem≠h‹e_H™dÀ
 
	gIpcPowî_£mExô
 = 
NULL
;

101 
Task_H™dÀ
 
	gIpcPowî_tskSu•íd
 = 
NULL
;

102 
UI¡16
 
	gsysm3ProcId
;

103 
UI¡16
 
	g≠pm3ProcId
;

105 
I¡32
 
	gªfWakeLockC¡
;

108 
IpcPowî_CÆlbackEÀm
 *
	gIpcPowî_ˇŒbackLi°
 = 
NULL
;

111 
I¡
 
	gcurInô
 = 0;

113 
	eIpcPowî_SÀïMode
 {

114 
	mIpcPowî_SLEEP_MODE_DEEPSLEEP
,

115 
	mIpcPowî_SLEEP_MODE_WAKELOCK
,

116 
	mIpcPowî_SLEEP_MODE_WAKEUNLOCK


117 } 
	tIpcPowî_SÀïMode
;

120 
Boﬁ
 
	gIpcPowî_dìpSÀï
 = 
TRUE
;

126 
Void
 
	$IpcPowî_ˇŒU£rFxns
(
IpcPowî_Evít
 
evít
)

128 
IpcPowî_CÆlbackEÀm
 *
node
 = 
IpcPowî_ˇŒbackLi°
;

131 
node
 !
NULL
) {

132 i‡(
node
->
evít
 ==Évent) {

133 (*(
node
->
ˇŒback
))(
evít
,Çode->
d©a
);

135 
node
 =Çode->
√xt
;

137 
	}
}

139 
ölöe
 
Void
 
	$IpcPowî_¶ìpMode
(
IpcPowî_SÀïMode
 
›t
)

141 
IArg
 
hwiKey
;

144 
hwiKey
 = 
	`Hwi_dißbÀ
();

145 
›t
) {

146 
IpcPowî_SLEEP_MODE_WAKEUNLOCK
:

147 i‡(
ªfWakeLockC¡
) {

148 
ªfWakeLockC¡
--;

150 
IpcPowî_SLEEP_MODE_DEEPSLEEP
:

151 i‡(!
ªfWakeLockC¡
) {

152 
IpcPowî_dìpSÀï
 = 
TRUE
;

155 
IpcPowî_SLEEP_MODE_WAKELOCK
:

156 
ªfWakeLockC¡
++;

157 
IpcPowî_dìpSÀï
 = 
FALSE
;

160 
	`Hwi_ª°‹e
(
hwiKey
);

161 
	}
}

163 
ölöe
 
Void
 
	$IpcPowî_£tWugí
()

165 
	`REG32
(
WUGEN_MEVT1
Ë|
WUGEN_INT_MASK
;

166 
	}
}

171 
	#FXNN
 "IpcPowî_su•ídSwi"

	)

172 
Void
 
	$IpcPowî_su•ídSwi
(
UArg
 
¨g0
, UArg 
¨g1
)

174 #i‚de‡
SMP


175 i‡(
	`Mu…iProc_£lf
(Ë=
sysm3ProcId
) {

177 
	`Log_¥öt0
(
Dügs_INFO
, 
FXNN
":Core0 Hibernation Swi");

178 #i‚de‡
SMP


179 
PowîSu•Args
.
pmMa°îC‹e
 = 
MASTERCORE
;

181 i‡(
	`Mu…iProc_£lf
(Ë=
≠pm3ProcId
) {

182 
	`Log_¥öt0
(
Dügs_INFO
, 
FXNN
":Core1 Hibernation Swi");

183 
PowîSu•Args
.
pmMa°îC‹e
 = 
NO_MASTERCORE
;

186 i‡(
ªfWakeLockC¡
) {

187 
	`Sy°em_¥ötf
("Warning: WakeÜocks in use\n");

190 
	`Powî_su•íd
(&
PowîSu•Args
);

191 #i‚de‡
SMP


192 
	`IpcPowî_¶ìpMode
(
IpcPowî_SLEEP_MODE_DEEPSLEEP
);

193 
	`IpcPowî_£tWugí
();

195 
	`Log_¥öt0
(
Dügs_INFO
, 
FXNN
":Resume");

197 
	}
}

198 #unde‡
FXNN


205 #i‚de‡
SMP


209 
Void
 
	$IpcPowî_su•ídTaskFxn
(
UArg
 
¨g0
, UArg 
¨g1
)

211 
curInô
) {

213 
	`Sem≠h‹e_≥nd
(
IpcPowî_£mSu•íd
, 
BIOS_WAIT_FOREVER
);

215 i‡(
curInô
) {

217 
	`IpcPowî_¥eSu•íd
();

219 
	`Swi_po°
(
su•ídResumeSwi
);

222 
	`IpcPowî_po°Resume
();

227 
	`Sem≠h‹e_po°
(
IpcPowî_£mExô
);

228 
	}
}

234 
Void
 
	$IpcPowî_öô
()

236 
Swi_P¨ams
 
swiP¨ams
;

237 #i‚de‡
SMP


238 
Task_P¨ams
 
èskP¨ams
;

239 
UI¡
 
c‹eIdx
 = 
	`C‹e_gëId
();

241 
I¡
 
i
;

242 
UArg
 
¨g
;

243 
UI¡
 
func
;

244 
Timî_H™dÀ
 
tH™dÀ
 = 
NULL
;

246 i‡(
curInô
++) {

250 #i‚de‡
SMP


251 
IpcPowî_hibLocks
[
c‹eIdx
] = 0;

253 
sysm3ProcId
 = 
	`Mu…iProc_gëId
("CORE0");

254 
≠pm3ProcId
 = 
	`Mu…iProc_gëId
("CORE1");

256 
IpcPowî_hibLocks
 = 0;

258 
ªfWakeLockC¡
 = 0;

260 
i
 = 0; i < 
	`Timî_Obje˘_cou¡
(); i++) {

261 
tH™dÀ
 = 
	`Timî_Obje˘_gë
(
NULL
, 
i
);

262 
func
 = (
UI¡
Ë
	`Timî_gëFunc
(
tH™dÀ
, &
¨g
);

263 i‡(
func
 && ((fun¯=(
UI¡
Ë
ti_sysbios_k∆_Clock_doTick__I
) ||

264 (
func
 =(
UI¡
Ë
Clock_tick
) ||

265 (
func
 =(
UI¡
Ë
IpcPowî_˛ockFxn
))) {

266 
tickTimîH™dÀ
 = 
tH™dÀ
;

270 i‡(
tickTimîH™dÀ
 =
NULL
) {

271 
	`Sy°em_ab‹t
("IpcPower_init: Cannot findÅickTimer Handle. Custom"

275 #i‚de‡
SMP


276 
IpcPowî_£mSu•íd
 = 
	`Sem≠h‹e_¸óã
(0, 
NULL
, NULL);

277 
IpcPowî_£mExô
 = 
	`Sem≠h‹e_¸óã
(0, 
NULL
, NULL);

279 
	`Task_P¨ams_öô
(&
èskP¨ams
);

280 
èskP¨ams
.
¥i‹ôy
 = 
Task_numPri‹ôõs
 - 1;

281 
èskP¨ams
.
ö°™˚
->
«me
 = "ti.pm.IpcPower_tskSuspend";

282 
IpcPowî_tskSu•íd
 = 
	`Task_¸óã
(
IpcPowî_su•ídTaskFxn
, &
èskP¨ams
,

283 
NULL
);

286 
	`Swi_P¨ams_öô
(&
swiP¨ams
);

287 
swiP¨ams
.
¥i‹ôy
 = 
Swi_numPri‹ôõs
 - 1;

288 
su•ídResumeSwi
 = 
	`Swi_¸óã
(
IpcPowî_su•ídSwi
, &
swiP¨ams
, 
NULL
);

291 
PowîSu•Args
.
ªndezvousResume
 = 
TRUE
;

292 
PowîSu•Args
.
dmaCh™√l
 = 
CPU_COPY
;

293 
PowîSu•Args
.
ötMask31_0
 = 0x0;

294 #i‚de‡
SMP


295 
PowîSu•Args
.
ötMask63_32
 = 0x0;

297 
PowîSu•Args
.
ötMask63_32
 = 
WUGEN_MAILBOX_BIT
 << 16;

299 
PowîSu•Args
.
ötMask79_64
 = 0x0;

300 
	`IpcPowî_¶ìpMode
(
IpcPowî_SLEEP_MODE_DEEPSLEEP
);

301 
	`IpcPowî_£tWugí
();

302 
	}
}

307 
Void
 
	$IpcPowî_exô
()

309 --
curInô
;

311 i‡(
curInô
 == 0) {

312 #i‚de‡
SMP


314 
	`Sem≠h‹e_po°
(
IpcPowî_£mSu•íd
);

317 
	`Sem≠h‹e_≥nd
(
IpcPowî_£mExô
, 
BIOS_WAIT_FOREVER
);

320 
	`Task_dñëe
(&
IpcPowî_tskSu•íd
);

321 
	`Sem≠h‹e_dñëe
(&
IpcPowî_£mSu•íd
);

322 
	`Sem≠h‹e_dñëe
(&
IpcPowî_£mExô
);

325 
	}
}

330 
Void
 
	$IpcPowî_su•íd
()

332 
	`As£π_isTrue
((
curInô
 > 0Ë, 
NULL
);

334 #i‚de‡
SMP


335 
	`Sem≠h‹e_po°
(
IpcPowî_£mSu•íd
);

337 
	`Swi_po°
(
su•ídResumeSwi
);

339 
	}
}

344 
Void
 
	$IpcPowî_idÀ
()

346 
IpcPowî_idÀCou¡
++;

348 
	`REG32
(
M3_SCR_REG
Ë
IpcPowî_dìpSÀï
 ? 
SET_DEEPSLEEP
 : 
CLR_DEEPSLEEP
;

349 
	`asm
(" wfi");

350 
	}
}

355 
Void
 
	$IpcPowî_wakeLock
()

357 
	`IpcPowî_¶ìpMode
(
IpcPowî_SLEEP_MODE_WAKELOCK
);

358 
	}
}

363 
Void
 
	$IpcPowî_wakeU∆ock
()

365 
	`IpcPowî_¶ìpMode
(
IpcPowî_SLEEP_MODE_WAKEUNLOCK
);

366 
	}
}

371 
UI¡
 
	$IpcPowî_hibî«ãLock
()

373 
IArg
 
hwiKey
;

374 #i‚de‡
SMP


375 
UI¡
 
c‹eIdx
 = 
	`C‹e_gëId
();

378 
hwiKey
 = 
	`Hwi_dißbÀ
();

380 #i‚de‡
SMP


381 
IpcPowî_hibLocks
[
c‹eIdx
] += 1;

383 
IpcPowî_hibLocks
++;

386 
	`Hwi_ª°‹e
(
hwiKey
);

388 #i‚de‡
SMP


389  (
IpcPowî_hibLocks
[
c‹eIdx
]);

391  
IpcPowî_hibLocks
;

393 
	}
}

398 
UI¡
 
	$IpcPowî_hibî«ãU∆ock
()

400 
IArg
 
hwiKey
;

401 #i‚de‡
SMP


402 
UI¡
 
c‹eIdx
 = 
	`C‹e_gëId
();

405 
hwiKey
 = 
	`Hwi_dißbÀ
();

407 #i‚de‡
SMP


408 i‡(
IpcPowî_hibLocks
[
c‹eIdx
] > 0) {

409 
IpcPowî_hibLocks
[
c‹eIdx
] -= 1;

412 i‡(
IpcPowî_hibLocks
 > 0) {

413 
IpcPowî_hibLocks
--;

417 
	`Hwi_ª°‹e
(
hwiKey
);

419 #i‚de‡
SMP


420  (
IpcPowî_hibLocks
[
c‹eIdx
]);

422  (
IpcPowî_hibLocks
);

424 
	}
}

429 
Boﬁ
 
	$IpcPowî_ˇnHibî«ã
()

431 #i‚de‡
SMP


432 i‡(
IpcPowî_hibLocks
[0] || IpcPower_hibLocks[1]) {

434 i‡(
IpcPowî_hibLocks
) {

436  (
FALSE
);

439  (
TRUE
);

440 
	}
}

445 
	#FXNN
 "IpcPowî_ªgi°îCÆlback"

	)

446 
I¡
 
	$IpcPowî_ªgi°îCÆlback
(
I¡
 
evít
, 
IpcPowî_CÆlbackFuncPå
 
cbck
,

447 
På
 
d©a
)

449 
IArg
 
hwiKey
;

450 
IpcPowî_CÆlbackEÀm
 **
li°
, *
node
;

451 
BIOS_ThªadTy≥
 
c⁄ãxt
 = 
	`BIOS_gëThªadTy≥
();

453 i‡((
c⁄ãxt
 !
BIOS_ThªadTy≥_Task
) &&

454 (
c⁄ãxt
 !
BIOS_ThªadTy≥_Maö
)) {

455 
	`Log_¥öt0
(
Dügs_ERROR
, 
FXNN
":Invalid context\n");

456  (
IpcPowî_E_FAIL
);

459 
li°
 = &
IpcPowî_ˇŒbackLi°
;

462 
node
 = 
	`Mem‹y_Æloc
(
NULL
, (
IpcPowî_CÆlbackEÀm
), 0, NULL);

463 i‡(
node
 =
NULL
) {

464 
	`Log_¥öt0
(
Dügs_ERROR
, 
FXNN
":out of memory\n");

465  (
IpcPowî_E_MEMORY
);

468 
node
->
√xt
 = 
NULL
;

469 
node
->
evít
 = (
IpcPowî_Evít
)Évent;

470 
node
->
ˇŒback
 = 
cbck
;

471 
node
->
d©a
 = data;

473 
hwiKey
 = 
	`Hwi_dißbÀ
();

474 *
li°
 !
NULL
) {

475 
li°
 = &(*li°)->
√xt
;

477 *
li°
 = 
node
;

478 
	`Hwi_ª°‹e
(
hwiKey
);

480  (
IpcPowî_S_SUCCESS
);

481 
	}
}

482 #unde‡
FXNN


487 
	#FXNN
 "IpcPowî_uƒegi°îCÆlback"

	)

488 
I¡
 
	$IpcPowî_uƒegi°îCÆlback
(
I¡
 
evít
, 
IpcPowî_CÆlbackFuncPå
 
cbck
)

490 
IArg
 
hwiKey
;

491 
IpcPowî_CÆlbackEÀm
 **
li°
, *
node
;

492 
I¡
 
°©us
 = 
IpcPowî_E_FAIL
;

493 
BIOS_ThªadTy≥
 
c⁄ãxt
 = 
	`BIOS_gëThªadTy≥
();

495 i‡((
c⁄ãxt
 !
BIOS_ThªadTy≥_Task
) &&

496 (
c⁄ãxt
 !
BIOS_ThªadTy≥_Maö
)) {

497 
	`Log_¥öt0
(
Dügs_ERROR
, 
FXNN
":Invalid context\n");

498  (
°©us
);

502 
li°
 = &
IpcPowî_ˇŒbackLi°
;

503 
node
 = 
NULL
;

505 
hwiKey
 = 
	`Hwi_dißbÀ
();

506 *
li°
 !
NULL
) {

507 i‡–((*
li°
)->
ˇŒback
 =
cbck
) &&

508 ((*
li°
)->
evít
 ==Évent) ) {

509 
node
 = *
li°
;

510 *
li°
 = (*li°)->
√xt
;

511 
°©us
 = 
IpcPowî_S_SUCCESS
;

514 
li°
 = &(*li°)->
√xt
;

516 
	`Hwi_ª°‹e
(
hwiKey
);

518 i‡(
°©us
 =
IpcPowî_S_SUCCESS
) {

519 i‡(
node
 !
NULL
) {

520 
	`Mem‹y_‰ì
(
NULL
, 
node
, (
IpcPowî_CÆlbackEÀm
));

523 
	`Log_¥öt0
(
Dügs_ERROR
, 
FXNN
":InvalidÖointer\n");

527  (
°©us
);

528 
	}
}

529 #unde‡
FXNN


534 
Void
 
	$IpcPowî_¥eSu•íd
(
Void
)

536 
IpcPowî_su•ídCou¡
++;

539 
	`IpcPowî_ˇŒU£rFxns
(
IpcPowî_Evít_SUSPEND
);

540 
	}
}

545 
Void
 
	$IpcPowî_po°Resume
(
Void
)

548 
	`Timî_ª°‹eRegi°îs
(
tickTimîH™dÀ
, 
NULL
);

549 
	`Timî_°¨t
(
tickTimîH™dÀ
);

552 
	`IpcPowî_ˇŒU£rFxns
(
IpcPowî_Evít_RESUME
);

554 
IpcPowî_ªsumeCou¡
++;

555 
	}
}

	@ti/pm/IpcPower.h

37 #i‚de‡
ti_pm_IpcPowî__ö˛ude


38 
	#ti_pm_IpcPowî__ö˛ude


	)

40 #i‡
deföed
 (
__˝lu•lus
)

54 
	#IpcPowî_S_SUCCESS
 0

	)

60 
	#IpcPowî_E_FAIL
 -1

	)

66 
	#IpcPowî_E_MEMORY
 -2

	)

71 
	eIpcPowî_Evít
 {

72 
IpcPowî_Evít_SUSPEND
 = 0,

73 
IpcPowî_Evít_RESUME
 = 1

74 } 
	tIpcPowî_Evít
;

79 
Void
 (*
	tIpcPowî_CÆlbackFuncPå
)(
	tI¡
 
	tevít
, 
	tPå
 
	td©a
);

91 
Void
 
IpcPowî_öô
();

98 
Void
 
IpcPowî_exô
();

103 
Void
 
IpcPowî_su•íd
();

110 
Void
 
IpcPowî_wakeLock
();

117 
Void
 
IpcPowî_wakeU∆ock
();

124 
UI¡
 
IpcPowî_hibî«ãLock
();

131 
UI¡
 
IpcPowî_hibî«ãU∆ock
();

138 
Boﬁ
 
IpcPowî_ˇnHibî«ã
();

151 
I¡
 
IpcPowî_ªgi°îCÆlback
(I¡ 
evít
, 
IpcPowî_CÆlbackFuncPå
 
fxn
,

152 
På
 
d©a
);

164 
I¡
 
IpcPowî_uƒegi°îCÆlback
(I¡ 
evít
, 
IpcPowî_CÆlbackFuncPå
 
fxn
);

166 #i‡
deföed
 (
__˝lu•lus
)

	@ti/pm/IpcPowerDsp.c

42 
	~<xdc/°d.h
>

43 
	~<xdc/ru¡ime/Sy°em.h
>

44 
	~<xdc/ru¡ime/Eº‹.h
>

45 
	~<xdc/ru¡ime/As£π.h
>

46 
	~<xdc/ru¡ime/Mem‹y.h
>

47 
	~<xdc/ru¡ime/Maö.h
>

48 
	~<xdc/ru¡ime/Log.h
>

49 
	~<xdc/ru¡ime/Dügs.h
>

51 
	~<ti/sysbios/BIOS.h
>

52 
	~<ti/sysbios/k∆/Sem≠h‹e.h
>

53 
	~<ti/sysbios/k∆/Task.h
>

54 
	~<ti/sysbios/hÆ/Hwi.h
>

55 
	~<ti/sysbios/k∆/Swi.h
>

56 
	~<ti/sysbios/k∆/Clock.h
>

57 
	~<ti/sysbios/timîs/dmtimî/Timî.h
>

58 
	~<ti/sysbios/Ámûy/c64p/ã¶a/Powî.h
>

59 
	~<ti/sysbios/Ámûy/c64p/ã¶a/Wugí.h
>

60 
	~<ti/sysbios/Ámûy/c64p/ã¶a/∑ckage/öã∫Æ/Powî.xdc.h
>

62 
	~<ti/ùc/Mu…iProc.h
>

64 
	~<ti/pm/IpcPowî.h
>

65 
	~"_IpcPowî.h
"

67 
	#REG32
(
A
Ë(*(vﬁ©ûê
UI¡32
 *Ë(A))

	)

69 
UI¡32
 
	gIpcPowî_hibLock
;

71 
	#PDCCMD_REG
 0x01810000

	)

72 
	#SLEEP_MODE
 0x15555

	)

73 
	#GPT5_IRQ
 51

	)

74 
	#GPT6_IRQ
 52

	)

75 
	#MBX_DSP_IRQ
 55

	)

77 
Swi_H™dÀ
 
	gsu•ídResumeSwi
;

78 
Sem≠h‹e_H™dÀ
 
	gIpcPowî_£mSu•íd
 = 
NULL
;

79 
Sem≠h‹e_H™dÀ
 
	gIpcPowî_£mExô
 = 
NULL
;

80 
Task_H™dÀ
 
	gIpcPowî_tskSu•íd
 = 
NULL
;

83 
IpcPowî_CÆlbackEÀm
 *
	gIpcPowî_ˇŒbackLi°
 = 
NULL
;

86 
I¡
 
	gcurInô
 = 0;

89 
UI¡32
 
	gIpcPowî_idÀCou¡
 = 0;

90 
UI¡32
 
	gIpcPowî_su•ídCou¡
 = 0;

91 
UI¡32
 
	gIpcPowî_ªsumeCou¡
 = 0;

94 
Void
 *
	gIpcPowî_˛ockFxn
 = 
NULL
;

97 
Timî_H™dÀ
 
	gtickTimîH™dÀ
 = 
NULL
;

102 
Void
 
	$IpcPowî_ˇŒU£rFxns
(
IpcPowî_Evít
 
evít
)

104 
IpcPowî_CÆlbackEÀm
 *
node
 = 
IpcPowî_ˇŒbackLi°
;

107 
node
 !
NULL
) {

108 i‡(
node
->
evít
 ==Évent) {

109 (*(
node
->
ˇŒback
))(
evít
,Çode->
d©a
);

111 
node
 =Çode->
√xt
;

113 
	}
}

118 
Void
 
	$IpcPowî_su•ídSwi
(
UArg
 
¨g0
, UArg 
¨g1
)

121 
	`Wugí_dißbÀEvít
(
GPT5_IRQ
);

122 
	`Wugí_dißbÀEvít
(
GPT6_IRQ
);

123 
	`Wugí_íabÀEvít
(
MBX_DSP_IRQ
);

126 
	`Powî_su•íd
(
Powî_Su•íd_HIBERNATE
);

129 
	`Wugí_íabÀEvít
(
GPT5_IRQ
);

130 
	`Wugí_íabÀEvít
(
GPT6_IRQ
);

131 
	`Wugí_íabÀEvít
(
MBX_DSP_IRQ
);

132 
	}
}

143 
Void
 
	$IpcPowî_su•ídTaskFxn
(
UArg
 
¨g0
, UArg 
¨g1
)

145 
curInô
) {

147 
	`Sem≠h‹e_≥nd
(
IpcPowî_£mSu•íd
, 
BIOS_WAIT_FOREVER
);

149 i‡(
curInô
) {

151 
	`IpcPowî_¥eSu•íd
();

153 
	`Swi_po°
(
su•ídResumeSwi
);

156 
	`IpcPowî_po°Resume
();

161 
	`Sem≠h‹e_po°
(
IpcPowî_£mExô
);

162 
	}
}

167 
Void
 
	$IpcPowî_öô
()

169 
Swi_P¨ams
 
swiP¨ams
;

170 
Task_P¨ams
 
èskP¨ams
;

171 
I¡
 
i
;

172 
UArg
 
¨g
;

173 
UI¡
 
func
;

174 
Timî_H™dÀ
 
tH™dÀ
 = 
NULL
;

176 i‡(
curInô
++) {

180 
IpcPowî_hibLock
 = 0;

182 
i
 = 0; i < 
	`Timî_Obje˘_cou¡
(); i++) {

183 
tH™dÀ
 = 
	`Timî_Obje˘_gë
(
NULL
, 
i
);

184 
func
 = (
UI¡
Ë
	`Timî_gëFunc
(
tH™dÀ
, &
¨g
);

185 i‡(
func
 && ((fun¯=(
UI¡
Ë
ti_sysbios_k∆_Clock_doTick__I
) ||

186 (
func
 =(
UI¡
Ë
Clock_tick
) ||

187 (
func
 =(
UI¡
Ë
IpcPowî_˛ockFxn
))) {

188 
tickTimîH™dÀ
 = 
tH™dÀ
;

192 i‡(
tickTimîH™dÀ
 =
NULL
) {

193 
	`Sy°em_ab‹t
("IpcPower_init: Cannot findÅickTimer Handle. Custom"

197 
IpcPowî_£mSu•íd
 = 
	`Sem≠h‹e_¸óã
(0, 
NULL
, NULL);

198 
IpcPowî_£mExô
 = 
	`Sem≠h‹e_¸óã
(0, 
NULL
, NULL);

200 
	`Task_P¨ams_öô
(&
èskP¨ams
);

201 
èskP¨ams
.
¥i‹ôy
 = 
Task_numPri‹ôõs
 - 1;

202 
èskP¨ams
.
ö°™˚
->
«me
 = "ti.pm.IpcPower_tskSuspend";

203 
IpcPowî_tskSu•íd
 = 
	`Task_¸óã
(
IpcPowî_su•ídTaskFxn
, &
èskP¨ams
,

204 
NULL
);

206 
	`Swi_P¨ams_öô
(&
swiP¨ams
);

207 
swiP¨ams
.
¥i‹ôy
 = 
Swi_numPri‹ôõs
 - 1;

208 
su•ídResumeSwi
 = 
	`Swi_¸óã
(
IpcPowî_su•ídSwi
, &
swiP¨ams
, 
NULL
);

209 
	}
}

214 
Void
 
	$IpcPowî_exô
()

216 --
curInô
;

218 i‡(
curInô
 == 0) {

220 
	`Sem≠h‹e_po°
(
IpcPowî_£mSu•íd
);

223 
	`Sem≠h‹e_≥nd
(
IpcPowî_£mExô
, 
BIOS_WAIT_FOREVER
);

226 
	`Task_dñëe
(&
IpcPowî_tskSu•íd
);

227 
	`Sem≠h‹e_dñëe
(&
IpcPowî_£mSu•íd
);

228 
	`Sem≠h‹e_dñëe
(&
IpcPowî_£mExô
);

230 
	}
}

235 
Void
 
	$IpcPowî_su•íd
()

237 
	`As£π_isTrue
((
curInô
 > 0Ë, 
NULL
);

239 
	`Sem≠h‹e_po°
(
IpcPowî_£mSu•íd
);

240 
	}
}

245 
Void
 
	$IpcPowî_idÀ
()

247 
IpcPowî_idÀCou¡
++;

249 
	`REG32
(
PDCCMD_REG
Ë
SLEEP_MODE
;

250 
	`REG32
(
PDCCMD_REG
);

253 
	`Wugí_íabÀEvít
(
GPT5_IRQ
);

254 
	`Wugí_íabÀEvít
(
GPT6_IRQ
);

255 
	`Wugí_íabÀEvít
(
MBX_DSP_IRQ
);

257 
	`asm
(" idle");

258 
	}
}

263 
UI¡
 
	$IpcPowî_hibî«ãLock
()

265 
IArg
 
hwiKey
, 
swiKey
;

267 
hwiKey
 = 
	`Hwi_dißbÀ
();

268 
swiKey
 = 
	`Swi_dißbÀ
();

270 
IpcPowî_hibLock
++;

272 
	`Swi_ª°‹e
(
swiKey
);

273 
	`Hwi_ª°‹e
(
hwiKey
);

275  (
IpcPowî_hibLock
);

276 
	}
}

281 
UI¡
 
	$IpcPowî_hibî«ãU∆ock
()

283 
IArg
 
hwiKey
, 
swiKey
;

285 
hwiKey
 = 
	`Hwi_dißbÀ
();

286 
swiKey
 = 
	`Swi_dißbÀ
();

288 i‡(
IpcPowî_hibLock
 > 0) {

289 
IpcPowî_hibLock
--;

292 
	`Swi_ª°‹e
(
swiKey
);

293 
	`Hwi_ª°‹e
(
hwiKey
);

295  (
IpcPowî_hibLock
);

296 
	}
}

302 
Boﬁ
 
	$IpcPowî_ˇnHibî«ã
()

304 i‡(
IpcPowî_hibLock
) {

305  (
FALSE
);

308  (
TRUE
);

309 
	}
}

314 
	#FXNN
 "IpcPowî_ªgi°îCÆlback"

	)

315 
I¡
 
	$IpcPowî_ªgi°îCÆlback
(
I¡
 
evít
, 
IpcPowî_CÆlbackFuncPå
 
cbck
,

316 
På
 
d©a
)

318 
IArg
 
hwiKey
;

319 
IpcPowî_CÆlbackEÀm
 **
li°
, *
node
;

320 
BIOS_ThªadTy≥
 
c⁄ãxt
 = 
	`BIOS_gëThªadTy≥
();

322 i‡((
c⁄ãxt
 !
BIOS_ThªadTy≥_Task
) &&

323 (
c⁄ãxt
 !
BIOS_ThªadTy≥_Maö
)) {

324 
	`Log_¥öt0
(
Dügs_ERROR
, 
FXNN
":Invalid context\n");

325  (
IpcPowî_E_FAIL
);

328 
li°
 = &
IpcPowî_ˇŒbackLi°
;

331 
node
 = 
	`Mem‹y_Æloc
(
NULL
, (
IpcPowî_CÆlbackEÀm
), 0, NULL);

332 i‡(
node
 =
NULL
) {

333 
	`Log_¥öt0
(
Dügs_ERROR
, 
FXNN
":out of memory\n");

334  (
IpcPowî_E_MEMORY
);

337 
node
->
√xt
 = 
NULL
;

338 
node
->
evít
 = (
IpcPowî_Evít
)Évent;

339 
node
->
ˇŒback
 = 
cbck
;

340 
node
->
d©a
 = data;

342 
hwiKey
 = 
	`Hwi_dißbÀ
();

343 *
li°
 !
NULL
) {

344 
li°
 = &(*li°)->
√xt
;

346 *
li°
 = 
node
;

347 
	`Hwi_ª°‹e
(
hwiKey
);

349  (
IpcPowî_S_SUCCESS
);

350 
	}
}

351 #unde‡
FXNN


356 
	#FXNN
 "IpcPowî_uƒegi°îCÆlback"

	)

357 
I¡
 
	$IpcPowî_uƒegi°îCÆlback
(
I¡
 
evít
, 
IpcPowî_CÆlbackFuncPå
 
cbck
)

359 
IArg
 
hwiKey
;

360 
IpcPowî_CÆlbackEÀm
 **
li°
, *
node
;

361 
I¡
 
°©us
 = 
IpcPowî_E_FAIL
;

362 
BIOS_ThªadTy≥
 
c⁄ãxt
 = 
	`BIOS_gëThªadTy≥
();

364 i‡((
c⁄ãxt
 !
BIOS_ThªadTy≥_Task
) &&

365 (
c⁄ãxt
 !
BIOS_ThªadTy≥_Maö
)) {

366 
	`Log_¥öt0
(
Dügs_ERROR
, 
FXNN
":Invalid context\n");

367  (
°©us
);

370 
li°
 = &
IpcPowî_ˇŒbackLi°
;

371 
node
 = 
NULL
;

373 
hwiKey
 = 
	`Hwi_dißbÀ
();

374 *
li°
 !
NULL
) {

375 i‡–((*
li°
)->
ˇŒback
 =
cbck
) &&

376 ((*
li°
)->
evít
 ==Évent) ) {

377 
node
 = *
li°
;

378 *
li°
 = (*li°)->
√xt
;

379 
°©us
 = 
IpcPowî_S_SUCCESS
;

382 
li°
 = &(*li°)->
√xt
;

384 
	`Hwi_ª°‹e
(
hwiKey
);

386 i‡(
°©us
 =
IpcPowî_S_SUCCESS
) {

387 i‡(
node
 !
NULL
) {

388 
	`Mem‹y_‰ì
(
NULL
, 
node
, (
IpcPowî_CÆlbackEÀm
));

391 
	`Log_¥öt0
(
Dügs_ERROR
, 
FXNN
":InvalidÖointer\n");

395  (
°©us
);

396 
	}
}

397 #unde‡
FXNN


402 
Void
 
	$IpcPowî_¥eSu•íd
(
Void
)

404 
IpcPowî_su•ídCou¡
++;

407 
	`IpcPowî_ˇŒU£rFxns
(
IpcPowî_Evít_SUSPEND
);

408 
	}
}

413 
Void
 
	$IpcPowî_po°Resume
(
Void
)

416 
	`Timî_ª°‹eRegi°îs
(
tickTimîH™dÀ
, 
NULL
);

417 
	`Timî_°¨t
(
tickTimîH™dÀ
);

420 
	`IpcPowî_ˇŒU£rFxns
(
IpcPowî_Evít_RESUME
);

422 
IpcPowî_ªsumeCou¡
++;

423 
	}
}

	@ti/pm/_IpcPower.h

37 #i‚de‡
ti_pm__IpcPowî__ö˛ude


38 
	#ti_pm__IpcPowî__ö˛ude


	)

40 #i‡
deföed
 (
__˝lu•lus
)

50 
	#MIRQ34_SHIFT
 2

	)

51 
	#MIRQ37_SHIFT
 5

	)

52 
	#MIRQ38_SHIFT
 6

	)

53 
	#MIRQ39_SHIFT
 7

	)

55 
	#WUGEN_MAILBOX_BIT
 (1 << 
MIRQ34_SHIFT
)

	)

56 
	#WUGEN_GPT3_BIT
 (1 << 
MIRQ37_SHIFT
)

	)

57 
	#WUGEN_GPT4_BIT
 (1 << 
MIRQ38_SHIFT
)

	)

58 
	#WUGEN_GPT9_BIT
 (1 << 
MIRQ39_SHIFT
)

	)

61 
	#WUGEN_MEVT0
 0x4000100C

	)

63 
	#WUGEN_MEVT1
 0x40001010

	)

66 
	#WUGEN_INT_MASK
 (
WUGEN_MAILBOX_BIT
 | \

67 
WUGEN_GPT3_BIT
 | \

68 
WUGEN_GPT4_BIT
)

	)

70 
	#M3_SCR_REG
 0xE000ED10

	)

72 
	#SLEEPONEXIT_BIT
 1

	)

73 
	#DEEPSLEEP_BIT
 2

	)

74 
	#SEVONPEND_BIT
 4

	)

77 
	sIpcPowî_CÆlbackEÀm
 {

78 
IpcPowî_Evít
 
evít
;

79 
IpcPowî_CÆlbackFuncPå
 
ˇŒback
;

80 
På
 
d©a
;

81 
IpcPowî_CÆlbackEÀm
 *
√xt
;

82 } 
	tIpcPowî_CÆlbackEÀm
;

85 
Void
 
IpcPowî_¥eSu•íd
(Void);

88 
Void
 
IpcPowî_po°Resume
(Void);

90 #i‡
deföed
 (
__˝lu•lus
)

	@ti/resmgr/IpcResource.c

33 
	~<xdc/°d.h
>

34 
	~<xdc/cfg/globÆ.h
>

35 
	~<xdc/ru¡ime/Sy°em.h
>

36 
	~<xdc/ru¡ime/Mem‹y.h
>

37 
	~<xdc/ru¡ime/As£π.h
>

38 
	~<ti/ùc/Mu…iProc.h
>

39 
	~<ti/sysbios/BIOS.h
>

40 
	~<ti/sysbios/k∆/Task.h
>

41 
	~<ti/sysbios/k∆/Sem≠h‹e.h
>

43 
	~<°dio.h
>

44 
	~<°rög.h
>

45 
	~<°dlib.h
>

47 
	~<ti/ùc/Ωmsg/MesßgeQC›y.h
>

48 
	~<ti/§vmgr/NameM≠.h
>

50 
	~<ti/ªsmgr/IpcResour˚.h
>

51 
	~"_IpcResour˚.h
"

53 
	#DEFAULT_TIMEOUT
 500

	)

54 
	#MAXMSGSIZE
 128

	)

56 
UI¡16
 
	$IpcResour˚_ªsLí
(
IpcResour˚_Ty≥
 
ty≥
)

58 
ty≥
) {

59 
IpcResour˚_TYPE_GPTIMER
:

60  (
IpcResour˚_G±
);

61 
IpcResour˚_TYPE_AUXCLK
:

62  (
IpcResour˚_Aux˛k
);

63 
IpcResour˚_TYPE_REGULATOR
:

64  (
IpcResour˚_Reguœt‹
);

65 
IpcResour˚_TYPE_GPIO
:

66  (
IpcResour˚_Gpio
);

67 
IpcResour˚_TYPE_SDMA
:

68  (
IpcResour˚_Sdma
);

69 
IpcResour˚_TYPE_I2C
:

70  (
IpcResour˚_I2c
);

73 
	}
}

75 
UI¡16
 
	$IpcResour˚_ªqD©aLí
(
IpcResour˚_ReqD©aTy≥
 
ty≥
)

77 
ty≥
) {

78 
IpcResour˚_ReqD©aTy≥_MAX_FREQ
:

79  (
IpcResour˚_Fªq
);

82 
	}
}

84 
I¡
 
	$_IpcResour˚_å™¶©eEº‹
(
I¡
 
k°©us
)

86 
k°©us
) {

88  
IpcResour˚_S_SUCCESS
;

89 -
ENOENT
:

90  
IpcResour˚_E_NORESOURCE
;

91 -
ENOMEM
:

92  
IpcResour˚_E_RETMEMORY
;

93 -
EBUSY
:

94  
IpcResour˚_E_BUSY
;

95 -
EINVAL
:

96  
IpcResour˚_E_INVALARGS
;

98  
IpcResour˚_E_FAIL
;

99 
	}
}

101 
IpcResour˚_H™dÀ
 
	$IpcResour˚_c⁄√˘
(
UI¡
 
timeout
)

103 
UI¡16
 
d°Proc
;

104 
UI¡16
 
Àn
;

105 
IpcResour˚_H™dÀ
 
h™dÀ
;

106 
IpcResour˚_Ack
 
ack
;

107 
I¡
 
°©us
;

109 
h™dÀ
 = 
	`Mem‹y_Æloc
(
NULL
, (*handle), 0, NULL);

110 i‡(!
h™dÀ
) {

111 
	`Sy°em_¥ötf
("IpcResource_connect: No memory");

112  
NULL
;

115 
h™dÀ
->
timeout
 = (!timeoutË? 
DEFAULT_TIMEOUT
 :

116 (
timeout
 =
IpcResour˚_FOREVER
Ë? 
MesßgeQC›y_FOREVER
 :

117 
timeout
;

119 
d°Proc
 = 
	`Mu…iProc_gëId
("HOST");

120 
h™dÀ
->
£m
 = 
	`Sem≠h‹e_¸óã
(1, 
NULL
, NULL);

122 
	`MesßgeQC›y_öô
(
d°Proc
);

123 
h™dÀ
->
msgq

	`MesßgeQC›y_¸óã
(
MesßgeQC›y_ASSIGN_ANY
,

124 &
h™dÀ
->
ídPoöt
);

125 i‡(!
h™dÀ
->
msgq
) {

126 
	`Sy°em_¥ötf
("IpcResource_connect: MessageQCopy_create failed\n");

127 
îr
;

130 
	`NameM≠_ªgi°î
("Ωmsg-ªsmgr", 
h™dÀ
->
ídPoöt
);

133 
°©us
 = 
	`MesßgeQC›y_ªcv
(
h™dÀ
->
msgq
, &
ack
, &
Àn
, &h™dÀ->
ªmŸe
,

134 
h™dÀ
->
timeout
);

135 i‡(
°©us
) {

136 
	`Sy°em_¥ötf
("IpcResource_connect: MessageQCopy_recv "

137 "Áûed sètu†%d\n", 
°©us
);

138 
îr_disc
;

141 i‡(
Àn
 < (
ack
)) {

142 
	`Sy°em_¥ötf
("IpcResour˚_c⁄√˘: Badáck mesßgêÀ¿%d\n", 
Àn
);

143 
îr_disc
;

146 
°©us
 = 
	`_IpcResour˚_å™¶©eEº‹
(
ack
.status);

147 i‡(
°©us
) {

148 
	`Sy°em_¥ötf
("IpcResource_connect: A9 Resource Manager "

149 "Áûed sètu†%d\n", 
°©us
);

150 
îr_disc
;

153  
h™dÀ
;

155 
îr_disc
:

156 
	`NameM≠_uƒegi°î
("Ωmsg-ªsmgr", 
h™dÀ
->
ídPoöt
);

157 
	`MesßgeQC›y_dñëe
(&
h™dÀ
->
msgq
);

158 
îr
:

159 
	`Mem‹y_‰ì
(
NULL
, 
h™dÀ
, (*handle));

160  
NULL
;

161 
	}
}

163 
I¡
 
	$IpcResour˚_disc⁄√˘
(
IpcResour˚_H™dÀ
 
h™dÀ
)

165 
I¡
 
°©us
;

167 i‡(!
h™dÀ
) {

168 
	`Sy°em_¥ötf
("IpcResource_disconnect: handle is NULL\n");

169  
IpcResour˚_E_INVALARGS
;

172 
	`NameM≠_uƒegi°î
("Ωmsg-ªsmgr", 
h™dÀ
->
ídPoöt
);

174 
°©us
 = 
	`MesßgeQC›y_dñëe
(&
h™dÀ
->
msgq
);

175 i‡(
°©us
) {

176 
	`Sy°em_¥ötf
("IpcResource_disconnect: MessageQCopy_delete "

177 "Áûed sètu†%d\n", 
°©us
);

178  
°©us
;

181 
	`Sem≠h‹e_dñëe
(&
h™dÀ
->
£m
);

183 
	`Mem‹y_‰ì
(
NULL
, 
h™dÀ
, (*handle));

185  
IpcResour˚_S_SUCCESS
;

186 
	}
}

188 
I¡
 
	$IpcResour˚_ªque°
(
IpcResour˚_H™dÀ
 
h™dÀ
,

189 
IpcResour˚_ResH™dÀ
 *
ªsH™dÀ
,

190 
IpcResour˚_Ty≥
 
ty≥
, 
Void
 *
ªsP¨ams
)

192 
Ch¨
 
msg
[
MAXMSGSIZE
];

193 
IpcResour˚_Req
 *
ªq
 = (
Void
 *)
msg
;

194 
IpcResour˚_AŒocD©a
 *
rd©a
 = (
Void
 *)
ªq
->
d©a
;

195 
IpcResour˚_Ack
 *
ack
 = (
Void
 *)
msg
;

196 
IpcResour˚_AckD©a
 *
ad©a
 = (
Void
 *)
ack
->
d©a
;

197 
UI¡16
 
hÀn
 = (*
rd©a
Ë+ (*
ªq
);

198 
UI¡16
 
Æí
 = (*
ack
);

199 
UI¡16
 
æí
 = 
	`IpcResour˚_ªsLí
(
ty≥
);

200 
UI¡16
 
Àn
;

201 
UI¡32
 
ªmŸe
;

202 
I¡
 
°©us
;

203 
Ch¨
 *
«me
;

204 
IpcResour˚_Pro˚ss‹
 
Ωroc
;

206 i‡(!
h™dÀ
 || !
ªsH™dÀ
) {

207 
	`Sy°em_¥ötf
("IpcResource_request: InvalidÖaramaters\n");

208  
IpcResour˚_E_INVALARGS
;

211 
«me
 = 
	`IpcResour˚_toName
(
ty≥
);

212 i‡(!
«me
) {

213 
	`Sy°em_¥ötf
("IpcResource_request:ÑesourceÅype %d "

214 "i†övÆid\n", 
ty≥
);

215  
IpcResour˚_E_INVALARGS
;

218 i‡(
æí
 && !
ªsP¨ams
) {

219 
	`Sy°em_¥ötf
("IpcResource_request:ÑesourceÅype %d "

220 "√ed†∑ømëîs\n", 
ty≥
);

221  
IpcResour˚_E_INVALARGS
;

224 
	`°∫˝y
(
rd©a
->
ªsName
, 
«me
, 16);

225 
ªq
->
ªqTy≥
 = 
IpcResour˚_ReqTy≥_ALLOC
;

227 
ty≥
) {

228 
IpcResour˚_TYPE_IPU
:

229 
IpcResour˚_TYPE_DSP
:

230 
	`°r˝y
(
Ωroc
.
«me
, 
rd©a
->
ªsName
);

231 
	`°∫˝y
(
rd©a
->
ªsName
, "rproc", 16);

232 
ªsP¨ams
 = &
Ωroc
;

233 
æí
 = (
Ωroc
);

240 
	`mem˝y
(
rd©a
->
ªsP¨ams
,ÑesP¨ams, 
æí
);

241 
	`Sem≠h‹e_≥nd
(
h™dÀ
->
£m
, 
BIOS_WAIT_FOREVER
);

242 
°©us
 = 
	`MesßgeQC›y_£nd
(
	`Mu…iProc_gëId
("HOST"), 
h™dÀ
->
ªmŸe
,

243 
h™dÀ
->
ídPoöt
, 
ªq
, 
hÀn
 + 
æí
);

244 i‡(
°©us
) {

245 
	`Sem≠h‹e_po°
(
h™dÀ
->
£m
);

246 
	`Sy°em_¥ötf
("IpcResource_request: MessageQCopy_send "

247 "Áûed sètu†%d\n", 
°©us
);

248 
°©us
 = 
IpcResour˚_E_FAIL
;

249 
íd
;

252 
°©us
 = 
	`MesßgeQC›y_ªcv
(
h™dÀ
->
msgq
, 
ack
, &
Àn
, &
ªmŸe
,

253 
h™dÀ
->
timeout
);

254 
	`Sem≠h‹e_po°
(
h™dÀ
->
£m
);

255 i‡(
°©us
) {

256 
	`Sy°em_¥ötf
("IpcResource_request: MessageQCopy_recv "

257 "Áûed sètu†%d\n", 
°©us
);

258 
°©us
 = (°©u†=
MesßgeQC›y_E_TIMEOUT
Ë? 
IpcResour˚_E_TIMEOUT
 :

259 
IpcResour˚_E_FAIL
;

260 
íd
;

262 i‡(
ªmŸe
 !
h™dÀ
->remote) {

263 
	`Sy°em_¥ötf
("IpcResource_request: MessageQCopy_recv "

265 
ªmŸe
, 
h™dÀ
->remote);

266 
°©us
 = 
IpcResour˚_E_FAIL
;

267 
íd
;

270 
°©us
 = 
	`_IpcResour˚_å™¶©eEº‹
(
ack
->status);

271 i‡(
°©us
) {

272 
	`Sy°em_¥ötf
("IpcResource_request:Érror from Host "

273 "Áûed sètu†%d\n", 
°©us
);

274 
íd
;

277 
	`As£π_isTrue
(
Àn
 =
æí
 + 
Æí
 + (*
ad©a
), 
NULL
);

279 *
ªsH™dÀ
 = 
ad©a
->resHandle;

280 
	`mem˝y
(
ªsP¨ams
, 
ad©a
->ªsP¨ams, 
æí
);

282 
íd
:

283  
°©us
;

284 
	}
}

286 
I¡
 
	$IpcResour˚_ªque°D©a
(
IpcResour˚_H™dÀ
 
h™dÀ
,

287 
IpcResour˚_ResH™dÀ
 
ªsH™dÀ
,

288 
IpcResour˚_ReqD©aTy≥
 
d©aTy≥
,

289 
Void
 *
d©a
)

291 
Ch¨
 
msg
[
MAXMSGSIZE
];

292 
IpcResour˚_Ack
 *
ack
 = (
Void
 *)
msg
;

293 
IpcResour˚_Req
 *
ªq
 = (
Void
 *)
msg
;

294 
IpcResour˚_ReqD©a
 *
ªqD©a
 = (
Void
 *)
ªq
->
d©a
;

295 
UI¡16
 
hÀn
 = (*
ªqD©a
);

296 
UI¡16
 
Æí
 = (*
ack
);

297 
UI¡16
 
æí
 = 
	`IpcResour˚_ªqD©aLí
(
d©aTy≥
);

298 
UI¡16
 
Àn
;

299 
UI¡32
 
ªmŸe
;

300 
I¡
 
°©us
;

302 i‡(!
h™dÀ
) {

303 
	`Sy°em_¥ötf
("IpcResource_requestData: Invalid handle\n");

304  
IpcResour˚_E_INVALARGS
;

307 i‡(
æí
 && !
d©a
) {

308 
	`Sy°em_¥ötf
("IpcResource_requestData:Çeeds data struct\n");

309  
IpcResour˚_E_INVALARGS
;

312 
ªq
->
ªqTy≥
 = 
IpcResour˚_ReqTy≥_REQ_DATA
;

313 
ªqD©a
->
ªsH™dÀ
 =ÑesHandle;

314 
ªqD©a
->
ty≥
 = 
d©aTy≥
;

316 
	`Sem≠h‹e_≥nd
(
h™dÀ
->
£m
, 
BIOS_WAIT_FOREVER
);

317 
°©us
 = 
	`MesßgeQC›y_£nd
(
	`Mu…iProc_gëId
("HOST"), 
h™dÀ
->
ªmŸe
,

318 
h™dÀ
->
ídPoöt
, 
ªq
, (*ªqË+ 
hÀn
 + 
æí
);

319 i‡(
°©us
) {

320 
	`Sem≠h‹e_po°
(
h™dÀ
->
£m
);

321 
	`Sy°em_¥ötf
("IpcResource_requestData: MessageQCopy_send "

322 "Áûed sètu†%d\n", 
°©us
);

323 
°©us
 = 
IpcResour˚_E_FAIL
;

324 
íd
;

327 
°©us
 = 
	`MesßgeQC›y_ªcv
(
h™dÀ
->
msgq
, 
ack
, &
Àn
, &
ªmŸe
,

328 
h™dÀ
->
timeout
);

329 
	`Sem≠h‹e_po°
(
h™dÀ
->
£m
);

330 i‡(
°©us
) {

331 
	`Sy°em_¥ötf
("IpcResource_requestData: MessageQCopy_recv "

332 "Áûed sètu†%d\n", 
°©us
);

333 
°©us
 = (°©u†=
MesßgeQC›y_E_TIMEOUT
Ë? 
IpcResour˚_E_TIMEOUT
 :

334 
IpcResour˚_E_FAIL
;

335 
íd
;

338 
°©us
 = 
	`_IpcResour˚_å™¶©eEº‹
(
ack
->status);

339 i‡(
°©us
) {

340 
	`Sy°em_¥ötf
("IpcResource_requestData:Érror from Host "

341 "Áûed sètu†%d\n", 
°©us
);

342 
íd
;

345 
	`As£π_isTrue
(
Àn
 =(
æí
 + 
Æí
), 
NULL
);

347 
	`mem˝y
(
d©a
, 
ack
->d©a, 
æí
);

349 
íd
:

350  
°©us
;

351 
	}
}

353 
I¡
 
	$IpcResour˚_£tC⁄°øöts
(
IpcResour˚_H™dÀ
 
h™dÀ
,

354 
IpcResour˚_ResH™dÀ
 
ªsH™dÀ
,

355 
UI¡32
 
ªqTy≥
,

356 
Void
 *
c⁄°øöts
)

358 
Ch¨
 
msg
[
MAXMSGSIZE
];

359 
IpcResour˚_Ack
 *
ack
 = (
Void
 *)
msg
;

360 
IpcResour˚_Req
 *
ªq
 = (
Void
 *)
msg
;

361 
IpcResour˚_C⁄°øöt
 *
c
 = (
Void
 *)
ªq
->
d©a
;

362 
UI¡16
 
æí
 = (*
c
);

363 
UI¡16
 
Æí
 = (*
ack
);

364 
UI¡16
 
Àn
;

365 
UI¡32
 
ªmŸe
;

366 
I¡
 
°©us
;

368 i‡(!
h™dÀ
) {

369 
	`Sy°em_¥ötf
("IpcResource_setConstraints: InvalidÖaramaters\n");

370  
IpcResour˚_E_INVALARGS
;

373 i‡(!
c⁄°øöts
) {

374 
	`Sy°em_¥ötf
("IpcResource_setConstraints:ÇeedsÖarameters\n");

375  
IpcResour˚_E_INVALARGS
;

378 
ªq
->
ªqTy≥
 =ÑeqType;

379 
c
->
ªsH™dÀ
 =ÑesHandle;

381 
	`mem˝y
(&
c
->
cd©a
, 
c⁄°øöts
, 
æí
);

382 
	`Sem≠h‹e_≥nd
(
h™dÀ
->
£m
, 
BIOS_WAIT_FOREVER
);

383 
°©us
 = 
	`MesßgeQC›y_£nd
(
	`Mu…iProc_gëId
("HOST"), 
h™dÀ
->
ªmŸe
,

384 
h™dÀ
->
ídPoöt
, 
ªq
, (*ªqË+ 
æí
);

385 i‡(
°©us
) {

386 
	`Sem≠h‹e_po°
(
h™dÀ
->
£m
);

387 
	`Sy°em_¥ötf
("IpcResource_setConstraints: MessageQCopy_send "

388 "Áûed sètu†%d\n", 
°©us
);

389 
°©us
 = 
IpcResour˚_E_FAIL
;

390 
íd
;

393 i‡(
ªqTy≥
 =
IpcResour˚_ReqTy≥_REL_CONSTRAINTS
) {

394 
	`Sem≠h‹e_po°
(
h™dÀ
->
£m
);

395 
íd
;

398 
°©us
 = 
	`MesßgeQC›y_ªcv
(
h™dÀ
->
msgq
, 
ack
, &
Àn
, &
ªmŸe
,

399 
h™dÀ
->
timeout
);

400 
	`Sem≠h‹e_po°
(
h™dÀ
->
£m
);

401 i‡(
°©us
) {

402 
	`Sy°em_¥ötf
("IpcResource_setConstraints: MessageQCopy_recv "

403 "Áûed sètu†%d\n", 
°©us
);

404 
°©us
 = (°©u†=
MesßgeQC›y_E_TIMEOUT
Ë? 
IpcResour˚_E_TIMEOUT
 :

405 
IpcResour˚_E_FAIL
;

406 
íd
;

408 i‡(
ªmŸe
 !
h™dÀ
->remote) {

409 
	`Sy°em_¥ötf
("IpcResource_setConstraints: MessageQCopy_recv "

411 
ªmŸe
, 
h™dÀ
->remote);

412 
°©us
 = 
IpcResour˚_E_FAIL
;

413 
íd
;

416 
°©us
 = 
	`_IpcResour˚_å™¶©eEº‹
(
ack
->status);

417 i‡(
°©us
) {

418 
	`Sy°em_¥ötf
("IpcResource_setConstraints:Érror from Host "

419 "Áûed sètu†%d\n", 
°©us
);

420 
íd
;

423 
	`As£π_isTrue
(
Àn
 =(
æí
 + 
Æí
), 
NULL
);

425 
íd
:

426  
°©us
;

427 
	}
}

429 
I¡
 
	$IpcResour˚_ªque°C⁄°øöts
(
IpcResour˚_H™dÀ
 
h™dÀ
,

430 
IpcResour˚_ResH™dÀ
 
ªsH™dÀ
,

431 
Void
 *
c⁄°øöts
)

433  
	`IpcResour˚_£tC⁄°øöts
(
h™dÀ
,

434 
ªsH™dÀ
,

435 
IpcResour˚_ReqTy≥_REQ_CONSTRAINTS
,

436 
c⁄°øöts
);

437 
	}
}

439 
I¡
 
	$IpcResour˚_ªÀa£C⁄°øöts
(
IpcResour˚_H™dÀ
 
h™dÀ
,

440 
IpcResour˚_ResH™dÀ
 
ªsH™dÀ
,

441 
Void
 *
c⁄°øöts
)

443  
	`IpcResour˚_£tC⁄°øöts
(
h™dÀ
,

444 
ªsH™dÀ
,

445 
IpcResour˚_ReqTy≥_REL_CONSTRAINTS
,

446 
c⁄°øöts
);

447 
	}
}

449 
I¡
 
	$IpcResour˚_ªÀa£
(
IpcResour˚_H™dÀ
 
h™dÀ
,

450 
IpcResour˚_ResH™dÀ
 
ªsH™dÀ
)

452 
I¡
 
°©us
;

453 
Ch¨
 
msg
[(
IpcResour˚_Req
Ë+ (
IpcResour˚_FªeD©a
)];

454 
IpcResour˚_Req
 *
ªq
 = (
Void
 *)
msg
;

455 
IpcResour˚_FªeD©a
 *
ªl
 = (
Void
 *)
ªq
->
d©a
;

457 i‡(!
h™dÀ
) {

458 
	`Sy°em_¥ötf
("IpcResource_release: handle is NULL\n");

459  
IpcResour˚_E_INVALARGS
;

462 
ªq
->
ªqTy≥
 = 
IpcResour˚_ReqTy≥_FREE
;

463 
ªl
->
ªsH™dÀ
 =ÑesHandle;

465 
°©us
 = 
	`MesßgeQC›y_£nd
(
	`Mu…iProc_gëId
("HOST"), 
h™dÀ
->
ªmŸe
,

466 
h™dÀ
->
ídPoöt
, 
ªq
, (
msg
));

467 i‡(
°©us
) {

468 
	`Sy°em_¥ötf
("IpcResource_release: MessageQCopy_send "

469 "Áûed sètu†%d\n", 
°©us
);

472  
°©us
;

473 
	}
}

	@ti/resmgr/IpcResource.h

37 #i‚de‡
ti_IpcResour˚__ö˛ude


38 
	#ti_IpcResour˚__ö˛ude


	)

40 #i‡
deföed
 (
__˝lu•lus
)

53 
	#IpcResour˚_FOREVER
 ~(0)

	)

59 
	#IpcResour˚_S_SUCCESS
 0

	)

65 
	#IpcResour˚_E_FAIL
 -1

	)

71 
	#MesßgeQC›y_E_MEMORY
 -3

	)

77 
	#IpcResour˚_E_TIMEOUT
 -6

	)

83 
	#IpcResour˚_E_INVALARGS
 -7

	)

89 
	#IpcResour˚_E_NOCONN
 -8

	)

95 
	#IpcResour˚_E_RETMEMORY
 -9

	)

101 
	#IpcResour˚_E_BUSY
 -10

	)

107 
	#IpcResour˚_E_NORESOURCE
 -11

	)

113 
	#MAX_NUM_SDMA_CHANNELS
 16

	)

115 
	#IpcResour˚_C_FREQ
 0x1

	)

116 
	#IpcResour˚_C_LAT
 0x2

	)

117 
	#IpcResour˚_C_BW
 0x4

	)

120 
IpcResour˚_TYPE_GPTIMER
,

121 
IpcResour˚_TYPE_IVAHD
,

122 
IpcResour˚_TYPE_IVASEQ0
,

123 
IpcResour˚_TYPE_IVASEQ1
,

124 
IpcResour˚_TYPE_L3BUS
,

125 
IpcResour˚_TYPE_ISS
,

126 
IpcResour˚_TYPE_FDIF
,

127 
IpcResour˚_TYPE_SL2IF
,

128 
IpcResour˚_TYPE_AUXCLK
,

129 
IpcResour˚_TYPE_REGULATOR
,

130 
IpcResour˚_TYPE_GPIO
,

131 
IpcResour˚_TYPE_SDMA
,

132 
IpcResour˚_TYPE_IPU
,

133 
IpcResour˚_TYPE_DSP
,

134 
IpcResour˚_TYPE_I2C


135 } 
	tIpcResour˚_Ty≥
;

138 
IpcResour˚_ReqD©aTy≥_MAX_FREQ


139 } 
	tIpcResour˚_ReqD©aTy≥
;

143 
UI¡32
 
id
;

144 
UI¡32
 
§cClk
;

145 } 
	tIpcResour˚_G±
;

148 
UI¡32
 
˛kId
;

149 
UI¡32
 
˛kR©e
;

150 
UI¡32
 
∑ª¡SrcClk
;

151 
UI¡32
 
∑ª¡SrcClkR©e
;

152 } 
	tIpcResour˚_Aux˛k
;

155 
UI¡32
 
ªguœt‹Id
;

156 
UI¡32
 
möUV
;

157 
UI¡32
 
maxUV
;

158 } 
	tIpcResour˚_Reguœt‹
;

161 
UI¡32
 
gpioId
;

162 } 
	tIpcResour˚_Gpio
;

165 
UI¡32
 
numCh
;

166 
I¡32
 
ch™√ls
[
MAX_NUM_SDMA_CHANNELS
];

167 } 
	tIpcResour˚_Sdma
;

170 
UI¡32
 
id
;

171 } 
	tIpcResour˚_I2c
;

175 
I¡32
 
mask
;

176 
I¡32
 
‰equícy
;

177 
I¡32
 
b™dwidth
;

178 
I¡32
 
œãncy
;

179 } 
	tIpcResour˚_C⁄°øötD©a
;

183 
UI¡32
 
vÆue
;

184 } 
	tIpcResour˚_Fªq
;

189 
IpcResour˚_Obje˘
 *
	tIpcResour˚_H™dÀ
;

191 
I¡32
 
	tIpcResour˚_ResH™dÀ
;

198 
IpcResour˚_H™dÀ
 
IpcResour˚_c⁄√˘
(
UI¡
 
timeout
);

199 
I¡
 
IpcResour˚_ªque°
(
IpcResour˚_H™dÀ
 
h™dÀ
,

200 
IpcResour˚_ResH™dÀ
 *
ªsH™dÀ
,

201 
IpcResour˚_Ty≥
 
ty≥
, 
Void
 *
ªsP¨ams
);

202 
I¡
 
IpcResour˚_ªÀa£
(
IpcResour˚_H™dÀ
 
h™dÀ
,

203 
IpcResour˚_ResH™dÀ
 
ªsH™dÀ
);

204 
I¡
 
IpcResour˚_ªque°C⁄°øöts
(
IpcResour˚_H™dÀ
 
h™dÀ
,

205 
IpcResour˚_ResH™dÀ
 
ªsH™dÀ
,

206 
Void
 *
c⁄°øöts
);

207 
I¡
 
IpcResour˚_ªÀa£C⁄°øöts
(
IpcResour˚_H™dÀ
 
h™dÀ
,

208 
IpcResour˚_ResH™dÀ
 
ªsH™dÀ
,

209 
Void
 *
c⁄°øöts
);

210 
I¡
 
IpcResour˚_disc⁄√˘
(
IpcResour˚_H™dÀ
 
h™dÀ
);

211 
I¡
 
IpcResour˚_ªque°D©a
(
IpcResour˚_H™dÀ
 
h™dÀ
,

212 
IpcResour˚_ResH™dÀ
 
ªsH™dÀ
,

213 
IpcResour˚_ReqD©aTy≥
 
d©aTy≥
,

214 
Void
 *
d©a
);

217 #i‡
deföed
 (
__˝lu•lus
)

	@ti/resmgr/_IpcResource.h

37 #i‚de‡
ti__IpcResour˚__ö˛ude


38 
	#ti__IpcResour˚__ö˛ude


	)

40 #i‡
deföed
 (
__˝lu•lus
)

50 
	#ARRAY_SIZE
(
x
Ë((xË/ (*(x)))

	)

56 
	#ENOENT
 2

	)

57 
	#ENOMEM
 12

	)

58 
	#EBUSY
 16

	)

59 
	#EINVAL
 22

	)

62 
IpcResour˚_ReqTy≥_CONNECT
,

63 
IpcResour˚_ReqTy≥_DISCONNECT
,

64 
IpcResour˚_ReqTy≥_ALLOC
,

65 
IpcResour˚_ReqTy≥_FREE
,

66 
IpcResour˚_ReqTy≥_REQ_CONSTRAINTS
,

67 
IpcResour˚_ReqTy≥_REL_CONSTRAINTS
,

68 
IpcResour˚_ReqTy≥_REQ_DATA


69 } 
	tIpcResour˚_ReqTy≥
;

72 
Ch¨
 
ªsName
[16];

73 
Ch¨
 
ªsP¨ams
[];

74 } 
	tIpcResour˚_AŒocD©a
;

77 
UI¡32
 
ªsH™dÀ
;

78 } 
	tIpcResour˚_FªeD©a
;

81 
UI¡32
 
ªsH™dÀ
;

82 
IpcResour˚_C⁄°øötD©a
 
cd©a
;

83 } 
	tIpcResour˚_C⁄°øöt
;

86 
UI¡32
 
ªqTy≥
;

87 
Ch¨
 
d©a
[];

88 } 
	tIpcResour˚_Req
;

91 
UI¡32
 
ªsH™dÀ
;

92 
UI¡32
 
ba£
;

93 
Ch¨
 
ªsP¨ams
[];

94 } 
	tIpcResour˚_AckD©a
;

97 
UI¡32
 
ªqTy≥
;

98 
UI¡32
 
°©us
;

99 
Ch¨
 
d©a
[];

100 } 
	tIpcResour˚_Ack
;

103 
Ch¨
 
«me
[16];

104 } 
	tIpcResour˚_Pro˚ss‹
;

107 
UI¡32
 
ªsH™dÀ
;

108 
UI¡32
 
ty≥
;

109 
Ch¨
 
d©a
[];

110 } 
	tIpcResour˚_ReqD©a
;

115 
	sIpcResour˚_Obje˘
 {

116 
UI¡32
 
ídPoöt
;

117 
UI¡32
 
ªmŸe
;

118 
UI¡
 
timeout
;

119 
Sem≠h‹e_H™dÀ
 
£m
;

120 
MesßgeQC›y_H™dÀ
 
msgq
;

124 
Ch¨
 * 
IpcResour˚_«mes
[] = {

142 
ölöe
 
Ch¨
 *
IpcResour˚_toName
(
UI¡
 
ty≥
)

144 i‡(
ty≥
 < 
ARRAY_SIZE
(
IpcResour˚_«mes
)) {

145  
IpcResour˚_«mes
[
ty≥
];

147  
NULL
;

151 #i‡
deföed
 (
__˝lu•lus
)

	@ti/resources/IpcMemory.c

38 
	~<xdc/ru¡ime/Sy°em.h
>

39 
	~<xdc/ru¡ime/Sèπup.h
>

41 
	~<ti/ªsour˚s/rsc_ty≥s.h
>

42 
	~"∑ckage/öã∫Æ/IpcMem‹y.xdc.h
"

48 
IpcMem‹y_MemE¡ry
 *
	$IpcMem‹y_gëE¡ry
(
UI¡
 
ödex
)

50 
UI¡32
 
off£t
;

51 
UI¡32
 *
ty≥
;

52 
IpcMem‹y_MemE¡ry
 *
íåy
 = 
NULL
;

53 
IpcMem‹y_RscTabÀ
 *
èbÀ
 = (IpcMemory_RscTable *)

54 (
IpcMem‹y_moduÀ
->
pTabÀ
);

56 i‡(
ödex
 >
èbÀ
->
num
) {

57  (
NULL
);

60 
off£t
 = (
UI¡32
)((
Ch¨
 *)
èbÀ
 +ÅabÀ->off£t[
ödex
]);

61 
ty≥
 = (
UI¡32
 *)
off£t
;

62 i‡(*
ty≥
 =
TYPE_CARVEOUT
 || *ty≥ =
TYPE_DEVMEM
) {

63 
íåy
 = (
IpcMem‹y_MemE¡ry
 *Ë((
Ch¨
 *)
off£t
);

66  (
íåy
);

67 
	}
}

78 
I¡
 
	$IpcMem‹y_ModuÀ_°¨tup
(
I¡
 
pha£
)

80 
	`IpcMem‹y_öô
();

81  (
Sèπup_DONE
);

82 
	}
}

87 
I¡
 
	$IpcMem‹y_vútToPhys
(
UI¡32
 
va
, UI¡32 *
∑
)

89 
UI¡32
 
i
;

90 
UI¡32
 
off£t
;

91 
IpcMem‹y_MemE¡ry
 *
íåy
;

93 *
∑
 = 
NULL
;

95 
i
 = 0; i < 
moduÀ
->
pTabÀ
->
num
; i++) {

96 
íåy
 = 
	`IpcMem‹y_gëE¡ry
(
i
);

97 i‡(
íåy
 && 
va
 >íåy->
da
 && v®< (íåy->d®+É¡ry->
Àn
)) {

98 
off£t
 = 
va
 - 
íåy
->
da
;

99 *
∑
 = 
íåy
->∑ + 
off£t
;

100  (
IpcMem‹y_S_SUCCESS
);

104  (
IpcMem‹y_E_NOTFOUND
);

105 
	}
}

110 
I¡
 
	$IpcMem‹y_physToVút
(
UI¡32
 
∑
, UI¡32 *
va
)

112 
UI¡32
 
i
;

113 
UI¡32
 
off£t
;

114 
IpcMem‹y_MemE¡ry
 *
íåy
;

116 *
va
 = 
NULL
;

118 
i
 = 0; i < 
moduÀ
->
pTabÀ
->
num
; i++) {

119 
íåy
 = 
	`IpcMem‹y_gëE¡ry
(
i
);

120 i‡(
íåy
 && 
∑
 >íåy->∑ &&Ö®< (íåy->∑ +É¡ry->
Àn
)) {

121 
off£t
 = 
∑
 - 
íåy
->pa;

122 *
va
 = 
íåy
->
da
 + 
off£t
;

123  (
IpcMem‹y_S_SUCCESS
);

127  (
IpcMem‹y_E_NOTFOUND
);

128 
	}
}

	@ti/resources/rsc_table_dsp.h

42 #i‚de‡
_RSC_TABLE_DSP_H_


43 
	#_RSC_TABLE_DSP_H_


	)

45 
	~<ti/ªsour˚s/rsc_ty≥s.h
>

46 
	~<ti/g©es/hw•ölock/HwSpölock.h
>

49 
	#L4_44XX_BASE
 0x4A000000

	)

51 
	#L4_PERIPHERAL_L4CFG
 (
L4_44XX_BASE
)

	)

52 
	#DSP_PERIPHERAL_L4CFG
 0x4A000000

	)

54 
	#L4_PERIPHERAL_L4PER
 0x48000000

	)

55 
	#DSP_PERIPHERAL_L4PER
 0x48000000

	)

57 
	#L4_PERIPHERAL_L4EMU
 0x54000000

	)

58 
	#DSP_PERIPHERAL_L4EMU
 0x54000000

	)

60 
	#L3_PERIPHERAL_DMM
 0x4E000000

	)

61 
	#DSP_PERIPHERAL_DMM
 0x4E000000

	)

63 
	#L3_PERIPHERAL_ISS
 0x52000000

	)

64 
	#DSP_PERIPHERAL_ISS
 0x52000000

	)

66 
	#L3_TILER_MODE_0_1
 0x60000000

	)

67 
	#DSP_TILER_MODE_0_1
 0x60000000

	)

69 
	#L3_TILER_MODE_2
 0x70000000

	)

70 
	#DSP_TILER_MODE_2
 0x70000000

	)

72 
	#L3_TILER_MODE_3
 0x78000000

	)

73 
	#DSP_TILER_MODE_3
 0x78000000

	)

75 
	#DSP_MEM_TEXT
 0x20000000

	)

77 
	#DSP_MEM_IOBUFS
 0x80000000

	)

78 
	#DSP_MEM_DATA
 0x90000000

	)

79 
	#DSP_MEM_HEAP
 0x90100000

	)

81 
	#DSP_MEM_IPC_DATA
 0x9F000000

	)

82 
	#DSP_MEM_IPC_VRING
 0xA0000000

	)

83 
	#DSP_MEM_RPMSG_VRING0
 0xA0000000

	)

84 
	#DSP_MEM_RPMSG_VRING1
 0xA0004000

	)

85 
	#DSP_MEM_VRING_BUFS0
 0xA0040000

	)

86 
	#DSP_MEM_VRING_BUFS1
 0xA0080000

	)

88 
	#DSP_MEM_IPC_VRING_SIZE
 
SZ_1M


	)

89 
	#DSP_MEM_IPC_DATA_SIZE
 
SZ_1M


	)

90 
	#DSP_MEM_TEXT_SIZE
 
SZ_1M


	)

91 
	#DSP_MEM_DATA_SIZE
 
SZ_1M


	)

92 
	#DSP_MEM_HEAP_SIZE
 (
SZ_1M
 * 3)

	)

93 
	#DSP_MEM_IOBUFS_SIZE
 (
SZ_1M
 * 90)

	)

99 #ifde‡
OMAP5


100 
	#PHYS_MEM_IPC_VRING
 0x95000000

	)

102 
	#PHYS_MEM_IPC_VRING
 0x98800000

	)

106 
	#PHYS_MEM_IOBUFS
 0xBA300000

	)

112 
	#DSP_RPMSG_VQ0_SIZE
 256

	)

113 
	#DSP_RPMSG_VQ1_SIZE
 256

	)

116 
	#RPMSG_DSP_C0_FEATURES
 1

	)

118 
	sªsour˚_èbÀ
 {

119 
UI¡32
 
	mvîsi⁄
;

120 
UI¡32
 
	mnum
;

121 
UI¡32
 
	mª£rved
[2];

122 
UI¡32
 
	moff£t
[16];

125 
fw_rsc_vdev
 
	mΩmsg_vdev
;

126 
fw_rsc_vdev_vrög
 
	mΩmsg_vrög0
;

127 
fw_rsc_vdev_vrög
 
	mΩmsg_vrög1
;

130 
fw_rsc_ˇrveout
 
	mãxt_cout
;

133 
fw_rsc_ˇrveout
 
	md©a_cout
;

136 
fw_rsc_ˇrveout
 
	mhóp_cout
;

139 
fw_rsc_ˇrveout
 
	mùcd©a_cout
;

142 
fw_rsc_åa˚
 
	måa˚
;

145 
fw_rsc_devmem
 
	mdevmem0
;

148 
fw_rsc_devmem
 
	mdevmem1
;

151 
fw_rsc_devmem
 
	mdevmem2
;

154 
fw_rsc_devmem
 
	mdevmem3
;

157 
fw_rsc_devmem
 
	mdevmem4
;

160 
fw_rsc_devmem
 
	mdevmem5
;

163 
fw_rsc_devmem
 
	mdevmem6
;

166 
fw_rsc_devmem
 
	mdevmem7
;

169 
fw_rsc_devmem
 
	mdevmem8
;

172 
fw_rsc_cu°om
 
	mhw•ö
;

175 
	#TRACEBUFADDR
 (
UI¡32
)&
ti_åa˚_SysMö_ModuÀ_Sèã_0_outbuf__A


	)

176 
	#HWSPINKLOCKSTATEADDR
 (
UI¡32
)&
ti_g©es_HwSpölock_sh¨edSèã


	)

177 
	#HWSPINKLOCKNUMADDR
 (
UI¡32
)&
ti_g©es_HwSpölock_numLocks


	)

179 #¥agm®
DATA_SECTION
(
ti_ªsour˚s_Resour˚TabÀ
, ".resource_table")

180 #¥agm®
DATA_ALIGN
(
ti_ªsour˚s_Resour˚TabÀ
, 4096)

182 
ªsour˚_èbÀ
 
	gti_ªsour˚s_Resour˚TabÀ
 = {

188 
off£tof
(
ªsour˚_èbÀ
, 
Ωmsg_vdev
),

189 
off£tof
(
ªsour˚_èbÀ
, 
ãxt_cout
),

190 
off£tof
(
ªsour˚_èbÀ
, 
d©a_cout
),

191 
off£tof
(
ªsour˚_èbÀ
, 
hóp_cout
),

192 
off£tof
(
ªsour˚_èbÀ
, 
ùcd©a_cout
),

193 
off£tof
(
ªsour˚_èbÀ
, 
åa˚
),

194 
off£tof
(
ªsour˚_èbÀ
, 
devmem0
),

195 
off£tof
(
ªsour˚_èbÀ
, 
devmem1
),

196 
off£tof
(
ªsour˚_èbÀ
, 
devmem2
),

197 
off£tof
(
ªsour˚_èbÀ
, 
devmem3
),

198 
off£tof
(
ªsour˚_èbÀ
, 
devmem4
),

199 
off£tof
(
ªsour˚_èbÀ
, 
devmem5
),

200 
off£tof
(
ªsour˚_èbÀ
, 
devmem6
),

201 
off£tof
(
ªsour˚_èbÀ
, 
devmem7
),

202 
off£tof
(
ªsour˚_èbÀ
, 
devmem8
),

203 
off£tof
(
ªsour˚_èbÀ
, 
hw•ö
),

208 
TYPE_VDEV
, 
VIRTIO_ID_RPMSG
, 0,

209 
RPMSG_DSP_C0_FEATURES
, 0, 0, 0, 2, { 0, 0 },

213 { 
DSP_MEM_RPMSG_VRING0
, 4096, 
DSP_RPMSG_VQ0_SIZE
, 1, 0 },

214 { 
DSP_MEM_RPMSG_VRING1
, 4096, 
DSP_RPMSG_VQ1_SIZE
, 2, 0 },

217 
TYPE_CARVEOUT
,

218 
DSP_MEM_TEXT
, 0,

219 
DSP_MEM_TEXT_SIZE
, 0, 0, "DSP_MEM_TEXT",

223 
TYPE_CARVEOUT
,

224 
DSP_MEM_DATA
, 0,

225 
DSP_MEM_DATA_SIZE
, 0, 0, "DSP_MEM_DATA",

229 
TYPE_CARVEOUT
,

230 
DSP_MEM_HEAP
, 0,

231 
DSP_MEM_HEAP_SIZE
, 0, 0, "DSP_MEM_HEAP",

235 
TYPE_CARVEOUT
,

236 
DSP_MEM_IPC_DATA
, 0,

237 
DSP_MEM_IPC_DATA_SIZE
, 0, 0, "DSP_MEM_IPC_DATA",

241 
TYPE_TRACE
, 
TRACEBUFADDR
, 0x8000, 0, "trace:dsp",

245 
TYPE_DEVMEM
,

246 
DSP_MEM_IPC_VRING
, 
PHYS_MEM_IPC_VRING
,

247 
DSP_MEM_IPC_VRING_SIZE
, 0, 0, "DSP_MEM_IPC_VRING",

251 
TYPE_DEVMEM
,

252 
DSP_MEM_IOBUFS
, 
PHYS_MEM_IOBUFS
,

253 
DSP_MEM_IOBUFS_SIZE
, 0, 0, "DSP_MEM_IOBUFS",

257 
TYPE_DEVMEM
,

258 
DSP_TILER_MODE_0_1
, 
L3_TILER_MODE_0_1
,

259 
SZ_256M
, 0, 0, "DSP_TILER_MODE_0_1",

263 
TYPE_DEVMEM
,

264 
DSP_TILER_MODE_2
, 
L3_TILER_MODE_2
,

265 
SZ_128M
, 0, 0, "DSP_TILER_MODE_2",

269 
TYPE_DEVMEM
,

270 
DSP_TILER_MODE_3
, 
L3_TILER_MODE_3
,

271 
SZ_128M
, 0, 0, "DSP_TILER_MODE_3",

275 
TYPE_DEVMEM
,

276 
DSP_PERIPHERAL_L4CFG
, 
L4_PERIPHERAL_L4CFG
,

277 
SZ_16M
, 0, 0, "DSP_PERIPHERAL_L4CFG",

281 
TYPE_DEVMEM
,

282 
DSP_PERIPHERAL_L4PER
, 
L4_PERIPHERAL_L4PER
,

283 
SZ_16M
, 0, 0, "DSP_PERIPHERAL_L4PER",

287 
TYPE_DEVMEM
,

288 
DSP_PERIPHERAL_DMM
, 
L3_PERIPHERAL_DMM
,

289 
SZ_1M
, 0, 0, "DSP_PERIPHERAL_DMM",

293 
TYPE_DEVMEM
,

294 
DSP_PERIPHERAL_ISS
, 
L3_PERIPHERAL_ISS
,

295 
SZ_256K
, 0, 0, "DSP_PERIPHERAL_ISS",

299 
TYPE_CUSTOM
, 
TYPE_HWSPIN
,

300 (
fw_rsc_cu°om_hw•ö
),

301 { 
HWSPINKLOCKNUMADDR
, 
HWSPINKLOCKSTATEADDR
, "hwspin"},

	@ti/resources/rsc_table_ipu.h

42 #i‚de‡
_RSC_TABLE_IPU_H_


43 
	#_RSC_TABLE_IPU_H_


	)

45 
	~<ti/ªsour˚s/rsc_ty≥s.h
>

46 
	~<ti/g©es/hw•ölock/HwSpölock.h
>

49 
	#L4_44XX_BASE
 0x4a000000

	)

51 
	#L4_PERIPHERAL_L4CFG
 (
L4_44XX_BASE
)

	)

52 
	#IPU_PERIPHERAL_L4CFG
 0xAA000000

	)

54 
	#L4_PERIPHERAL_L4PER
 0x48000000

	)

55 
	#IPU_PERIPHERAL_L4PER
 0xA8000000

	)

57 
	#L4_PERIPHERAL_L4EMU
 0x54000000

	)

58 
	#IPU_PERIPHERAL_L4EMU
 0xB4000000

	)

60 
	#L3_PERIPHERAL_DMM
 0x4E000000

	)

61 
	#IPU_PERIPHERAL_DMM
 0xAE000000

	)

63 
	#L3_IVAHD_CONFIG
 0x5A000000

	)

64 
	#IPU_IVAHD_CONFIG
 0xBA000000

	)

66 
	#L3_IVAHD_SL2
 0x5B000000

	)

67 
	#IPU_IVAHD_SL2
 0xBB000000

	)

69 
	#L3_TILER_MODE_0_1
 0x60000000

	)

70 
	#IPU_TILER_MODE_0_1
 0x60000000

	)

72 
	#L3_TILER_MODE_2
 0x70000000

	)

73 
	#IPU_TILER_MODE_2
 0x70000000

	)

75 
	#L3_TILER_MODE_3
 0x78000000

	)

76 
	#IPU_TILER_MODE_3
 0x78000000

	)

78 
	#IPU_MEM_TEXT
 0x0

	)

79 
	#IPU_MEM_DATA
 0x80000000

	)

81 #ifde‡
OMAP5


82 
	#IPU_MEM_IOBUFS
 0x90000000

	)

84 
	#IPU_MEM_IOBUFS
 0x88000000

	)

87 
	#IPU_MEM_IPC_DATA
 0x9F000000

	)

88 
	#IPU_MEM_IPC_VRING
 0xA0000000

	)

89 
	#IPU_MEM_RPMSG_VRING0
 0xA0000000

	)

90 
	#IPU_MEM_RPMSG_VRING1
 0xA0004000

	)

91 
	#IPU_MEM_VRING_BUFS0
 0xA0040000

	)

92 
	#IPU_MEM_VRING_BUFS1
 0xA0080000

	)

94 
	#IPU_MEM_IPC_VRING_SIZE
 
SZ_1M


	)

95 
	#IPU_MEM_IPC_DATA_SIZE
 
SZ_1M


	)

96 
	#IPU_MEM_TEXT_SIZE
 (
SZ_1M
 * 6)

	)

97 #ifde‡
OMAP5


98 
	#IPU_MEM_DATA_SIZE
 (
SZ_1M
 * 156)

	)

100 
	#IPU_MEM_DATA_SIZE
 (
SZ_1M
 * 100)

	)

102 
	#IPU_MEM_IOBUFS_SIZE
 (
SZ_1M
 * 90)

	)

108 #ifde‡
OMAP5


109 
	#PHYS_MEM_IPC_VRING
 0x95800000

	)

111 
	#PHYS_MEM_IPC_VRING
 0x99000000

	)

114 
	#PHYS_MEM_IOBUFS
 0xBA300000

	)

120 
	#IPU_RPMSG_VQ0_SIZE
 256

	)

121 
	#IPU_RPMSG_VQ1_SIZE
 256

	)

124 
	#RPMSG_IPU_C0_FEATURES
 1

	)

126 
	sªsour˚_èbÀ
 {

127 
UI¡32
 
	mvîsi⁄
;

128 
UI¡32
 
	mnum
;

129 
UI¡32
 
	mª£rved
[2];

130 
UI¡32
 
	moff£t
[16];

133 
fw_rsc_vdev
 
	mΩmsg_vdev
;

134 
fw_rsc_vdev_vrög
 
	mΩmsg_vrög0
;

135 
fw_rsc_vdev_vrög
 
	mΩmsg_vrög1
;

138 
fw_rsc_ˇrveout
 
	mãxt_cout
;

141 
fw_rsc_ˇrveout
 
	md©a_cout
;

144 
fw_rsc_ˇrveout
 
	mùcd©a_cout
;

147 
fw_rsc_åa˚
 
	måa˚
;

150 
fw_rsc_devmem
 
	mdevmem0
;

153 
fw_rsc_devmem
 
	mdevmem1
;

156 
fw_rsc_devmem
 
	mdevmem2
;

159 
fw_rsc_devmem
 
	mdevmem3
;

162 
fw_rsc_devmem
 
	mdevmem4
;

165 
fw_rsc_devmem
 
	mdevmem5
;

168 
fw_rsc_devmem
 
	mdevmem6
;

171 
fw_rsc_devmem
 
	mdevmem7
;

174 
fw_rsc_devmem
 
	mdevmem8
;

177 
fw_rsc_devmem
 
	mdevmem9
;

180 
fw_rsc_cu°om
 
	mhw•ö
;

183 
	#TRACEBUFADDR
 (
UI¡32
)&
ti_åa˚_SysMö_ModuÀ_Sèã_0_outbuf__A


	)

184 
	#HWSPINKLOCKSTATEADDR
 (
UI¡32
)&
ti_g©es_HwSpölock_sh¨edSèã


	)

185 
	#HWSPINKLOCKNUMADDR
 (
UI¡32
)&
ti_g©es_HwSpölock_numLocks


	)

187 #¥agm®
DATA_SECTION
(
ti_ªsour˚s_Resour˚TabÀ
, ".resource_table")

188 #¥agm®
DATA_ALIGN
(
ti_ªsour˚s_Resour˚TabÀ
, 4096)

190 
ªsour˚_èbÀ
 
	gti_ªsour˚s_Resour˚TabÀ
 = {

196 
off£tof
(
ªsour˚_èbÀ
, 
Ωmsg_vdev
),

197 
off£tof
(
ªsour˚_èbÀ
, 
ãxt_cout
),

198 
off£tof
(
ªsour˚_èbÀ
, 
d©a_cout
),

199 
off£tof
(
ªsour˚_èbÀ
, 
ùcd©a_cout
),

200 
off£tof
(
ªsour˚_èbÀ
, 
åa˚
),

201 
off£tof
(
ªsour˚_èbÀ
, 
devmem0
),

202 
off£tof
(
ªsour˚_èbÀ
, 
devmem1
),

203 
off£tof
(
ªsour˚_èbÀ
, 
devmem2
),

204 
off£tof
(
ªsour˚_èbÀ
, 
devmem3
),

205 
off£tof
(
ªsour˚_èbÀ
, 
devmem4
),

206 
off£tof
(
ªsour˚_èbÀ
, 
devmem5
),

207 
off£tof
(
ªsour˚_èbÀ
, 
devmem6
),

208 
off£tof
(
ªsour˚_èbÀ
, 
devmem7
),

209 
off£tof
(
ªsour˚_èbÀ
, 
devmem8
),

210 
off£tof
(
ªsour˚_èbÀ
, 
devmem9
),

211 
off£tof
(
ªsour˚_èbÀ
, 
hw•ö
),

216 
TYPE_VDEV
, 
VIRTIO_ID_RPMSG
, 0,

217 
RPMSG_IPU_C0_FEATURES
, 0, 0, 0, 2, { 0, 0 },

221 { 
IPU_MEM_RPMSG_VRING0
, 4096, 
IPU_RPMSG_VQ0_SIZE
, 1, 0 },

222 { 
IPU_MEM_RPMSG_VRING1
, 4096, 
IPU_RPMSG_VQ1_SIZE
, 2, 0 },

225 
TYPE_CARVEOUT
,

226 
IPU_MEM_TEXT
, 0,

227 
IPU_MEM_TEXT_SIZE
, 0, 0, "IPU_MEM_TEXT",

231 
TYPE_CARVEOUT
,

232 
IPU_MEM_DATA
, 0,

233 
IPU_MEM_DATA_SIZE
, 0, 0, "IPU_MEM_DATA",

237 
TYPE_CARVEOUT
,

238 
IPU_MEM_IPC_DATA
, 0,

239 
IPU_MEM_IPC_DATA_SIZE
, 0, 0, "IPU_MEM_IPC_DATA",

243 
TYPE_TRACE
, 
TRACEBUFADDR
, 0x8000, 0, "trace:sysm3",

247 
TYPE_DEVMEM
,

248 
IPU_MEM_IPC_VRING
, 
PHYS_MEM_IPC_VRING
,

249 
IPU_MEM_IPC_VRING_SIZE
, 0, 0, "IPU_MEM_IPC_VRING",

253 
TYPE_DEVMEM
,

254 
IPU_MEM_IOBUFS
, 
PHYS_MEM_IOBUFS
,

255 
IPU_MEM_IOBUFS_SIZE
, 0, 0, "IPU_MEM_IOBUFS",

259 
TYPE_DEVMEM
,

260 
IPU_TILER_MODE_0_1
, 
L3_TILER_MODE_0_1
,

261 
SZ_256M
, 0, 0, "IPU_TILER_MODE_0_1",

265 
TYPE_DEVMEM
,

266 
IPU_TILER_MODE_2
, 
L3_TILER_MODE_2
,

267 
SZ_128M
, 0, 0, "IPU_TILER_MODE_2",

271 
TYPE_DEVMEM
,

272 
IPU_TILER_MODE_3
, 
L3_TILER_MODE_3
,

273 
SZ_128M
, 0, 0, "IPU_TILER_MODE_3",

277 
TYPE_DEVMEM
,

278 
IPU_PERIPHERAL_L4CFG
, 
L4_PERIPHERAL_L4CFG
,

279 
SZ_16M
, 0, 0, "IPU_PERIPHERAL_L4CFG",

283 
TYPE_DEVMEM
,

284 
IPU_PERIPHERAL_L4PER
, 
L4_PERIPHERAL_L4PER
,

285 
SZ_16M
, 0, 0, "IPU_PERIPHERAL_L4PER",

289 
TYPE_DEVMEM
,

290 
IPU_IVAHD_CONFIG
, 
L3_IVAHD_CONFIG
,

291 
SZ_16M
, 0, 0, "IPU_IVAHD_CONFIG",

295 
TYPE_DEVMEM
,

296 
IPU_IVAHD_SL2
, 
L3_IVAHD_SL2
,

297 
SZ_16M
, 0, 0, "IPU_IVAHD_SL2",

301 
TYPE_DEVMEM
,

302 
IPU_PERIPHERAL_DMM
, 
L3_PERIPHERAL_DMM
,

303 
SZ_1M
, 0, 0, "IPU_PERIPHERAL_DMM",

307 
TYPE_CUSTOM
, 
TYPE_HWSPIN
,

308 (
fw_rsc_cu°om_hw•ö
),

309 { 
HWSPINKLOCKNUMADDR
, 
HWSPINKLOCKSTATEADDR
, "hwspin"},

	@ti/resources/rsc_types.h

41 #i‚de‡
_RSC_TYPES_H_


42 
	#_RSC_TYPES_H_


	)

44 
	~<xdc/°d.h
>

47 
	#SZ_64K
 0x00010000

	)

48 
	#SZ_128K
 0x00020000

	)

49 
	#SZ_256K
 0x00040000

	)

50 
	#SZ_512K
 0x00080000

	)

51 
	#SZ_1M
 0x00100000

	)

52 
	#SZ_2M
 0x00200000

	)

53 
	#SZ_4M
 0x00400000

	)

54 
	#SZ_8M
 0x00800000

	)

55 
	#SZ_16M
 0x01000000

	)

56 
	#SZ_32M
 0x02000000

	)

57 
	#SZ_64M
 0x04000000

	)

58 
	#SZ_128M
 0x08000000

	)

59 
	#SZ_256M
 0x10000000

	)

60 
	#SZ_512M
 0x20000000

	)

63 
	#VIRTIO_ID_CONSOLE
 3

	)

64 
	#VIRTIO_ID_RPMSG
 7

	)

67 
	#VIRTIO_RPMSG_F_NS
 0

	)

68 
	#VIRTIO_RING_F_SYMMETRIC
 30

	)

71 
	#TYPE_CARVEOUT
 0

	)

72 
	#TYPE_DEVMEM
 1

	)

73 
	#TYPE_TRACE
 2

	)

74 
	#TYPE_VDEV
 3

	)

75 
	#TYPE_CRASHDUMP
 4

	)

76 
	#TYPE_CUSTOM
 5

	)

79 
	#TYPE_HWSPIN
 1

	)

82 
	sfw_rsc_cu°om_hw•ö
 {

83 
UI¡32
 
	mnum_da
;

84 
UI¡32
 
	m°©e_da
;

85 
Ch¨
 
	m«me
[32];

88 
	ufw_cu°om
 {

90 
fw_rsc_cu°om_hw•ö
 
	mhw•ö
;

92 
UI¡32
 
	mª£rved
;

96 
	sfw_rsc_ˇrveout
 {

97 
UI¡32
 
	mty≥
;

98 
UI¡32
 
	mda
;

99 
UI¡32
 
	m∑
;

100 
UI¡32
 
	mÀn
;

101 
UI¡32
 
	mÊags
;

102 
UI¡32
 
	mª£rved
;

103 
Ch¨
 
	m«me
[32];

106 
	sfw_rsc_devmem
 {

107 
UI¡32
 
	mty≥
;

108 
UI¡32
 
	mda
;

109 
UI¡32
 
	m∑
;

110 
UI¡32
 
	mÀn
;

111 
UI¡32
 
	mÊags
;

112 
UI¡32
 
	mª£rved
;

113 
Ch¨
 
	m«me
[32];

116 
	sfw_rsc_åa˚
 {

117 
UI¡32
 
	mty≥
;

118 
UI¡32
 
	mda
;

119 
UI¡32
 
	mÀn
;

120 
UI¡32
 
	mª£rved
;

121 
Ch¨
 
	m«me
[32];

124 
	sfw_rsc_vdev_vrög
 {

125 
UI¡32
 
	mda
;

126 
UI¡32
 
	mÆign
;

127 
UI¡32
 
	mnum
;

128 
UI¡32
 
	mnŸifyid
;

129 
UI¡32
 
	mª£rved
;

132 
	sfw_rsc_vdev
 {

133 
UI¡32
 
	mty≥
;

134 
UI¡32
 
	mid
;

135 
UI¡32
 
	mnŸifyid
;

136 
UI¡32
 
	md„©uªs
;

137 
UI¡32
 
	mg„©uªs
;

138 
UI¡32
 
	mc⁄fig_Àn
;

139 
Ch¨
 
	m°©us
;

140 
Ch¨
 
	mnum_of_vrögs
;

141 
Ch¨
 
	mª£rved
[2];

144 
	sfw_rsc_cu°om
 {

145 
UI¡32
 
	mty≥
;

146 
UI¡32
 
	msub_ty≥
;

147 
UI¡32
 
	mrsc_size
;

148 
fw_cu°om
 
	mrsc
;

	@ti/srvmgr/NameMap.c

33 
	~<°rög.h
>

35 
	~<xdc/°d.h
>

36 
	~<xdc/ru¡ime/Sy°em.h
>

38 
	~<ti/ùc/Mu…iProc.h
>

39 
	~<ti/ùc/Ωmsg/MesßgeQC›y.h
>

41 
	#RPMSG_NAME_SIZE
 32

	)

43 
	tu32
;

45 
	sΩmsg_ns_msg
 {

46 
	m«me
[
RPMSG_NAME_SIZE
];

47 
u32
 
	maddr
;

48 
u32
 
	mÊags
;

49 } 
	g__∑cked
;

51 
	eΩmsg_ns_Êags
 {

52 
	mRPMSG_NS_CREATE
 = 0,

53 
	mRPMSG_NS_DESTROY
 = 1

56 
	$£ndMesßge
(
Ch¨
 * 
«me
, 
UI¡32
 
p‹t
, 
Ωmsg_ns_Êags
 
Êags
)

58 
Ωmsg_ns_msg
 
nsMsg
;

59 
I¡
 
s
;

61 
	`°∫˝y
(
nsMsg
.
«me
,Çame, 
RPMSG_NAME_SIZE
);

62 
nsMsg
.
addr
 = 
p‹t
;

63 
nsMsg
.
Êags
 = flags;

65 
s
 = 
	`MesßgeQC›y_£nd
(
	`Mu…iProc_gëId
("HOST"), 53, 
p‹t
, &
nsMsg
,

66 (
nsMsg
));

67 i‡(
s
 < 0) {

68 
	`Sy°em_ab‹t
("Fatal ERROR in NameMap sendMessage: MessageQCopy_send()"

71 
	}
}

73 
	$NameM≠_ªgi°î
(
Ch¨
 * 
«me
, 
UI¡32
 
p‹t
)

75 
	`Sy°em_¥ötf
("ªgi°îög %†£rvi˚ o¿%d wôh HOST\n", 
«me
, 
p‹t
);

76 
	`£ndMesßge
(
«me
, 
p‹t
, 
RPMSG_NS_CREATE
);

77 
	}
}

79 
	$NameM≠_uƒegi°î
(
Ch¨
 * 
«me
, 
UI¡32
 
p‹t
)

81 
	`Sy°em_¥ötf
("un-ªgi°îög %†£rvi˚ o¿%d wôh HOST\n", 
«me
, 
p‹t
);

82 
	`£ndMesßge
(
«me
, 
p‹t
, 
RPMSG_NS_DESTROY
);

83 
	}
}

	@ti/srvmgr/NameMap.h

33 #i‚de‡
_NAMEMAP_H_


34 
	#_NAMEMAP_H_


	)

36 
NameM≠_ªgi°î
(
Ch¨
 * 
«me
, 
UI¡32
 
vÆue
);

37 
NameM≠_uƒegi°î
(
Ch¨
 * 
«me
, 
UI¡32
 
vÆue
);

	@ti/srvmgr/ServiceMgr.c

39 
	~<xdc/°d.h
>

40 
	~<xdc/cfg/globÆ.h
>

41 
	~<xdc/ru¡ime/Sy°em.h
>

43 
	~<ti/sysbios/k∆/Task.h
>

45 
	~<ti/grcm/RcmTy≥s.h
>

46 
	~<ti/grcm/RcmSîvî.h
>

48 
	~<°dio.h
>

49 
	~<°rög.h
>

50 
	~<°dlib.h
>

52 
	~<ti/ùc/Ωmsg/MesßgeQC›y.h
>

53 
	~"Ωmsg_omx.h
"

54 
	~"NameM≠.h
"

55 
	~"Sîvi˚Mgr.h
"

58 
	#MAX_NAMELEN
 64

	)

61 
	#MAX_TUPLES
 256

	)

62 
	#FREE_TUPLE_KEY
 0xFFFFFFFF

	)

64 
	#MAX_SERVICES
 4

	)

67 
Sîvi˚Mgr_disc⁄√˘FuncPå
 
	gSîvi˚Mgr_disc⁄√˘U£rFxn
 = 
NULL
;

69 
	sSîvi˚Def
 {

70 
Ch¨
 
	m«me
[
MAX_NAMELEN
];

71 
RcmSîvî_P¨ams
 
	mrcmSîvîP¨ams
;

72 
Boﬁ
 
	mèkí
;

75 
Sîvi˚Def
 
	g£rvi˚Defs
[
Sîvi˚Mgr_NUMSERVICETYPES
];

77 
	sTu∂e
 {

78 
UI¡32
 
	mkey
;

79 
UI¡32
 
	mvÆue
;

81 
Tu∂e
 
	gTu∂es
[
MAX_TUPLES
];

84 
Task_FuncPå
 
	mfxn
;

85 
Ch¨
 
	m«me
[
MAX_NAMELEN
];

86 
Task_P¨ams
 
	m∑øms
;

87 
UI¡16
 
	mª£rved
;

88 
Boﬁ
 
	mèkí
;

89 } 
	tSîvi˚Mgr_Sîvi˚Task
;

91 
Sîvi˚Mgr_Sîvi˚Task
 
	g£rvi˚Tasks
[
MAX_SERVICES
];

94 
Void
 
	$Sîvi˚Mgr_öô
()

96 
I¡
 
curInô
 = 0;

97 
UI¡
 
i
;

99 i‡(
curInô
++ != 0) {

103 
	`RcmSîvî_öô
();

105 
i
 = 0; i < 
Sîvi˚Mgr_NUMSERVICETYPES
; i++) {

106 
£rvi˚Defs
[
i
].
èkí
 = 
FALSE
;

109 
i
 = 0; i < 
MAX_TUPLES
; i++) {

110 
Tu∂es
[
i
].
key
 = 
FREE_TUPLE_KEY
;

113 
i
 = 0; i < 
MAX_SERVICES
; i++) {

114 
£rvi˚Tasks
[
i
].
èkí
 = 
FALSE
;

115 
£rvi˚Tasks
[
i
].
fxn
 = 
NULL
;

116 
£rvi˚Tasks
[
i
].
ª£rved
 = (
UI¡16
) -1;

118 
	}
}

120 
UI¡
 
	$Sîvi˚Mgr_°¨t
(
UI¡16
 
ª£rved
)

122 
UI¡
 
i
;

123 
UI¡
 
cou¡
 = 0;

124 
Boﬁ
 
°¨ãd
 = 
FALSE
;

126 i‡(
°¨ãd
) {

130 
i
 = 0; (ò< 
MAX_SERVICES
Ë&& (
£rvi˚Tasks
[i].
èkí
); i++) {

131 
	`Task_¸óã
(
£rvi˚Tasks
[
i
].
fxn
, &£rvi˚Tasks[i].
∑øms
, 
NULL
);

132 
cou¡
++;

135  (
cou¡
);

136 
	}
}

138 
Boﬁ
 
	$Sîvi˚Mgr_ªgi°îSrvTask
(
UI¡16
 
ª£rved
, 
Task_FuncPå
 
func
,

139 
Task_P¨ams
 *
èskP¨ams
)

141 
UI¡
 
i
;

142 
Boﬁ
 
found
 = 
FALSE
;

143 
Sîvi˚Mgr_Sîvi˚Task
 *
°
;

144 
Task_P¨ams
 *
∑øms
;

147 
i
 = 0; (ò< 
MAX_SERVICES
Ë&& (
found
 =
FALSE
); i++) {

148 i‡(!
£rvi˚Tasks
[
i
].
èkí
) {

149 
°
 = &
£rvi˚Tasks
[
i
];

150 
°
->
fxn
 = 
func
;

151 
	`°r˝y
(
°
->
«me
, 
èskP¨ams
->
ö°™˚
->name);

154 
∑øms
 = &
°
->params;

155 
	`Task_P¨ams_öô
(
∑øms
);

156 
	`mem˝y
((
Void
 *)(&
∑øms
->
¨g0
), &
èskP¨ams
->arg0,

157 (*
∑øms
Ë- (
Void
 *));

158 
∑øms
->
ö°™˚
->
«me
 = 
°
->name;

160 
°
->
ª£rved
 =Ñeserved;

161 
°
->
èkí
 = 
TRUE
;

162 
found
 = 
TRUE
;

167  (
found
);

168 
	}
}

170 
Boﬁ
 
	$Sîvi˚Mgr_ªgi°î
(
Såög
 
«me
, 
RcmSîvî_P¨ams
 *
rcmSîvîP¨ams
)

172 
UI¡
 
i
;

173 
Boﬁ
 
found
 = 
FALSE
;

174 
Sîvi˚Def
 *
sd
;

176 i‡(
	`°æí
(
«me
Ë>
MAX_NAMELEN
) {

177 
	`Sy°em_¥ötf
("ServiceMgr_register: serviceÇameÜongerÅhan %d\n",

178 
MAX_NAMELEN
 );

182 
i
 = 0; (ò< 
Sîvi˚Mgr_NUMSERVICETYPES
Ë&& (
found
 =
FALSE
); i++) {

183 i‡(!
£rvi˚Defs
[
i
].
èkí
) {

184 
sd
 = &
£rvi˚Defs
[
i
];

185 
	`°r˝y
(
sd
->
«me
,Çame);

186 
sd
->
rcmSîvîP¨ams
 = *rcmServerParams;

187 
sd
->
èkí
 = 
TRUE
;

188 
found
 = 
TRUE
;

194 (
found
);

195 
	}
}

197 
Void
 
	$Sîvi˚Mgr_£nd
(
Sîvi˚_H™dÀ
 
§vc
, 
På
 
d©a
, 
UI¡16
 
Àn
)

199 
UI¡32
 
loˇl
;

200 
UI¡32
 
ªmŸe
;

201 
omx_msg_hdr
 * 
hdr
 = (omx_msg_hd∏*)
d©a
;

202 
UI¡16
 
d°Proc
;

205 
ªmŸe
 = 
	`RcmSîvî_gëRemŸeAddªss
(
§vc
);

206 
d°Proc
 = 
	`RcmSîvî_gëRemŸeProc
(
§vc
);

207 
loˇl
 = 
	`RcmSîvî_gëLoˇlAddªss
(
§vc
);

210 
hdr
->
ty≥
 = 
OMX_RAW_MSG
;

211 
hdr
->
Àn
 =Üen;

212 
hdr
->
Êags
 = 0;

215 
	`MesßgeQC›y_£nd
(
d°Proc
, 
ªmŸe
, 
loˇl
, 
d©a
, 
HDRSIZE
+
Àn
);

216 
	}
}

218 
Boﬁ
 
	$Sîvi˚Mgr_ªgi°îDisc⁄√˘Fxn
(
Sîvi˚_H™dÀ
 
§vc
, 
På
 
d©a
,

219 
Sîvi˚Mgr_disc⁄√˘FuncPå
 
func
)

221 i‡(
func
 =
NULL
) {

222 
	`Sy°em_¥ötf
("ServiceMgr_registerDisconnectFxn: Invalid function.\n");

223  
FALSE
;

227 i‡(!
Sîvi˚Mgr_disc⁄√˘U£rFxn
) {

228 
Sîvi˚Mgr_disc⁄√˘U£rFxn
 = 
func
;

230  
TRUE
;

231 
	}
}

235 
Boﬁ
 
	$°‹eTu∂e
(
UI¡32
 
key
, UI¡32 
vÆue
)

237 
UI¡
 
i
;

238 
Boﬁ
 
°‹ed
 = 
FALSE
;

240 i‡(
key
 =
FREE_TUPLE_KEY
) {

241 
	`Sy°em_¥ötf
("°‹eTu∂e:Ñe£rved key %d\n", 
key
);

245 
i
 = 0; (ò< 
MAX_TUPLES
Ë&& (
°‹ed
 =
FALSE
); i++) {

246 i‡(
Tu∂es
[
i
].
key
 =
FREE_TUPLE_KEY
) {

247 
Tu∂es
[
i
].
key
 = key;

248 
Tu∂es
[
i
].
vÆue
 = value;

249 
°‹ed
 = 
TRUE
;

255 (
°‹ed
);

256 
	}
}

258 
Boﬁ
 
	$ªmoveTu∂e
(
UI¡32
 
key
, UI¡32 * 
vÆue
)

260 
UI¡
 
i
;

261 
Boﬁ
 
found
 = 
FALSE
;

264 
i
 = 0; (ò< 
MAX_TUPLES
Ë&& (
found
 =
FALSE
); i++) {

265 i‡(
Tu∂es
[
i
].
key
 == key) {

266 
found
 = 
TRUE
;

267 *
vÆue
 = 
Tu∂es
[
i
].value;

269 
Tu∂es
[
i
].
vÆue
 = 0;

270 
Tu∂es
[
i
].
key
 = 
FREE_TUPLE_KEY
;

275 (
found
);

276 
	}
}

278 
UI¡32
 
	$Sîvi˚Mgr_¸óãSîvi˚
(
Ch¨
 * 
«me
, 
UI¡32
 * 
íd±
)

280 
I¡
 
i
;

281 
I¡
 
°©us
 = 0;

282 
Sîvi˚Def
 *
sd
;

283 
RcmSîvî_H™dÀ
 
rcmSrvH™dÀ
;

285 
i
 = 0; i < 
Sîvi˚Mgr_NUMSERVICETYPES
; i++) {

286 i‡(!
	`°rcmp
(
«me
, 
£rvi˚Defs
[
i
].name)) {

287 
sd
 = &
£rvi˚Defs
[
i
];

292 i‡(
i
 >
Sîvi˚Mgr_NUMSERVICETYPES
) {

293 
	`Sy°em_¥ötf
("¸óãSîvi˚: uƒecognized sîvi˚Çame: %s\n", 
«me
);

294  
OMX_NOTSUPP
;

299 
	`Sy°em_¥ötf
("createService: Calling RcmServer_create withÇame = %s\n"

303 
sd
->
«me
, sd->
rcmSîvîP¨ams
.
¥i‹ôy
,

304 
sd
->
rcmSîvîP¨ams
.
osPri‹ôy
,

305 
sd
->
rcmSîvîP¨ams
.
fxns
.
Àngth
);

307 
°©us
 = 
	`RcmSîvî_¸óã
(
sd
->
«me
, &sd->
rcmSîvîP¨ams
, &
rcmSrvH™dÀ
);

309 i‡(
°©us
 < 0) {

310 
	`Sy°em_¥ötf
("createService: RcmServer_create()ÑeturnedÉrror %d\n",

311 
°©us
);

312  
OMX_FAIL
;

316 *
íd±
 = 
	`RcmSîvî_gëLoˇlAddªss
(
rcmSrvH™dÀ
);

319 i‡(!
	`°‹eTu∂e
(*
íd±
, (
UI¡32
)
rcmSrvH™dÀ
)) {

320 
	`Sy°em_¥ötf
("createService: LimitÑeached on max instances!\n");

321 
	`RcmSîvî_dñëe
(&
rcmSrvH™dÀ
);

322  
OMX_FAIL
;

326 
	`RcmSîvî_°¨t
(
rcmSrvH™dÀ
);

328 
	`Sy°em_¥ötf
("¸óãSîvi˚:Çew OMX Sîvi˚áàídpoöt: %d\n", *
íd±
);

330  
OMX_SUCCESS
;

331 
	}
}

334 
UI¡32
 
	$Sîvi˚Mgr_dñëeSîvi˚
(
UI¡32
 
addr
)

336 
I¡
 
°©us
 = 0;

337 
RcmSîvî_H™dÀ
 
rcmSrvH™dÀ
;

339 i‡(!
	`ªmoveTu∂e
(
addr
, (
UI¡32
 *)&
rcmSrvH™dÀ
)) {

340 
	`Sy°em_¥ötf
("deleteService: couldÇot find service instanceát"

341 "áddªss: 0x%x\n", 
addr
);

342  
OMX_FAIL
;

348 i‡(
Sîvi˚Mgr_disc⁄√˘U£rFxn
) {

350 
	`Sîvi˚Mgr_disc⁄√˘U£rFxn
(
rcmSrvH™dÀ
, 
NULL
);

354 
°©us
 = 
	`RcmSîvî_dñëe
(&
rcmSrvH™dÀ
);

355 i‡(
°©us
 < 0) {

356 
	`Sy°em_¥ötf
("deleteService: RcmServer_delete()ÑeturnedÉrror %d\n",

357 
°©us
);

358  
OMX_FAIL
;

361 
	`Sy°em_¥ötf
("dñëeSîvi˚:Ñemoved RcmSîvîáàídpoöt: %d\n", 
addr
);

363  
OMX_SUCCESS
;

364 
	}
}

	@ti/srvmgr/ServiceMgr.h

39 #i‚de‡
ti_§vmgr_Sîvi˚Mgr__ö˛ude


40 
	#ti_§vmgr_Sîvi˚Mgr__ö˛ude


	)

42 
	~<xdc/°d.h
>

44 
	~<ti/sysbios/k∆/Task.h
>

45 
	~<ti/grcm/RcmSîvî.h
>

48 #i‡
deföed
 (
__˝lu•lus
)

54 
	#Sîvi˚Mgr_NUMSERVICETYPES
 16

	)

59 
RcmSîvî_H™dÀ
 
	tSîvi˚_H™dÀ
;

64 
Void
 (*
	tSîvi˚Mgr_disc⁄√˘FuncPå
)(
	tSîvi˚_H™dÀ
 
	t§vc
, 
	tPå
 
	td©a
);

75 
Void
 
Sîvi˚Mgr_öô
();

96 
Boﬁ
 
Sîvi˚Mgr_ªgi°îSrvTask
(
UI¡16
 
ª£rved
, 
Task_FuncPå
 
func
,

97 
Task_P¨ams
 *
èskP¨ams
);

114 
UI¡
 
Sîvi˚Mgr_°¨t
(
UI¡16
 
ª£rved
);

134 
Boﬁ
 
Sîvi˚Mgr_ªgi°î
(
Såög
 
«me
, 
RcmSîvî_P¨ams
 *
rcmSîvîP¨ams
);

153 
Void
 
Sîvi˚Mgr_£nd
(
Sîvi˚_H™dÀ
 
§vc
, 
På
 
d©a
, 
UI¡16
 
Àn
);

168 
Boﬁ
 
Sîvi˚Mgr_ªgi°îDisc⁄√˘Fxn
(
Sîvi˚_H™dÀ
 
§vc
, 
På
 
d©a
,

169 
Sîvi˚Mgr_disc⁄√˘FuncPå
 
func
);

184 
UI¡32
 
Sîvi˚Mgr_¸óãSîvi˚
(
Ch¨
 * 
«me
, UI¡32 * 
ídPt
);

199 
UI¡32
 
Sîvi˚Mgr_dñëeSîvi˚
(UI¡32 
addr
);

202 #i‡
deföed
 (
__˝lu•lus
)

	@ti/srvmgr/omaprpc/OmapRpc.c

33 
	~<xdc/°d.h
>

34 
	~<xdc/cfg/globÆ.h
>

35 
	~<xdc/ru¡ime/Sy°em.h
>

36 
	~<xdc/ru¡ime/Mem‹y.h
>

38 
	~<ti/sysbios/BIOS.h
>

39 
	~<ti/sysbios/k∆/Sem≠h‹e.h
>

40 
	~<ti/sysbios/k∆/Task.h
>

42 
	~<ti/grcm/RcmTy≥s.h
>

43 
	~<ti/grcm/RcmSîvî.h
>

45 
	~<°dio.h
>

46 
	~<°rög.h
>

47 
	~<°dlib.h
>

49 
	~<ti/ùc/Ωmsg/MesßgeQC›y.h
>

50 
	~<ti/§vmgr/NameM≠.h
>

51 
	~<ti/§vmgr/Sîvi˚Mgr.h
>

53 
	~"Om≠Rpc.h
"

55 
	sOm≠Rpc_Obje˘
 {

56 
Ch¨
 
	mch™√lName
[
OMAPRPC_MAX_CHANNEL_NAMELEN
];

57 
UI¡16
 
	md°Proc
;

58 
UI¡32
 
	mp‹t
;

59 
MesßgeQC›y_H™dÀ
 
	mmsgq
;

60 
UI¡32
 
	mloˇlEndPt
;

61 
Task_H™dÀ
 
	mèskH™dÀ
;

62 
Boﬁ
 
	mshutdown
;

63 
Sem≠h‹e_H™dÀ
 
	mexôSem
;

64 
Om≠Rpc_SrvDñNŸifyFxn
 
	m§vDñCB
;

65 } 
	tOm≠Rpc_Obje˘
;

68 
Void
 
	$om≠RpcTask
(
UArg
 
¨g0
, UArg 
¨g1
)

70 
Om≠Rpc_Obje˘
 *
obj
 = (Om≠Rpc_Obje˘ *)
¨g0
;

71 
UI¡32
 
loˇl
;

72 
UI¡32
 
ªmŸe
;

73 
I¡
 
°©us
;

74 
UI¡16
 
Àn
;

75 
UI¡8
 
msg
[512];

77 
Om≠Rpc_MsgHódî
 *
hdr
 = (Om≠Rpc_MsgHódî *)&
msg
[0];

79 i‡(
obj
 =
NULL
) {

80 
	`Sy°em_¥ötf
("OMAPRPC: FailedÅo startÅaskásárgumentsáre NULL!\n");

84 i‡(
obj
->
msgq
 =
NULL
) {

85 
	`Sy°em_¥ötf
("OMAPRPC: FailedÅo startÅaskás MessageQ was NULL!\n");

90 
loˇl
 = 
obj
->
loˇlEndPt
;

91 
	`Sy°em_¥ötf
("OMAPRPC: connecting fromÜocalÉndpoint %uÅoÖort %u\n",

92 
obj
->
loˇlEndPt
, obj->
p‹t
);

94 
	`NameM≠_ªgi°î
("om≠Ωc", 
obj
->
p‹t
);

96 
	`Sy°em_¥ötf
("OMAPRPC: sèπed ch™√»⁄Ö‹t: %d\n", 
obj
->
p‹t
);

98 !
obj
->
shutdown
) {

101 
	`_mem£t
(
msg
, 0, (msg));

102 
Àn
 = 0;

103 
ªmŸe
 = 0;

106 
°©us
 = 
	`MesßgeQC›y_ªcv
(
obj
->
msgq
, (
På
)
msg
, &
Àn
, &
ªmŸe
,

107 
MesßgeQC›y_FOREVER
);

109 i‡(
°©us
 =
MesßgeQC›y_E_UNBLOCKED
) {

110 
	`Sy°em_¥ötf
("OMAPRPC: unblocked while waiting for messages\n");

114 
	`Sy°em_¥ötf
("OMAPRPC:Ñeceived msgÅype: %dÜen: %d fromáddr: %d\n",

115 
hdr
->
msgTy≥
, 
Àn
, 
ªmŸe
);

116 
hdr
->
msgTy≥
) {

117 
Om≠Rpc_MsgTy≥_CREATE_INSTANCE
:

120 
Om≠Rpc_Cª©eIn°™˚
 *
¸óã
 =

121 
	`Om≠Rpc_PAYLOAD
(
msg
, 
Om≠Rpc_Cª©eIn°™˚
);

123 
Ch¨
 
«me
[(
¸óã
->name)];

125 
Om≠Rpc_In°™˚H™dÀ
 *
h™dÀ
 =

126 
	`Om≠Rpc_PAYLOAD
(
msg
, 
Om≠Rpc_In°™˚H™dÀ
);

128 
	`_°r˝y
(
«me
, 
¸óã
->name);

130 
	`_mem£t
(
msg
, 0, (msg));

133 
h™dÀ
->
°©us
 = 
	`Sîvi˚Mgr_¸óãSîvi˚
(
«me
,

134 &
h™dÀ
->
ídpoötAddªss
);

136 
	`Sy°em_¥ötf
("OMAPRPC: created service instanceÇamed: %s "

137 "(°©us=%dËaddr: %d\n", 
«me
, 
h™dÀ
->
°©us
,

138 
h™dÀ
->
ídpoötAddªss
);

140 
hdr
->
msgTy≥
 = 
Om≠Rpc_MsgTy≥_INSTANCE_CREATED
;

141 
hdr
->
msgLí
 = (
Om≠Rpc_In°™˚H™dÀ
);

144 
Om≠Rpc_MsgTy≥_DESTROY_INSTANCE
:

147 
Om≠Rpc_In°™˚H™dÀ
 *
h™dÀ
 =

148 
	`Om≠Rpc_PAYLOAD
(
msg
, 
Om≠Rpc_In°™˚H™dÀ
);

150 i‡(
obj
->
§vDñCB
 !
NULL
) {

151 
obj
->
	`§vDñCB
();

155 
	`Sy°em_¥ötf
("OMAPRPC: destroying instanceáddr: %d\n",

156 
h™dÀ
->
ídpoötAddªss
);

157 
h™dÀ
->
°©us
 = 
	`Sîvi˚Mgr_dñëeSîvi˚
(

158 
h™dÀ
->
ídpoötAddªss
);

159 
hdr
->
msgTy≥
 = 
Om≠Rpc_MsgTy≥_INSTANCE_DESTROYED
;

160 
hdr
->
msgLí
 = (
Om≠Rpc_In°™˚H™dÀ
);

164 
Om≠Rpc_MsgTy≥_QUERY_CHAN_INFO
:

166 
Om≠Rpc_Ch™√lInfo
 *
ch™Info
 =

167 
	`Om≠Rpc_PAYLOAD
(
msg
, 
Om≠Rpc_Ch™√lInfo
);

169 
	`_°r˝y
(
ch™Info
->
«me
, 
obj
->
ch™√lName
);

170 
	`Sy°em_¥ötf
("OMAPRPC: channel info query -Çame %s\n",

171 
ch™Info
->
«me
);

172 
hdr
->
msgTy≥
 = 
Om≠Rpc_MsgTy≥_CHAN_INFO
;

173 
hdr
->
msgLí
 = (
Om≠Rpc_Ch™√lInfo
);

179 
Om≠Rpc_Eº‹
 *
îr
 = 
	`Om≠Rpc_PAYLOAD
(
msg
, OmapRpc_Error);

182 
	`Sy°em_¥ötf
("OMAPRPC: unexpected msgÅype: %d\n",

183 
hdr
->
msgTy≥
);

186 
	`_mem£t
(
msg
, 0, (msg));

188 
hdr
->
msgTy≥
 = 
Om≠Rpc_MsgTy≥_ERROR
;

189 
îr
->
ídpoötAddªss
 = 
loˇl
;

190 
îr
->
°©us
 = 
Om≠Rpc_Eº‹Ty≥_NOT_SUPPORTED
;

196 
Àn
 = (
Om≠Rpc_MsgHódî
Ë+ 
hdr
->
msgLí
;

198 
	`Sy°em_¥ötf
("OMAPRPC: Replying with msgÅype: %dÅoáddr: %d "

199 " from: %dÜí: %u\n", 
hdr
->
msgTy≥
, 
ªmŸe
, 
loˇl
, 
Àn
);

202 
	`MesßgeQC›y_£nd
(
obj
->
d°Proc
, 
ªmŸe
, 
loˇl
, 
msg
, 
Àn
);

205 
	`Sy°em_¥ötf
("OMAPRPC: de°royög ch™√»⁄Ö‹t: %d\n", 
obj
->
p‹t
);

206 
	`NameM≠_uƒegi°î
("om≠Ωc", 
obj
->
p‹t
);

210 
	`Sem≠h‹e_po°
(
obj
->
exôSem
);

211 
	}
}

213 
Om≠Rpc_H™dÀ
 
	$Om≠Rpc_¸óãCh™√l
(
Såög
 
ch™√lName
, 
UI¡16
 
d°Proc
,

214 
UI¡32
 
p‹t
, 
RcmSîvî_P¨ams
 *
rcmSrvP¨ams
,

215 
Om≠Rpc_SrvDñNŸifyFxn
 
§vDñCBFunc
)

218 
Task_P¨ams
 
èskP¨ams
;

219 
Om≠Rpc_Obje˘
 *
obj
 = 
	`Mem‹y_Æloc
(
NULL
, (OmapRpc_Object), 0, NULL);

220 i‡(
obj
 =
NULL
) {

221 
	`Sy°em_¥ötf
("OMAPRPC: FailedÅoállocate memory for object!\n");

222  
NULL
;

225 
	`_mem£t
(
obj
, 0, (
Om≠Rpc_Obje˘
));

226 
obj
->
shutdown
 = 
FALSE
;

227 
obj
->
d°Proc
 = dstProc;

228 
obj
->
p‹t
 =Öort;

229 
	`°∫˝y
(
obj
->
ch™√lName
, ch™√lName, 
OMAPRPC_MAX_CHANNEL_NAMELEN
-1);

230 
obj
->
ch™√lName
[
OMAPRPC_MAX_CHANNEL_NAMELEN
-1]='\0';

231 
obj
->
§vDñCB
 = 
§vDñCBFunc
;

233 
	`Sîvi˚Mgr_öô
();

234 i‡(
	`Sîvi˚Mgr_ªgi°î
(
ch™√lName
, 
rcmSrvP¨ams
Ë=
TRUE
) {

235 
	`Sy°em_¥ötf
("OMAPRPC:Ñegi°îed ch™√l: %s\n", 
obj
->
ch™√lName
);

236 
	`MesßgeQC›y_öô
(
obj
->
d°Proc
);

237 
obj
->
msgq
 = 
	`MesßgeQC›y_¸óã
(obj->
p‹t
, &obj->
loˇlEndPt
);

238 i‡(
obj
->
msgq
 =
NULL
) {

239 
u∆ﬂd
;

241 
	`Task_P¨ams_öô
(&
èskP¨ams
);

242 
èskP¨ams
.
ö°™˚
->
«me
 = 
ch™√lName
;

243 
èskP¨ams
.
¥i‹ôy
 = 1;

244 
èskP¨ams
.
¨g0
 = (
UArg
)
obj
;

245 
obj
->
exôSem
 = 
	`Sem≠h‹e_¸óã
(0, 
NULL
, NULL);

246 i‡(
obj
->
exôSem
 =
NULL
) {

247 
u∆ﬂd
;

249 
obj
->
èskH™dÀ
 = 
	`Task_¸óã
(
om≠RpcTask
, &
èskP¨ams
, 
NULL
);

250 i‡(
obj
->
èskH™dÀ
 =
NULL
) {

251 
u∆ﬂd
;

255 
	`Sy°em_¥ötf
("OMAPRPC: FAILEDÅoÑegister channel: %s\n",

256 
obj
->
ch™√lName
);

258  
obj
;

260 
u∆ﬂd
:

261 
	`Om≠Rpc_dñëeCh™√l
(
obj
);

262  
NULL
;

263 
	}
}

265 
I¡
 
	$Om≠Rpc_dñëeCh™√l
(
Om≠Rpc_H™dÀ
 
h™dÀ
)

267 
Om≠Rpc_Obje˘
 *
obj
 = (Om≠Rpc_Obje˘ *)
h™dÀ
;

269 i‡(
obj
 =
NULL
) {

270  
Om≠Rpc_E_FAIL
;

273 
	`Sy°em_¥ötf
("OMAPRPC: dñëög ch™√»%s\n", 
obj
->
ch™√lName
);

274 
obj
->
shutdown
 = 
TRUE
;

275 i‡(
obj
->
msgq
) {

276 
	`MesßgeQC›y_unblock
(
obj
->
msgq
);

277 i‡(
obj
->
exôSem
) {

278 
	`Sem≠h‹e_≥nd
(
obj
->
exôSem
, 
BIOS_WAIT_FOREVER
);

279 
	`MesßgeQC›y_dñëe
(&
obj
->
msgq
);

280 
	`Sem≠h‹e_dñëe
(&
obj
->
exôSem
);

282 i‡(
obj
->
èskH™dÀ
) {

283 
	`Task_dñëe
(&
obj
->
èskH™dÀ
);

287 
	`Mem‹y_‰ì
(
NULL
, 
obj
, (*obj));

288  
Om≠Rpc_S_SUCCESS
;

289 
	}
}

	@ti/srvmgr/omaprpc/OmapRpc.h

38 #i‚de‡
ti_§vmgr_Om≠Rpc__ö˛ude


39 
	#ti_§vmgr_Om≠Rpc__ö˛ude


	)

41 
	~<ti/grcm/RcmSîvî.h
>

44 #i‡
deföed
 (
__˝lu•lus
)

53 
	#Om≠Rpc_S_SUCCESS
 0

	)

59 
	#Om≠Rpc_E_FAIL
 -1

	)

61 
	#Om≠Rpc_NUM_PARAMETERS
(
size
) \

62 (
size
/(
Om≠Rpc_P¨amëî
))

	)

64 
	#Om≠Rpc_PAYLOAD
(
±r
, 
ty≥
) \

65 ((
ty≥
 *)&(
±r
)[(
Om≠Rpc_MsgHódî
)])

	)

67 
	#Om≠Rpc_DESC_EXEC_SYNC
 (0x0100)

	)

68 
	#Om≠Rpc_DESC_EXEC_ASYNC
 (0x0200)

	)

69 
	#Om≠Rpc_DESC_SYM_ADD
 (0x0300)

	)

70 
	#Om≠Rpc_DESC_SYM_IDX
 (0x0400)

	)

71 
	#Om≠Rpc_DESC_CMD
 (0x0500)

	)

72 
	#Om≠Rpc_DESC_TYPE_MASK
 (0x0F00)

	)

73 
	#Om≠Rpc_JOBID_DISCRETE
 (0)

	)

74 
	#Om≠Rpc_POOLID_DEFAULT
 (0x8000)

	)

76 
	#Om≠Rpc_SET_FXN_IDX
(
idx
Ë(idx | 0x80000000)

	)

77 
	#Om≠Rpc_FXN_MASK
(
idx
Ë(idx & 0x7FFFFFFF)

	)

80 
	eOm≠Rpc_InfoTy≥
 {

82 
Om≠Rpc_InfoTy≥_NUMFUNCS
,

84 
Om≠Rpc_InfoTy≥_FUNC_NAME
,

86 
Om≠Rpc_InfoTy≥_NUM_CALLS
,

88 
Om≠Rpc_InfoTy≥_FUNC_PERF
,

91 
Om≠Rpc_InfoTy≥_MAX


92 } 
	tOm≠Rpc_InfoTy≥
;

95 
	eOm≠Rpc_C‹eTy≥
 {

96 
Om≠Rpc_C‹eTy≥_DSP
 = 0,

97 
Om≠Rpc_C‹eTy≥_SIMCOP
,

98 
Om≠Rpc_C‹eTy≥_MCU0
,

99 
Om≠Rpc_C‹eTy≥_MCU1
,

100 
Om≠Rpc_C‹eTy≥_EVE
,

101 
Om≠Rpc_C‹eTy≥_MAX


102 } 
	tOm≠Rpc_C‹eTy≥
;

106 
	eOm≠Rpc_MsgTy≥
 {

109 
Om≠Rpc_MsgTy≥_CREATE_INSTANCE
 = 0,

112 
Om≠Rpc_MsgTy≥_INSTANCE_CREATED
 = 1,

114 
Om≠Rpc_MsgTy≥_QUERY_INSTANCE
 = 2,

117 
Om≠Rpc_MsgTy≥_INSTANCE_INFO
 = 3,

119 
Om≠Rpc_MsgTy≥_DESTROY_INSTANCE
 = 4,

121 
Om≠Rpc_MsgTy≥_CALL_FUNCTION
 = 5,

124 
Om≠Rpc_MsgTy≥_INSTANCE_DESTROYED
 = 6,

127 
Om≠Rpc_MsgTy≥_ERROR
 = 7,

129 
Om≠Rpc_MsgTy≥_FUNCTION_RETURN
 = 8,

131 
Om≠Rpc_MsgTy≥_QUERY_CHAN_INFO
 = 9,

133 
Om≠Rpc_MsgTy≥_CHAN_INFO
 = 10,

136 
Om≠Rpc_MsgTy≥_MAX


137 } 
	tOm≠Rpc_MsgTy≥
;

139 
	eOm≠Rpc_Eº‹Ty≥
 {

141 
Om≠Rpc_Eº‹Ty≥_NONE
 = 0,

143 
Om≠Rpc_Eº‹Ty≥_NOT_ENOUGH_MEMORY
,

145 
Om≠Rpc_Eº‹Ty≥_INSTANCE_DIED
,

147 
Om≠Rpc_Eº‹Ty≥_RESOURCE_UNAVAILABLE
,

149 
Om≠Rpc_Eº‹Ty≥_BAD_PARAMETER
,

151 
Om≠Rpc_Eº‹Ty≥_NOT_SUPPORTED
,

154 
Om≠Rpc_Eº‹Ty≥_MAX_VALUE


155 } 
	tOm≠Rpc_Eº‹Ty≥
;

157 
	sOm≠Rpc_Cª©eIn°™˚
 {

158 
Ch¨
 
«me
[48];

159 } 
	tOm≠Rpc_Cª©eIn°™˚
;

161 
	#OMAPRPC_MAX_CHANNEL_NAMELEN
 64

	)

162 
	sOm≠Rpc_Ch™√lInfo
 {

163 
Ch¨
 
«me
[
OMAPRPC_MAX_CHANNEL_NAMELEN
];

164 } 
	tOm≠Rpc_Ch™√lInfo
;

166 
	sOm≠Rpc_QuîyIn°™˚
 {

167 
UI¡32
 
öfoTy≥
;

168 
UI¡32
 
funcIndex
;

169 } 
	tOm≠Rpc_QuîyIn°™˚
;

171 
	sOm≠Rpc_FuncPîf
 {

172 
UI¡32
 
˛ocksPîSec
;

173 
UI¡32
 
˛ockCy˛es
;

174 } 
	tOm≠Rpc_FuncPîf
;

176 
	sOm≠Rpc_In°™˚Info
 {

177 
UI¡32
 
öfoTy≥
;

178 
UI¡32
 
funcIndex
;

179 
	uöfo
 {

180 
UI¡32
 
numFuncs
;

181 
UI¡32
 
numCÆls
;

182 
UI¡32
 
c‹eIndex
;

183 
Ch¨
 
funcName
[64];

184 
Om≠Rpc_FuncPîf
 
≥rf
;

185 } 
öfo
;

186 } 
	tOm≠Rpc_In°™˚Info
;

190 
	sOm≠Rpc_MsgHódî
 {

191 
UI¡32
 
msgTy≥
;

192 
UI¡32
 
msgFœgs
;

193 
UI¡32
 
msgLí
;

194 } 
	tOm≠Rpc_MsgHódî
;

196 
	sOm≠Rpc_In°™˚H™dÀ
 {

197 
UI¡32
 
ídpoötAddªss
;

198 
UI¡32
 
°©us
;

199 } 
	tOm≠Rpc_In°™˚H™dÀ
;

201 
	sOm≠Rpc_Eº‹
 {

202 
UI¡32
 
ídpoötAddªss
;

203 
UI¡32
 
°©us
;

204 } 
	tOm≠Rpc_Eº‹
;

206 
	sOm≠Rpc_P¨amëî
 {

207 
SizeT
 
size
;

208 
SizeT
 
d©a
;

209 } 
	tOm≠Rpc_P¨amëî
;

212 
	sOm≠Rpc_Packë
{

213 
UI¡16
 
desc
;

214 
UI¡16
 
msgId
;

215 
UI¡16
 
poﬁId
;

216 
UI¡16
 
jobId
;

217 
UI¡32
 
fxnIdx
;

218 
I¡32
 
ªsu…
;

219 
UI¡32
 
d©aSize
;

220 } 
	tOm≠Rpc_Packë
;

222 
Om≠Rpc_Obje˘
 *
	tOm≠Rpc_H™dÀ
;

223 
Void
 (*
	tOm≠Rpc_SrvDñNŸifyFxn
)(
	tVoid
);

226 
Om≠Rpc_H™dÀ
 
Om≠Rpc_¸óãCh™√l
(
Såög
 
ch™√lName
, 
UI¡16
 
d°Proc
,

227 
UI¡32
 
p‹t
, 
RcmSîvî_P¨ams
* 
rcmSrvP¨ams
,

228 
Om≠Rpc_SrvDñNŸifyFxn
 
func
);

230 
I¡
 
Om≠Rpc_dñëeCh™√l
(
Om≠Rpc_H™dÀ
 
h™dÀ
);

233 #i‡
deföed
 (
__˝lu•lus
)

	@ti/srvmgr/omx/OmxSrvMgr.c

39 
	~<xdc/°d.h
>

40 
	~<xdc/cfg/globÆ.h
>

41 
	~<xdc/ru¡ime/Sy°em.h
>

42 
	~<xdc/ru¡ime/Sèπup.h
>

44 
	~<ti/sysbios/k∆/Task.h
>

46 
	~<ti/ùc/Mu…iProc.h
>

48 
	~<ti/ùc/Ωmsg/MesßgeQC›y.h
>

49 
	~<ti/ùc/Ωmsg/VútQueue.h
>

50 
	~<ti/§vmgr/Ωmsg_omx.h
>

51 
	~<ti/§vmgr/NameM≠.h
>

52 
	~<ti/§vmgr/Sîvi˚Mgr.h
>

54 
	~"∑ckage/öã∫Æ/OmxSrvMgr.xdc.h
"

57 
	#OMX_MGR_PORT
 60

	)

59 
Void
 
	$OmxSrvMgr_èskFxn
(
UArg
 
¨g0
, UArg 
¨g1
)

61 
MesßgeQC›y_H™dÀ
 
msgq
;

62 
UI¡32
 
loˇl
;

63 
UI¡32
 
ªmŸe
;

64 
Ch¨
 
msg
[
HDRSIZE
 + (
omx_c⁄√˘_ªq
)];

65 
omx_msg_hdr
 * 
hdr
 = (omx_msg_hd∏*)
msg
;

66 
omx_c⁄√˘_r•
 * 
r•
 = (omx_c⁄√˘_r• *)
hdr
->
d©a
;

67 
omx_c⁄√˘_ªq
 * 
ªq
 = (omx_c⁄√˘_ªq *)
hdr
->
d©a
;

68 
omx_disc_ªq
 * 
disc_ªq
 = (omx_disc_ªq *)
hdr
->
d©a
;

69 
omx_disc_r•
 * 
disc_r•
 = (omx_disc_r• *)
hdr
->
d©a
;

70 
UI¡16
 
d°Proc
;

71 
UI¡16
 
Àn
;

72 
UI¡32
 
√wAddr
 = 0;

74 #ifde‡
BIOS_ONLY_TEST


75 
d°Proc
 = 
	`Mu…iProc_£lf
();

77 
d°Proc
 = 
	`Mu…iProc_gëId
("HOST");

80 
	`MesßgeQC›y_öô
(
d°Proc
);

82 
msgq
 = 
	`MesßgeQC›y_¸óã
(
OMX_MGR_PORT
, &
loˇl
);

84 
	`Sy°em_¥ötf
("OmxSrvMgr: sèπed o¿p‹t: %d\n", 
OMX_MGR_PORT
);

86 #ifde‡
SMP


87 
	`NameM≠_ªgi°î
("Ωmsg-omx1", 
OMX_MGR_PORT
);

88 
	`Sy°em_¥ötf
("OmxSrvMgr: Proc#%d sending BOOTINIT_DONE\n",

89 
	`Mu…iProc_£lf
());

90 
	`VútQueue_po°InôD⁄e
();

92 i‡(
	`Mu…iProc_£lf
(Ë=
	`Mu…iProc_gëId
("CORE0")) {

93 
	`NameM≠_ªgi°î
("Ωmsg-omx0", 
OMX_MGR_PORT
);

95 i‡(
	`Mu…iProc_£lf
(Ë=
	`Mu…iProc_gëId
("CORE1")) {

96 
	`NameM≠_ªgi°î
("Ωmsg-omx1", 
OMX_MGR_PORT
);

98 i‡(
	`Mu…iProc_£lf
(Ë=
	`Mu…iProc_gëId
("DSP")) {

99 
	`NameM≠_ªgi°î
("Ωmsg-omx2", 
OMX_MGR_PORT
);

102 i‡((
	`Mu…iProc_£lf
(Ë=
	`Mu…iProc_gëId
("CORE1")) ||

103 (
	`Mu…iProc_£lf
(Ë=
	`Mu…iProc_gëId
("DSP"))) {

104 
	`Sy°em_¥ötf
("OmxSrvMgr: Proc#%d sending BOOTINIT_DONE\n",

105 
	`Mu…iProc_£lf
());

106 
	`VútQueue_po°InôD⁄e
();

111 
	`MesßgeQC›y_ªcv
(
msgq
, (
På
)
msg
, &
Àn
, &
ªmŸe
, 
MesßgeQC›y_FOREVER
);

112 
	`Sy°em_¥ötf
("OmxSrvMgr:Ñeceived msgÅype: %d fromáddr: %d\n",

113 
hdr
->
ty≥
, 
ªmŸe
);

114 
hdr
->
ty≥
) {

115 
OMX_CONN_REQ
:

119 
	`Sy°em_¥ötf
("OmxSrvMgr: CONN_REQ:Üen: %d,Çame: %s\n",

120 
hdr
->
Àn
, 
ªq
->
«me
);

122 
r•
->
°©us
 = 
	`Sîvi˚Mgr_¸óãSîvi˚
(
ªq
->
«me
, &
√wAddr
);

124 
hdr
->
ty≥
 = 
OMX_CONN_RSP
;

125 
r•
->
addr
 = 
√wAddr
;

126 
hdr
->
Àn
 = (
omx_c⁄√˘_r•
);

127 
Àn
 = 
HDRSIZE
 + 
hdr
->len;

130 
OMX_DISC_REQ
:

132 
	`Sy°em_¥ötf
("OmxSrvMgr: OMX_DISCONNECT:Üen %d,áddr: %d\n",

133 
hdr
->
Àn
, 
disc_ªq
->
addr
);

135 
disc_r•
->
°©us
 = 
	`Sîvi˚Mgr_dñëeSîvi˚
(
disc_ªq
->
addr
);

140 
hdr
->
ty≥
 = 
OMX_DISC_RSP
;

141 
hdr
->
Àn
 = (
omx_disc_r•
);

142 
Àn
 = 
HDRSIZE
 + 
hdr
->len;

147 
	`Sy°em_¥ötf
("u√x≥˘ed msgÅy≥: %d\n", 
hdr
->
ty≥
);

148 
hdr
->
ty≥
 = 
OMX_NOTSUPP
;

152 
	`Sy°em_¥ötf
("OmxSrvMgr: Replying with msgÅype: %dÅoáddr: %d "

154 
hdr
->
ty≥
, 
ªmŸe
, 
loˇl
);

155 
	`MesßgeQC›y_£nd
(
d°Proc
, 
ªmŸe
, 
loˇl
, 
msg
, 
Àn
);

157 
	}
}

159 
I¡
 
	$OmxSrvMgr_ModuÀ_°¨tup
(
I¡
 
pha£
)

161 
Task_P¨ams
 
∑øms
;

163 i‡(
	`Task_ModuÀ_°¨tupD⁄e
()) {

164 
	`Sîvi˚Mgr_öô
();

167 
	`Task_P¨ams_öô
(&
∑øms
);

168 
∑øms
.
ö°™˚
->
«me
 = "OmxSrvMgr";

169 
∑øms
.
¥i‹ôy
 = 1;

171 
	`Sîvi˚Mgr_ªgi°îSrvTask
(0, 
OmxSrvMgr_èskFxn
, &
∑øms
);

173  (
Sèπup_DONE
);

176  (
Sèπup_NOTDONE
);

178 
	}
}

	@ti/srvmgr/omx_packet.h

40 #i‚de‡
OMX_PACKET_H


41 
	#OMX_PACKET_H


	)

69 
	#OMX_DESC_MSG
 0x1

70 
	#OMX_DESC_SYM_ADD
 0x3

71 
	#OMX_DESC_SYM_IDX
 0x4

72 
	#OMX_DESC_CMD
 0x5

73 
	#OMX_DESC_TYPE_MASK
 0x0F00

74 
	#OMX_DESC_TYPE_SHIFT
 8

75 

	)

77 
	#OMXSERVER_STATUS_SUCCESS
 ((
uöt16_t
)0)

78 
	#OMXSERVER_STATUS_INVALID_FXN
 ((
uöt16_t
)1)

79 
	#OMXSERVER_STATUS_SYMBOL_NOT_FOUND
 ((
uöt16_t
)2)

80 
	#OMXSERVER_STATUS_INVALID_MSG_TYPE
 ((
uöt16_t
)3)

81 
	#OMXSERVER_STATUS_MSG_FXN_ERR
 ((
uöt16_t
)4)

82 
	#OMXSERVER_STATUS_ERROR
 ((
uöt16_t
)5)

83 
	#OMXSERVER_STATUS_UNPROCESSED
 ((
uöt16_t
)6)

84 

	)

86 
	somx_∑ckë
 {

87 
UI¡16
 
	mdesc
;

88 
UI¡16
 
	mmsg_id
;

89 
UI¡32
 
	mÊags
;

90 
UI¡32
 
	mfxn_idx
;

91 
I¡32
 
	mªsu…
;

92 
UI¡32
 
	md©a_size
;

93 
UI¡32
 
	md©a
[1];

97 
	#OMXPACKETSIZE
 (5 * (
UI¡32
))

	)

99 
	#OMX_POOLID_JOBID_NONE
 (0x00008000)

	)

100 
	#OMX_INVALIDFXNIDX
 ((
UI¡32
)(0xFFFFFFFF))

	)

	@ti/srvmgr/rpmsg_omx.h

38 #i‚de‡
_RPMSGOMX_H_


39 
	#_RPMSGOMX_H_


	)

70 
	eomx_msg_ty≥s
 {

71 
	mOMX_CONN_REQ
 = 0,

72 
	mOMX_CONN_RSP
 = 1,

73 
	mOMX_PING_MSG
 = 2,

74 
	mOMX_PONG_MSG
 = 3,

75 
	mOMX_DISC_REQ
 = 4,

76 
	mOMX_RAW_MSG
 = 5,

77 
	mOMX_DISC_RSP
 = 6

91 
	eomx_îr‹_codes
 {

92 
	mOMX_SUCCESS
 = 0,

93 
	mOMX_NOTSUPP
 = 1,

94 
	mOMX_NOMEM
 = 2,

95 
	mOMX_FAIL
 = 3

108 
	somx_msg_hdr
 {

109 
UI¡32
 
	mty≥
;

110 
UI¡32
 
	mÊags
;

111 
UI¡32
 
	mÀn
;

112 
Ch¨
 
	md©a
[1];

116 
	#HDRSIZE
 (3 * (
UI¡
))

	)

118 
	somx_c⁄√˘_ªq
 {

119 
Ch¨
 
	m«me
[48];

122 
	somx_c⁄√˘_r•
 {

123 
UI¡32
 
	m°©us
;

124 
UI¡32
 
	maddr
;

127 
	somx_disc_ªq
 {

128 
UI¡32
 
	maddr
;

131 
	somx_disc_r•
 {

132 
UI¡32
 
	m°©us
;

	@ti/trace/StackDbg.c

39 
	~<xdc/ru¡ime/Sèπup.h
>

40 
	~<°rög.h
>

41 
	~<°dlib.h
>

42 
	~<°dio.h
>

44 
	~"∑ckage/öã∫Æ/SèckDbg.xdc.h
"

106 
I¡
 
	$__decode_bl32
(
UI¡
 
pc
, UI¡ 
›
, UI¡ *
èrgë
)

108 
UI¡
 
imm
;

109 
UI¡
 
sign
;

111 i‡((
›
 & 0xf000e800) == 0xf000e800) {

113 i‡(
›
 & (1<<12)) {

114 i‡(!(
›
 & 0x08000000)) {

116 
imm
 = ((
›
 & 0x03ff0000) >> 4) | ((op & 0x000007ff) << 1);

123 i‡(!(
›
 & 0x08001001)) {

125 
imm
 = ((
›
 & 0x03ff0000) >> 4) | ((op & 0x000007fe) << 1);

132 
sign
 = !!(
›
 & 0x04000000);

133 i‡(
sign
) {

134 
I¡
 
simm
 = (I¡)(
imm
 << 10);

135 
simm
 >>= 10;

136 
imm
 = (
UI¡
)
simm
;

139 
imm
 = (
UI¡
)((
I¡
)
pc
 + (Int)imm);

140 
imm
 += 4;

142 *
èrgë
 = 
imm
;

147 
	}
}

149 
I¡
 
	$decode_bl32
(
UI¡
 
pc
, UI¡ 
›
, UI¡ *
èrgë
)

151 i‡(
	`__decode_bl32
(
pc
, 
›
, 
èrgë
)) {

154 
›
 = (op >> 16) | (op << 16);

155  
	`__decode_bl32
(
pc
, 
›
, 
èrgë
);

156 
	}
}

158 
Void
 
	$SèckDbg_wÆkSèck
(
UI¡
 
ba£
, UI¡ 
size
, UI¡ 
°¨t
,

159 
SèckDbg_VisôFuncPå
 
visô
, 
På
 
u£r
)

161 
UI¡
 
t›
;

162 
UI¡
 *
ö°
;

163 
UI¡
 
›
;

164 
SèckDbg_SèckE¡ry
 
e
;

165 
Boﬁ
 
m‹e
;

167 
size
 = (size + 3) & ~3;

168 
t›
 = 
ba£
 + 
size
;

169 
°¨t
 = start & ~3;

170 
m‹e
 = 
TRUE
;

172 ; 
°¨t
 < 
t›
 && 
m‹e
; sèπ +(
USh‹t
)) {

173 
UI¡
 
vÆ
 = *((UI¡ *)
°¨t
);

174 i‡((
vÆ
 & 1Ë&& 
moduÀ
->
codeBegö
 <vÆ && vÆ < moduÀ->
codeEnd
) {

176 
ö°
 = (
UI¡
 *)((
vÆ
 - 4) & ~1);

177 
›
 = *
ö°
;

179 
e
.
ö°r
 = (
UI¡
)
ö°
;

180 
e
.
›
 = op;

181 
e
.
ªt
 = 
vÆ
;

182 
e
.
•
 = (
UI¡
)
°¨t
;

183 
e
.
bogus
 = 0;

185 i‡(
	`decode_bl32
((
UI¡
)
ö°
, 
›
, &
e
.
èrgë
)) {

186 
m‹e
 = 
	`visô
(&
e
, 
u£r
);

188 i‡((
›
 & 0x47800000) == 0x47800000 ||

189 (
›
 & 0x00004780) == 0x00004780) {

190 
e
.
èrgë
 = 0;

191 
m‹e
 = 
	`visô
(&
e
, 
u£r
);

194 
e
.
bogus
 = 1;

195 
m‹e
 = 
	`visô
(&
e
, 
u£r
);

199 
	}
}

	@ti/trace/SysMin.c

17 
	~<xdc/ru¡ime/Sèπup.h
>

18 
	~<xdc/ru¡ime/G©e.h
>

20 #ifde‡
SMP


21 
	~<ti/sysbios/BIOS.h
>

22 
	~<ti/sysbios/hÆ/C‹e.h
>

23 
	~<ti/sysbios/hÆ/Hwi.h
>

25 
	~<ti/sysbios/k∆/Clock.h
>

27 
	~<°rög.h
>

28 
	~<°dlib.h
>

29 
	~<°dio.h
>

31 
	~"∑ckage/öã∫Æ/SysMö.xdc.h
"

36 
I¡
 
	$SysMö_ModuÀ_°¨tup
(
I¡
 
pha£
)

38 i‡(
SysMö_bufSize
 != 0) {

39 
	`mem£t
(
moduÀ
->
outbuf
, 0, 
SysMö_bufSize
);

42 #i‚de‡
SMP


44 
moduÀ
->
gëTime
 = 
TRUE
;

47  (
Sèπup_DONE
);

48 
	}
}

53 
Void
 
	$SysMö_ab‹t
(
Såög
 
°r
)

55 
Ch¨
 
ch
;

57 i‡(
SysMö_bufSize
 != 0) {

58 i‡(
°r
 !
NULL
) {

59 (
ch
 = *
°r
++) != '\0') {

60 
	`SysMö_putch
(
ch
);

65 i‡(
SysMö_ÊushAtExô
) {

66 
	`SysMö_Êush
();

69 
	}
}

74 
Void
 
	$SysMö_exô
(
I¡
 
°©
)

76 i‡((
SysMö_ÊushAtExô
Ë&& (
SysMö_bufSize
 != 0)) {

77 
	`SysMö_Êush
();

79 
	}
}

86 
ölöe
 
Void
 
	$SysMö_ouçut
(
Ch¨
 
ch
)

88 
moduÀ
->
outbuf
[moduÀ->
outidx
++] = 
ch
;

90 i‡(
moduÀ
->
outidx
 =
SysMö_bufSize
 - 8) {

91 
moduÀ
->
outidx
 = 0;

93 
	}
}

100 
Void
 
	$SysMö_putch
(
Ch¨
 
ch
)

102 
IArg
 
key
;

103 
UI¡
 
i
;

104 #i‚de‡
SMP


105 
UI¡
 
c‹eId
 = 0;

107 
UI¡
 
c‹eId
;

109 
UI¡
 
löeIdx
;

110 
Ch¨
 *
löeBuf
;

111 
I¡
 
ödex
;

112 
UI¡64
 
uSec
;

113 
Boﬁ
 
c⁄figuª
 = 
FALSE
;

114 
UI¡
 
°¨tIdx
;

115 
UI¡
 
ídIdx
;

116 
UI¡
 
timeSèmpSecCh¨Lí
;

117 c⁄° 
UI¡
 
möSecCh¨Lí
 = 4;

118 c⁄° 
UI¡
 
maxuSecCh¨Lí
 = 6;

122 c⁄° 
UI¡
 
decPtIdx
 = 11;

123 c⁄° 
UI¡
 
timeSèmpBufLí
 = 18;

124 c⁄° 
UI¡
 
À·S∑˚Idx
 = 10;

125 
Ch¨
 
timeSèmp
[18] = {" \0"};

128 i‡(!
c⁄figuª
) {

129 
I¡
 
i
 = 0, 
mod
 = 10;

133 ; 
i
 < 
maxuSecCh¨Lí
; i++) {

134 i‡(
Clock_tickPîiod
 % 
mod
) {

137 
mod
 = mod * 10;

139 
timeSèmpSecCh¨Lí
 = 
möSecCh¨Lí
 + 
i
;

140 
°¨tIdx
 = 
decPtIdx
 - 
timeSèmpSecCh¨Lí
;

141 
ídIdx
 = 
timeSèmpBufLí
 - (
i
 + 1);

142 
c⁄figuª
 = 
TRUE
;

145 i‡(
SysMö_bufSize
 != 0) {

147 #i‚de‡
SMP


148 
key
 = 
	`G©e_íãrSy°em
();

151 
key
 = (
IArg
)
	`C‹e_hwiDißbÀ
();

152 
c‹eId
 = 
	`C‹e_gëId
();

155 
löeIdx
 = 
moduÀ
->
löeBuf„rs
[
c‹eId
].
löeidx
;

156 
löeBuf
 = 
moduÀ
->
löeBuf„rs
[
c‹eId
].
löebuf
;

157 
löeBuf
[
löeIdx
++] = 
ch
;

158 
moduÀ
->
löeBuf„rs
[
c‹eId
].
löeidx
 = 
löeIdx
;

160 #ifde‡
SMP


162 i‡((
ch
 ='\n'Ë|| (
löeIdx
 >
SysMö_LINEBUFSIZE
)) {

163 
	`G©e_íãrSy°em
();

166 
	`SysMö_ouçut
('[');

167 
	`SysMö_ouçut
(0x30 + 
c‹eId
);

168 
	`SysMö_ouçut
(']');

170 i‡(
moduÀ
->
gëTime
 =
TRUE
) {

172 
uSec
 = 
	`Clock_gëTicks
(Ë* 
Clock_tickPîiod
;

173 
	`SysMö_ouçut
('[');

174 i‡(
uSec
) {

175 
	`•rötf
(
timeSèmp
, "%17Œu\0", 
uSec
);

177 
ödex
 = 
°¨tIdx
; index < 
ídIdx
; index++) {

178 i‡(
ödex
 =
decPtIdx
) {

179 
	`SysMö_ouçut
('.');

181 i‡(
timeSèmp
[
ödex
] =' ' && index >
À·S∑˚Idx
) {

182 
	`SysMö_ouçut
('0');

185 
	`SysMö_ouçut
(
timeSèmp
[
ödex
]);

188 
	`SysMö_ouçut
(']');

189 
	`SysMö_ouçut
(' ');

190 #ifde‡
SMP


191 
i
 = 0; i < 
löeIdx
; i++) {

192 
	`SysMö_ouçut
(
löeBuf
[
i
]);

194 
moduÀ
->
wrôeidx
[0] = moduÀ->
outidx
;

195 
moduÀ
->
löeBuf„rs
[
c‹eId
].
löeidx
 = 0;

197 
	`G©e_ÀaveSy°em
(
key
);

201 
	`C‹e_hwiRe°‹e
((
UI¡
)
key
);

204 
moduÀ
->
gëTime
 = 
FALSE
;

208 i‡((
ch
 ='\n'Ë|| (
löeIdx
 >
SysMö_LINEBUFSIZE
)) {

209 
i
 = 0; i < 
löeIdx
; i++) {

210 
	`SysMö_ouçut
(
löeBuf
[
i
]);

212 
moduÀ
->
löeBuf„rs
[
c‹eId
].
löeidx
 = 0;

213 
moduÀ
->
gëTime
 = 
TRUE
;

214 
moduÀ
->
wrôeidx
[0] = moduÀ->
outidx
;

217 
	`G©e_ÀaveSy°em
(
key
);

221 
	}
}

226 
Boﬁ
 
	$SysMö_ªady
()

228  (
SysMö_bufSize
 != 0);

229 
	}
}

235 
Void
 
	$SysMö_Êush
()

239 
IArg
 
key
;

241 
key
 = 
	`G©e_íãrSy°em
();

247 i‡(
moduÀ
->
wøµed
 =
TRUE
) {

248 
	`SysMö_ouçutFunc
(
moduÀ
->
outbuf
 + moduÀ->
outidx
,

249 
SysMö_bufSize
 - 
moduÀ
->
outidx
);

252 
	`SysMö_ouçutFunc
(
moduÀ
->
outbuf
, moduÀ->
outidx
);

253 
moduÀ
->
outidx
 = 0;

254 
moduÀ
->
wøµed
 = 
FALSE
;

256 
	`G©e_ÀaveSy°em
(
key
);

258 
	}
}

	@ti/utils/Version.c

38 
	~<xdc/°d.h
>

39 
	~<xdc/ru¡ime/Sèπup.h
>

41 
	~"∑ckage/öã∫Æ/Vîsi⁄.xdc.h
"

52 
I¡
 
	$Vîsi⁄_ModuÀ_°¨tup
(
I¡
 
pha£
)

54 
	`Vîsi⁄_öô
();

55  (
Sèπup_DONE
);

56 
	}
}

	@utils/elfload/ArrayList.c

61 
	~<öây≥s.h
>

62 
	~<°dlib.h
>

63 
	~<°rög.h
>

64 
	~"AºayLi°.h
"

65 
	~"dlﬂd_≠i.h
"

70 
	$AL_öôülize
(
Aºay_Li°
* 
obj
, 
öt32_t
 
ty≥_size
, i¡32_à
num_ñem
)

72 i‡(
num_ñem
 == 0)Çum_elem = 1;

73 
obj
->
buf
 = 
	`DLIF_mÆloc
(
ty≥_size
 * 
num_ñem
);

74 
obj
->
ty≥_size
 =Åype_size;

75 
obj
->
size
 = 0;

76 
obj
->
buf„r_size
 = 
num_ñem
;

77 
	}
}

82 
	$AL_≠≥nd
(
Aºay_Li°
* 
obj
, * 
to_≠≥nd
)

88 i‡(
obj
->
size
 < obj->
buf„r_size
)

89 
	`mem˝y
(((
uöt8_t
*)
obj
->
buf
Ë+ obj->
ty≥_size
 * ((obj->
size
)++),

90 
to_≠≥nd
, 
obj
->
ty≥_size
);

97 * 
ﬁd_buf„r
 = 
obj
->
buf
;

98 
obj
->
buf„r_size
 *= 2;

99 
obj
->
buf
 = 
	`DLIF_mÆloc
(obj->
buf„r_size
*obj->
ty≥_size
);

100 if(
obj
->
buf
) {

101 
	`mem˝y
(
obj
->
buf
,
ﬁd_buf„r
,obj->
size
*obj->
ty≥_size
);

102 
	`mem˝y
(((
uöt8_t
*)
obj
->
buf
Ë+ obj->
ty≥_size
 *((obj->
size
)++),

103 
to_≠≥nd
, 
obj
->
ty≥_size
);

105 
	`DLIF_‰ì
(
ﬁd_buf„r
);

107 
	}
}

112 
öt32_t
 
	$AL_size
(
Aºay_Li°
* 
obj
)

114  
obj
->
size
;

115 
	}
}

121 
	$AL_de°roy
(
Aºay_Li°
* 
obj
)

123 
	`DLIF_‰ì
(
obj
->
buf
);

124 
	}
}

	@utils/elfload/arm_dynamic.c

40 #ifde‡
ARM_TARGET


42 
	~"¨m_ñf32.h
"

43 
	~"dlﬂd.h
"

50 
BOOL
 
	$DLDYN_¨m_¥o˚ss_dy«mic_èg
(
DLIMP_Dy«mic_ModuÀ
* 
dyn_moduÀ
, 
i
)

52 
dyn_moduÀ
->
dy¡ab
[
i
].
d_èg
)

54 
DT_ARM_SYMTABSZ
:

56 
dyn_moduÀ
->
symnum
 = dyn_moduÀ->
dy¡ab
[
i
].
d_un
.
d_vÆ
;

57 #i‡
LOADER_DEBUG


58 i‡(
debuggög_⁄
)

59 
	`DLIF_åa˚
("Found symbolÅable size: %d\n",

60 
dyn_moduÀ
->
symnum
);

62  
TRUE
;

66  
FALSE
;

67 
	}
}

79 
BOOL
 
	$DLDYN_¨m_ªloˇã_dy«mic_èg_öfo
(
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
,

80 
öt32_t
 
i
)

82 
dyn_moduÀ
->
dy¡ab
[
i
].
d_èg
)

87 
DT_ARM_RESERVED1
:

88 
DT_ARM_SYMTABSZ
:

89 
DT_ARM_PREEMPTMAP
:

90 
DT_ARM_RESERVED2
:

91  
TRUE
;

94 
	`DLIF_îr‹
(
DLET_MISC
, "Invalid dynamicÅagÉncountered, %d\n",

95 ()
dyn_moduÀ
->
dy¡ab
[
i
].
d_èg
);

96  
FALSE
;

97 
	}
}

105 
BOOL
 
	$DLDYN_¨m_¥o˚ss_eioßbi
(
DLIMP_Dy«mic_ModuÀ
* 
dyn_moduÀ
)

112 i‡(
dyn_moduÀ
->
fhdr
.
e_idít
[
EI_OSABI
] !
ELFOSABI_NONE
)

113  
FALSE
;

115  
TRUE
;

116 
	}
}

	@utils/elfload/arm_reloc.c

40 
	~<limôs.h
>

41 
	~<°dlib.h
>

42 
	~"ªloˇã.h
"

43 
	~"dlﬂd_≠i.h
"

44 
	~"utû.h
"

45 
	~"dlﬂd_ídün.h
"

46 
	~"symèb.h
"

47 
	~"¨m_ñf32.h
"

49 
	#EXTRACT
(
fõld
, 
lsb_off£t
, 
fõld_size
) \

50 –(
fõld
 >> 
lsb_off£t
Ë& ((1U << 
fõld_size
Ë- 1Ë)

	)

51 
	#OPND_S
(
symvÆ
Ë(symvÆ & ~0x1)

	)

52 
	#OPND_T
(
symvÆ
Ë(symvÆ & 0x1)

	)

53 
	#IS_BLX
(
fõld
Ë((
	`EXTRACT
(fõld, 24, 8Ë& ~0x1Ë=0xFA)

	)

54 
	#SIGN_EXTEND
(
fõld
, 
fõld_size
Ë(fõld |-(fõld & (1<<(fõld_size-1))))

	)

66 
	mARM_RELOC
,

67 
	mTHUMB32_RELOC
,

68 
	mTHUMB16_RELOC
,

69 
	mARM8_RELOC


70 }
	tARM_RELOC_SIZE
;

75 
ölöe
 
	$obj_is_be8
(
Elf32_Ehdr
* 
fhdr
)

77  (
fhdr
->
e_Êags
 & 
EF_ARM_BE8
);

78 
	}
}

83 
BOOL
 
	$is_d©a_ªloˇti⁄
(
ARM_RELOC_TYPE
 
r_ty≥
)

85 
r_ty≥
)

87 
R_ARM_ABS32
:

88 
R_ARM_ABS16
:

89 
R_ARM_ABS8
:

90 
R_ARM_PREL31
:

91 
R_ARM_REL32
:

92 
R_ARM_ABS32_NOI
:

93 
R_ARM_REL32_NOI
:

94  
TRUE
;

96  
FALSE
;

98 
	}
}

105 
BOOL
 
	$ªl_sw≠_ídün
(
DLIMP_Dy«mic_ModuÀ
* 
dyn_moduÀ
,

106 
ARM_RELOC_TYPE
 
r_ty≥
)

111 i‡(
dyn_moduÀ
->
wr⁄g_ídün
 && 
	`obj_is_be8
(&dyn_moduÀ->
fhdr
) &&

112 
	`is_d©a_ªloˇti⁄
(
r_ty≥
))

113  
TRUE
;

117 i‡(!
dyn_moduÀ
->
wr⁄g_ídün
 &&

118 
	`obj_is_be8
(&
dyn_moduÀ
->
fhdr
) &&

119 !
	`is_d©a_ªloˇti⁄
(
r_ty≥
))

120  
TRUE
;

124 i‡(
dyn_moduÀ
->
wr⁄g_ídün
)

125  
TRUE
;

130  
FALSE
;

131 
	}
}

137 
BOOL
 
	$ªl_c⁄˛udes_group
(
ARM_RELOC_TYPE
 
r_ty≥
)

139 
r_ty≥
)

141 
R_ARM_ALU_PC_G0
:

142 
R_ARM_ALU_PC_G1
:

143 
R_ARM_ALU_PC_G2
:

144 
R_ARM_LDC_PC_G0
:

145 
R_ARM_LDC_PC_G1
:

146 
R_ARM_LDC_PC_G2
:

147 
R_ARM_LDR_PC_G0
:

148 
R_ARM_LDR_PC_G1
:

149 
R_ARM_LDR_PC_G2
:

150 
R_ARM_LDRS_PC_G0
:

151 
R_ARM_LDRS_PC_G1
:

152 
R_ARM_LDRS_PC_G2
:

153  
TRUE
;

155  
FALSE
;

157 
	}
}

162 
	$ªl_group_num
(
ARM_RELOC_TYPE
 
r_ty≥
)

164 
r_ty≥
)

166 
R_ARM_ALU_PC_G0
:

167 
R_ARM_ALU_PC_G0_NC
:

168 
R_ARM_LDC_PC_G0
:

169 
R_ARM_LDR_PC_G0
:

170 
R_ARM_LDRS_PC_G0
:

173 
R_ARM_ALU_PC_G1
:

174 
R_ARM_ALU_PC_G1_NC
:

175 
R_ARM_LDC_PC_G1
:

176 
R_ARM_LDR_PC_G1
:

177 
R_ARM_LDRS_PC_G1
:

180 
R_ARM_ALU_PC_G2
:

181 
R_ARM_LDC_PC_G2
:

182 
R_ARM_LDR_PC_G2
:

183 
R_ARM_LDRS_PC_G2
:

189 
	}
}

195 
uöt32_t
 
	$ªl_Æu_mask_off£t
(
öt32_t
 
ªsiduÆ
, 
bô_Æign
)

197 
uöt32_t
 
mask_off£t
;

199 
mask_off£t
 = 31; mask_offset > 7; mask_offset--)

200 i‡(
ªsiduÆ
 & (0x1 << 
mask_off£t
)) ;

201 
mask_off£t
 -= 7;

203 i‡(
bô_Æign
 == 0) bit_align = 1;

205 i‡((
mask_off£t
 & 
bô_Æign
) != 0)

206 
mask_off£t
 +(
bô_Æign
 - (mask_offset % bit_align));

208  
mask_off£t
;

209 
	}
}

217 
	$ªl_mask_f‹_group
(
ARM_RELOC_TYPE
 
r_ty≥
, 
öt32_t
* 
ªloc_vÆ
)

219 
öt32_t
 
cuº_ªsiduÆ
 = *
ªloc_vÆ
;

220 
num_Æu_groups
 = 
	`ªl_group_num
(
r_ty≥
) + 1;

221 
n
;

222 i‡(
	`ªl_c⁄˛udes_group
(
r_ty≥
)Ë
num_Æu_groups
--;

224 
n
 = 0;Ç < 
num_Æu_groups
;Ç++)

226 
uöt32_t
 
mask_off£t
 = 
	`ªl_Æu_mask_off£t
(
cuº_ªsiduÆ
, 2);

227 
uöt32_t
 
¸es_mask
 = 0xFF << 
mask_off£t
;

229 *
ªloc_vÆ
 = 
cuº_ªsiduÆ
 & 
¸es_mask
;

231 
cuº_ªsiduÆ
 = cuº_ªsiduÆ & ~
¸es_mask
;

234 i‡(
	`ªl_c⁄˛udes_group
(
r_ty≥
)Ë*
ªloc_vÆ
 = 
cuº_ªsiduÆ
;

236 
	}
}

241 
ARM_RELOC_SIZE
 
	$gë_ªloc_size
(
ARM_RELOC_TYPE
 
r_ty≥
)

243 
r_ty≥
)

245 
R_ARM_THM_ABS5
:

246 
R_ARM_THM_PC8
:

247 
R_ARM_THM_JUMP6
:

248 
R_ARM_THM_JUMP11
:

249 
R_ARM_THM_JUMP8
:

250  
THUMB16_RELOC
;

252 
R_ARM_THM_CALL
:

253 
R_ARM_THM_JUMP24
:

254 
R_ARM_THM_MOVW_ABS_NC
:

255 
R_ARM_THM_MOVT_ABS
:

256 
R_ARM_THM_MOVW_PREL_NC
:

257 
R_ARM_THM_MOVT_PREL
:

258 
R_ARM_THM_JUMP19
:

259 
R_ARM_THM_ALU_PREL_11_0
:

260 
R_ARM_THM_PC12
:

261 
R_ARM_THM_MOVW_BREL_NC
:

262 
R_ARM_THM_MOVT_BREL
:

263 
R_ARM_THM_MOVW_BREL
:

264  
THUMB32_RELOC
;

266 
R_ARM_ABS8
:

267  
ARM8_RELOC
;

270  
ARM_RELOC
;

272 
	}
}

279 
	$ªl_ch™ge_ídün
(
ARM_RELOC_TYPE
 
r_ty≥
, 
uöt8_t
* 
addªss
)

281 
ARM_RELOC_SIZE
 
ªloc_size
 = 
	`gë_ªloc_size
(
r_ty≥
);

283 
ªloc_size
)

285 
ARM_RELOC
:

287 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)
addªss
);

291 
THUMB32_RELOC
:

293 
öt16_t
* 
ös1_±r
 = (öt16_t*)
addªss
;

294 
	`DLIMP_ch™ge_ídün16
(
ös1_±r
);

295 
	`DLIMP_ch™ge_ídün16
(
ös1_±r
 + 1);

299 
THUMB16_RELOC
:

301 
	`DLIMP_ch™ge_ídün16
((
öt16_t
*)
addªss
);

308 
	}
}

315 
	$wrôe_ªloc_r
(
uöt8_t
* 
ªl_fõld_±r
,

316 
ARM_RELOC_TYPE
 
r_ty≥
, 
öt32_t
 
ªloc_vÆ
,

317 
uöt32_t
 
symvÆ
)

319 #i‡
LOADER_DEBUG


323 if(
debuggög_⁄
)

325 
	`DLIF_åa˚
("RWRT:Ññ_fõld_±r: 0x%x\n", (
uöt32_t
)
ªl_fõld_±r
);

326 
	`DLIF_åa˚
("RWRT:Ñesu…: 0x%x\n", 
ªloc_vÆ
);

335 
r_ty≥
)

337 
R_ARM_ABS32
:

338 
R_ARM_REL32
:

339 
R_ARM_REL32_NOI
:

340 
R_ARM_ABS32_NOI
:

342 *((
uöt32_t
*)
ªl_fõld_±r
Ë
ªloc_vÆ
;

346 
R_ARM_PREL31
:

348 *((
uöt32_t
*)
ªl_fõld_±r
Ë|
ªloc_vÆ
;

352 
R_ARM_PC24
:

353 
R_ARM_CALL
:

354 
R_ARM_PLT32
:

362 
uöt32_t
 
ªl_fõld
 = *((uöt32_t*)
ªl_fõld_±r
);

368 i‡(
	`OPND_T
(
symvÆ
))

369 
ªl_fõld
 |= 0xF0000000;

374 
ªl_fõld
 &= ~0xFFFFFF;

376 i‡(
	`IS_BLX
(
ªl_fõld
))

378 
uöt8_t
 
HvÆ
 = 
ªloc_vÆ
 & 0x1;

382 
ªl_fõld
 &= ~0x01000000;

383 
ªl_fõld
 |
HvÆ
 << 24;

389 
ªl_fõld
 |(
ªloc_vÆ
 >> 1);

390 *((
uöt32_t
*)
ªl_fõld_±r
Ë
ªl_fõld
;

394 
R_ARM_JUMP24
:

396 *((
uöt32_t
*)
ªl_fõld_±r
) &= ~0xFFFFFF;

397 *((
uöt32_t
*)
ªl_fõld_±r
Ë|
ªloc_vÆ
;

401 
R_ARM_THM_CALL
:

402 
R_ARM_THM_JUMP24
:

407 
uöt16_t
* 
ªl_fõld_16_±r
 = (uöt16_t*Ë
ªl_fõld_±r
;

409 
uöt8_t
 
SvÆ
;

410 
uöt8_t
 
J1
;

411 
uöt8_t
 
J2
;

412 
uöt16_t
 
imm10
;

413 
uöt16_t
 
imm11
;

418 i‡(!
	`OPND_T
(
symvÆ
Ë&& 
r_ty≥
 =
R_ARM_THM_CALL
)

420 i‡(
ªloc_vÆ
 & 0x1)Ñeloc_val++;

421 *(
ªl_fõld_16_±r
 + 1) &= 0xEFFF;

427 
SvÆ
 = (
ªloc_vÆ
 >> 23) & 0x1;

428 
J1
 = ((
ªloc_vÆ
 >> 22Ë^ (!
SvÆ
)) & 0x1;

429 
J2
 = ((
ªloc_vÆ
 >> 21Ë^ (!
SvÆ
)) & 0x1;

430 
imm10
 = (
ªloc_vÆ
 >> 11) & 0x3FF;

431 
imm11
 = 
ªloc_vÆ
 & 0x7FF;

433 *
ªl_fõld_16_±r
 &= 0xF800;

434 *
ªl_fõld_16_±r
 |(
SvÆ
 << 10);

435 *
ªl_fõld_16_±r
 |
imm10
;

437 
ªl_fõld_16_±r
++;

438 *
ªl_fõld_16_±r
 &= 0xD000;

440 *
ªl_fõld_16_±r
 |(
J1
 << 13);

441 *
ªl_fõld_16_±r
 |(
J2
 << 11);

442 *
ªl_fõld_16_±r
 |
imm11
;

446 
R_ARM_THM_JUMP19
:

452 
uöt16_t
* 
ªl_fõld_16_±r
 = (uöt16_t*Ë
ªl_fõld_±r
;

453 
uöt8_t
 
S
;

454 
uöt8_t
 
J2
;

455 
uöt8_t
 
J1
;

456 
uöt8_t
 
imm6
;

457 
uöt16_t
 
imm11
;

459 
S
 = (
ªloc_vÆ
 >> 19) & 0x1;

460 
J2
 = (
ªloc_vÆ
 >> 18) & 0x1;

461 
J1
 = (
ªloc_vÆ
 >> 17) & 0x1;

462 
imm6
 = (
ªloc_vÆ
 >> 11) & 0x3F;

463 
imm11
 = (
ªloc_vÆ
 ) & 0x7FF;

468 *
ªl_fõld_16_±r
 &= 0xFBC0;

469 *
ªl_fõld_16_±r
 |(
S
 << 10);

470 *
ªl_fõld_16_±r
 |
imm6
;

472 
ªl_fõld_16_±r
++;

474 *
ªl_fõld_16_±r
 &= 0xD800;

475 *
ªl_fõld_16_±r
 |(
J2
 << 13);

476 *
ªl_fõld_16_±r
 |(
J1
 << 11);

477 *
ªl_fõld_16_±r
 |
imm11
;

480 
R_ARM_THM_JUMP11
:

485 *((
uöt16_t
*)
ªl_fõld_±r
) &= ~0x7FF;

486 *((
uöt16_t
*)
ªl_fõld_±r
Ë|
ªloc_vÆ
;

490 
R_ARM_THM_JUMP8
:

495 *((
uöt16_t
*)
ªl_fõld_±r
) &= ~0xFF;

496 *((
uöt16_t
*)
ªl_fõld_±r
Ë|
ªloc_vÆ
;

500 
R_ARM_THM_ABS5
:

505 *((
uöt16_t
*)
ªl_fõld_±r
) &= 0xF83F;

506 *((
uöt16_t
*)
ªl_fõld_±r
Ë|(
ªloc_vÆ
 << 6);

510 
R_ARM_THM_PC8
:

515 *((
uöt16_t
*)
ªl_fõld_±r
) &= 0xFF00;

516 *((
uöt16_t
*)
ªl_fõld_±r
Ë|
ªloc_vÆ
;

520 
R_ARM_THM_JUMP6
:

526 
uöt8_t
 
IvÆ
;

527 
uöt8_t
 
imm5
;

529 
IvÆ
 = (
ªloc_vÆ
 >> 5) & 0x1;

530 
imm5
 = (
ªloc_vÆ
 & 0x1F);

531 *((
uöt16_t
*)
ªl_fõld_±r
) &= 0xFD07;

532 *((
uöt16_t
*)
ªl_fõld_±r
Ë|(
IvÆ
 << 9);

533 *((
uöt16_t
*)
ªl_fõld_±r
Ë|(
imm5
 << 3);

537 
R_ARM_ABS16
:

542 *((
uöt16_t
*)
ªl_fõld_±r
Ë
ªloc_vÆ
;

546 
R_ARM_ABS8
:

551 *((
uöt8_t
*)
ªl_fõld_±r
Ë
ªloc_vÆ
;

555 
R_ARM_MOVW_ABS_NC
:

556 
R_ARM_MOVT_ABS
:

557 
R_ARM_MOVW_PREL_NC
:

558 
R_ARM_MOVT_PREL
:

563 
uöt8_t
 
imm4
 = 
ªloc_vÆ
 >> 12;

564 
uöt16_t
 
imm12
 = 
ªloc_vÆ
 & 0xFFF;

565 *((
uöt32_t
*)
ªl_fõld_±r
) &= 0xFFF0F000;

566 *((
uöt32_t
*)
ªl_fõld_±r
Ë|
imm12
;

567 *((
uöt32_t
*)
ªl_fõld_±r
Ë|(
imm4
 << 16);

571 
R_ARM_THM_MOVW_ABS_NC
:

572 
R_ARM_THM_MOVT_ABS
:

573 
R_ARM_THM_MOVW_PREL_NC
:

574 
R_ARM_THM_MOVT_PREL
:

579 
uöt16_t
* 
ªl_fõld_16_±r
 = (uöt16_t*Ë
ªl_fõld_±r
;

581 
uöt8_t
 
imm4
 = (
ªloc_vÆ
 >> 12);

582 
uöt8_t
 
i
 = (
ªloc_vÆ
 >> 11) & 0x1;

583 
uöt8_t
 
imm3
 = (
ªloc_vÆ
 >> 8 ) & 0x7;

584 
uöt8_t
 
imm8
 = (
ªloc_vÆ
 ) & 0xFF;

586 *
ªl_fõld_16_±r
 &= 0xFBF0;

587 *
ªl_fõld_16_±r
 |
i
 << 10;

588 *
ªl_fõld_16_±r
 |
imm4
;

590 
ªl_fõld_16_±r
++;

592 *
ªl_fõld_16_±r
 &= 0x8F00;

593 *
ªl_fõld_16_±r
 |
imm3
 << 12;

594 *
ªl_fõld_16_±r
 |
imm8
;

599 
R_ARM_ABS12
:

607 
uöt8_t
 
S
 = !((
ªloc_vÆ
 >> 31) & 0x1);

608 
ªloc_vÆ
 = 
	`abs
(reloc_val) & 0xFFF;

610 *((
uöt32_t
*)
ªl_fõld_±r
) &= 0xFF7FF000;

611 *((
uöt32_t
*)
ªl_fõld_±r
Ë|
ªloc_vÆ
;

612 *((
uöt32_t
*)
ªl_fõld_±r
Ë|(
S
 << 23);

616 
R_ARM_THM_PC12
:

624 
uöt16_t
* 
ªl_fõld_16_±r
 = (uöt16_t*Ë
ªl_fõld_±r
;

625 
uöt8_t
 
U
 = (
ªloc_vÆ
 < 0) ? 0 : 1;

626 
ªloc_vÆ
 = 
	`abs
(reloc_val) & 0xFFF;

628 *
ªl_fõld_16_±r
 &= 0xFF7F;

629 *
ªl_fõld_16_±r
 |
U
 << 7;

631 
ªl_fõld_16_±r
++;

633 *
ªl_fõld_16_±r
 &= 0xF000;

634 *
ªl_fõld_16_±r
 |
ªloc_vÆ
;

648 
R_ARM_ALU_PC_G0_NC
:

649 
R_ARM_ALU_PC_G0
:

650 
R_ARM_ALU_PC_G1_NC
:

651 
R_ARM_ALU_PC_G2
:

656 
uöt32_t
 *
ªl_fõld_32_±r
 = (uöt32_t*Ë
ªl_fõld_±r
;

657 
uöt32_t
 
mask_off£t
;

658 
uöt8_t
 
RvÆ
 = 0;

659 
uöt8_t
 
IvÆ
 = 0;

661 *
ªl_fõld_32_±r
 &= 0xFF3FF000;

666 i‡((
öt32_t
)
ªloc_vÆ
 >= 0)

667 *
ªl_fõld_32_±r
 |= 0x1 << 23;

669 *
ªl_fõld_32_±r
 |= 0x1 << 22;

671 
ªloc_vÆ
 = 
	`abs
(reloc_val);

672 
	`ªl_mask_f‹_group
(
r_ty≥
, &
ªloc_vÆ
);

674 
mask_off£t
 = 
	`ªl_Æu_mask_off£t
(
ªloc_vÆ
, 2);

676 
RvÆ
 = 32 - 
mask_off£t
;

677 
IvÆ
 = (
ªloc_vÆ
 >> 
mask_off£t
) & 0xFF;

679 i‡(
ªloc_vÆ
 & ~(0xFF << 
mask_off£t
))

680 
	`DLIF_îr‹
(
DLET_RELOC
, "relocation overflow\n");

682 *
ªl_fõld_32_±r
 |((
RvÆ
 >> 1) & 0xF) << 8;

683 *
ªl_fõld_32_±r
 |(
IvÆ
 & 0xFF);

687 
R_ARM_LDR_PC_G0
:

688 
R_ARM_LDR_PC_G1
:

689 
R_ARM_LDR_PC_G2
:

694 
uöt8_t
 
UvÆ
 = (
ªloc_vÆ
 < 0) ? 0 : 1;

695 
uöt32_t
 
LvÆ
 = 0;

697 
ªloc_vÆ
 = 
	`abs
(reloc_val);

699 
	`ªl_mask_f‹_group
(
r_ty≥
, &
ªloc_vÆ
);

701 i‡(
	`abs
(
ªloc_vÆ
) >= 0x1000)

702 
	`DLIF_îr‹
(
DLET_RELOC
, "relocation overflow!\n");

704 
LvÆ
 = 
ªloc_vÆ
 & 0xFFF;

706 *((
uöt32_t
*Ë
ªl_fõld_±r
) &= 0xFF7FF000;

707 *((
uöt32_t
*Ë
ªl_fõld_±r
Ë|
UvÆ
 << 23;

708 *((
uöt32_t
*Ë
ªl_fõld_±r
Ë|
LvÆ
;

712 
R_ARM_LDRS_PC_G0
:

713 
R_ARM_LDRS_PC_G1
:

714 
R_ARM_LDRS_PC_G2
:

719 
uöt8_t
 
UvÆ
 = (
ªloc_vÆ
 < 0) ? 0 : 1;

720 
uöt8_t
 
HvÆ
;

721 
uöt8_t
 
LvÆ
;

723 
ªloc_vÆ
 = 
	`abs
(reloc_val);

725 
	`ªl_mask_f‹_group
(
r_ty≥
, &
ªloc_vÆ
);

727 i‡(
	`abs
(
ªloc_vÆ
) >= 0x100)

728 
	`DLIF_îr‹
(
DLET_RELOC
, "relocation overflow!\n");

730 
HvÆ
 = (
ªloc_vÆ
 >> 4) & 0xF;

731 
LvÆ
 = (
ªloc_vÆ
 ) & 0xF;

733 *((
uöt32_t
*Ë
ªl_fõld_±r
) &= 0xFF7FF0F0;

734 *((
uöt32_t
*Ë
ªl_fõld_±r
Ë|(
UvÆ
 << 23);

735 *((
uöt32_t
*Ë
ªl_fõld_±r
Ë|(
HvÆ
 << 8);

736 *((
uöt32_t
*Ë
ªl_fõld_±r
Ë|
LvÆ
;

740 
R_ARM_LDC_PC_G0
:

741 
R_ARM_LDC_PC_G1
:

742 
R_ARM_LDC_PC_G2
:

747 
uöt8_t
 
UvÆ
 = (
ªloc_vÆ
 < 0) ? 0 : 1;

748 
uöt8_t
 
LvÆ
;

750 
ªloc_vÆ
 = 
	`abs
(reloc_val);

752 
	`ªl_mask_f‹_group
(
r_ty≥
, &
ªloc_vÆ
);

754 i‡(
	`abs
(
ªloc_vÆ
) >= 0x1000)

755 
	`DLIF_îr‹
(
DLET_RELOC
, "relocation overflow!\n");

757 
LvÆ
 = 
ªloc_vÆ
 & 0xFF;

759 *((
uöt32_t
*Ë
ªl_fõld_±r
) &= 0xFF7FFF00;

760 *((
uöt32_t
*Ë
ªl_fõld_±r
Ë|(
UvÆ
 << 23);

761 *((
uöt32_t
*Ë
ªl_fõld_±r
Ë|
LvÆ
;

770 
R_ARM_THM_ALU_PREL_11_0
:

779 
uöt16_t
* 
ªl_fõld_16_±r
 = (uöt16_t*Ë
ªl_fõld_±r
;

780 
uöt16_t
 
imm12
;

781 
uöt8_t
 
bôs_7_0
, 
bôs_15_8
, 
bôs_23_16
, 
bôs_31_24
, 
IvÆ
,

782 
imm3
, 
imm8
;

789 *
ªl_fõld_16_±r
 &= 0xFB5F;

790 i‡(
ªloc_vÆ
 < 0)

791 *
ªl_fõld_16_±r
 |= 0x00A0;

793 
ªloc_vÆ
 = 
	`abs
(reloc_val);

798 
bôs_7_0
 = (
ªloc_vÆ
) & 0xFF;

799 
bôs_15_8
 = (
ªloc_vÆ
 >> 8) & 0xFF;

800 
bôs_23_16
 = (
ªloc_vÆ
 >> 16) & 0xFF;

801 
bôs_31_24
 = (
ªloc_vÆ
 >> 24) & 0xFF;

806 i‡(
bôs_23_16
 =
bôs_7_0
 && 
bôs_31_24
 =0 && 
bôs_15_8
 == 0)

807 
imm12
 = (0x1 << 8Ë| 
bôs_7_0
;

812 i‡(
bôs_31_24
 =
bôs_15_8
 && 
bôs_23_16
 =0 && 
bôs_7_0
 == 0)

813 
imm12
 = (0x2 << 8Ë| 
bôs_7_0
;

818 i‡(
bôs_31_24
 =
bôs_23_16
 && bôs_31_24 =
bôs_15_8
 &&

819 
bôs_31_24
 =
bôs_7_0
)

820 
imm12
 = (0x3 << 8Ë| 
bôs_7_0
;

826 i‡(
ªloc_vÆ
 >= 0 &&Ñeloc_val <= 255)

827 
imm12
 = 
ªloc_vÆ
;

835 
uöt32_t
 
mask_off£t
 = 
	`ªl_Æu_mask_off£t
(

836 (
uöt32_t
)
ªloc_vÆ
, 1);

837 
uöt8_t
 
RvÆ
 = 32 - 
mask_off£t
;

838 
uöt8_t
 
SvÆ
 = (
ªloc_vÆ
 >> 
mask_off£t
) & 0x7F;

840 
imm12
 = (
RvÆ
 << 7Ë| 
SvÆ
;

846 i‡(
ªloc_vÆ
 & ~(0xFF << 
mask_off£t
))

847 
	`DLIF_îr‹
(
DLET_RELOC
, "relocation overflow!\n");

850 
IvÆ
 = (
imm12
 >> 11) & 0x1;

851 
imm3
 = (
imm12
 >> 8) & 0x7;

852 
imm8
 = (
imm12
) & 0xFF;

854 *
ªl_fõld_16_±r
 |
IvÆ
 << 10;

855 
ªl_fõld_16_±r
++;

856 *
ªl_fõld_16_±r
 |
imm3
 << 12;

857 *
ªl_fõld_16_±r
 |
imm8
;

862 
	`DLIF_îr‹
(
DLET_RELOC
,

866 
	}
}

872 
öt32_t
 
	$∑ck_ªsu…
(
öt32_t
 
u≈acked_ªsu…
, 
r_ty≥
)

874 
r_ty≥
)

876 
R_ARM_ABS32
:

877 
R_ARM_REL32
:

878 
R_ARM_ABS16
:

879 
R_ARM_ABS8
:

880 
R_ARM_PREL31
:

881 
R_ARM_MOVW_ABS_NC
:

882 
R_ARM_MOVW_PREL_NC
:

883 
R_ARM_THM_MOVW_ABS_NC
:

884 
R_ARM_THM_MOVW_PREL_NC
:

885 
R_ARM_ABS32_NOI
:

886 
R_ARM_REL32_NOI
:

887 
R_ARM_ABS12
:

888 
R_ARM_ALU_PC_G0_NC
:

889 
R_ARM_ALU_PC_G0
:

890 
R_ARM_ALU_PC_G1_NC
:

891 
R_ARM_ALU_PC_G1
:

892 
R_ARM_ALU_PC_G2
:

893 
R_ARM_LDR_PC_G0
:

894 
R_ARM_LDR_PC_G1
:

895 
R_ARM_LDR_PC_G2
:

896 
R_ARM_LDRS_PC_G0
:

897 
R_ARM_LDRS_PC_G1
:

898 
R_ARM_LDRS_PC_G2
:

899 
R_ARM_LDC_PC_G0
:

900 
R_ARM_LDC_PC_G1
:

901 
R_ARM_LDC_PC_G2
:

902 
R_ARM_THM_PC12
:

903 
R_ARM_THM_ALU_PREL_11_0
:

904  
u≈acked_ªsu…
;

906 
R_ARM_PC24
:

907 
R_ARM_CALL
:

908 
R_ARM_PLT32
:

909 
R_ARM_THM_CALL
:

910 
R_ARM_THM_JUMP24
:

911 
R_ARM_THM_JUMP11
:

912 
R_ARM_THM_JUMP8
:

913 
R_ARM_THM_JUMP6
:

914 
R_ARM_THM_JUMP19
:

915  
u≈acked_ªsu…
 >> 1;

917 
R_ARM_JUMP24
:

918 
R_ARM_THM_ABS5
:

919 
R_ARM_THM_PC8
:

920  
u≈acked_ªsu…
 >> 2;

922 
R_ARM_MOVT_ABS
:

923 
R_ARM_MOVT_PREL
:

924 
R_ARM_THM_MOVT_ABS
:

925 
R_ARM_THM_MOVT_PREL
:

926  
u≈acked_ªsu…
 >> 16;

929 
	`DLIF_îr‹
(
DLET_RELOC
,

934 
	}
}

940 
öt32_t
 
	$mask_ªsu…
(
öt32_t
 
unmasked_ªsu…
, 
r_ty≥
)

942 
r_ty≥
)

944 
R_ARM_ABS8
:

945 
R_ARM_THM_JUMP8
:

946 
R_ARM_THM_PC8
:

947  
unmasked_ªsu…
 & 0xFF;

949 
R_ARM_ABS16
:

950 
R_ARM_MOVW_ABS_NC
:

951 
R_ARM_MOVT_ABS
:

952 
R_ARM_MOVW_PREL_NC
:

953 
R_ARM_MOVT_PREL
:

954 
R_ARM_THM_MOVW_ABS_NC
:

955 
R_ARM_THM_MOVT_ABS
:

956 
R_ARM_THM_MOVW_PREL_NC
:

957 
R_ARM_THM_MOVT_PREL
:

958  
unmasked_ªsu…
 & 0xFFFF;

960 
R_ARM_ABS32
:

961 
R_ARM_REL32
:

962 
R_ARM_ABS32_NOI
:

963 
R_ARM_REL32_NOI
:

964 
R_ARM_ABS12
:

965 
R_ARM_ALU_PC_G0_NC
:

966 
R_ARM_ALU_PC_G0
:

967 
R_ARM_ALU_PC_G1_NC
:

968 
R_ARM_ALU_PC_G1
:

969 
R_ARM_ALU_PC_G2
:

970 
R_ARM_LDR_PC_G0
:

971 
R_ARM_LDR_PC_G1
:

972 
R_ARM_LDR_PC_G2
:

973 
R_ARM_LDRS_PC_G0
:

974 
R_ARM_LDRS_PC_G1
:

975 
R_ARM_LDRS_PC_G2
:

976 
R_ARM_LDC_PC_G0
:

977 
R_ARM_LDC_PC_G1
:

978 
R_ARM_LDC_PC_G2
:

979 
R_ARM_THM_PC12
:

980 
R_ARM_THM_ALU_PREL_11_0
:

981  
unmasked_ªsu…
;

983 
R_ARM_PREL31
:

984  
unmasked_ªsu…
 & 0x7FFFFFFF;

986 
R_ARM_CALL
:

987 
R_ARM_PC24
:

988 
R_ARM_THM_CALL
:

989 
R_ARM_THM_JUMP24
:

990  
unmasked_ªsu…
 & 0x01FFFFFF;

992 
R_ARM_JUMP24
:

993  
unmasked_ªsu…
 & 0x00FFFFFF;

995 
R_ARM_THM_JUMP11
:

996  
unmasked_ªsu…
 & 0x7FF;

998 
R_ARM_THM_ABS5
:

999  
unmasked_ªsu…
 & 0x1F;

1001 
R_ARM_THM_JUMP6
:

1002  
unmasked_ªsu…
 & 0x3F;

1004 
R_ARM_THM_JUMP19
:

1005  
unmasked_ªsu…
 & 0xFFFFF;

1008 
	`DLIF_îr‹
(
DLET_RELOC
,

1013 
	}
}

1020 
BOOL
 
	$ªl_ovîÊow
(
ARM_RELOC_TYPE
 
r_ty≥
, 
öt32_t
 
ªloc_vÆue
)

1022 
r_ty≥
)

1024 
uöt32_t
 
sbôs
;

1025 
R_ARM_JUMP24
:

1026 
R_ARM_CALL
:

1027 
R_ARM_PC24
:

1029 
sbôs
 = 
ªloc_vÆue
 >> 25;

1030  (
sbôs
 != 0 && sbits != -1UL);

1032 
R_ARM_THM_CALL
:

1033 
R_ARM_THM_JUMP24
:

1035 
sbôs
 = 
ªloc_vÆue
 >> 24;

1036  (
sbôs
 != 0 && sbits != -1UL);

1038 
R_ARM_THM_JUMP19
:

1040 
sbôs
 = 
ªloc_vÆue
 >> 20;

1041  (
sbôs
 != 0 && sbits != -1UL);

1043 
R_ARM_ABS12
:

1044 
R_ARM_THM_PC12
:

1046  
	`abs
(
ªloc_vÆue
) >= 0x1000;

1048 
R_ARM_PREL31
:

1050 
sbôs
 = 
ªloc_vÆue
 >> 30;

1051  (
sbôs
 != 0 && sbits != -1UL);

1054 
R_ARM_ABS16
:

1056  ((
ªloc_vÆue
 > 65535) ||

1057 (
ªloc_vÆue
 < -32768));

1059 
R_ARM_ABS8
:

1061  ((
ªloc_vÆue
 > 255) ||

1062 (
ªloc_vÆue
 < -128));

1066  
FALSE
;

1068 
	}
}

1073 
	$ªloc_do
(
ARM_RELOC_TYPE
 
r_ty≥
, 
uöt8_t
* 
addªss
,

1074 
uöt32_t
 
addíd
, uöt32_à
symvÆ
, uöt32_à
pc
,

1075 
uöt32_t
 
ba£_poöãr
)

1077 
öt32_t
 
ªloc_vÆue
 = 0;

1079 #i‡
LOADER_DEBUG
 || 
LOADER_PROFILE


1084 
°¨t_time
;

1085 i‡(
debuggög_⁄
 || 
¥ofûög_⁄
)

1087 
DLREL_ªloˇti⁄s
++;

1088 i‡(
¥ofûög_⁄
Ë
°¨t_time
 = 
	`˛ock
();

1096 
r_ty≥
)

1098 
R_ARM_NONE
:

1099 
ªloc_vÆue
 = 
addíd
;

1105 
R_ARM_ABS16
:

1106 
R_ARM_ABS12
:

1107 
R_ARM_THM_ABS5
:

1108 
R_ARM_ABS8
:

1109 
R_ARM_MOVT_ABS
:

1110 
R_ARM_THM_MOVT_ABS
:

1111 
R_ARM_ABS32_NOI
:

1112 
R_ARM_PLT32_ABS
:

1113 
ªloc_vÆue
 = 
	`OPND_S
(
symvÆ
Ë+ 
addíd
;

1119 
R_ARM_ABS32
:

1120 
R_ARM_MOVW_ABS_NC
:

1121 
R_ARM_THM_MOVW_ABS_NC
:

1122 
ªloc_vÆue
 = (
	`OPND_S
(
symvÆ
Ë+ 
addíd
Ë| 
	`OPND_T
(symval);

1128 
R_ARM_LDR_PC_G0
:

1129 
R_ARM_LDR_PC_G1
:

1130 
R_ARM_LDR_PC_G2
:

1131 
R_ARM_MOVT_PREL
:

1132 
R_ARM_THM_MOVT_PREL
:

1133 
R_ARM_REL32_NOI
:

1134 
R_ARM_THM_JUMP6
:

1135 
R_ARM_THM_JUMP11
:

1136 
R_ARM_THM_JUMP8
:

1137 
R_ARM_LDRS_PC_G0
:

1138 
R_ARM_LDRS_PC_G1
:

1139 
R_ARM_LDRS_PC_G2
:

1140 
R_ARM_LDC_PC_G0
:

1141 
R_ARM_LDC_PC_G1
:

1142 
R_ARM_LDC_PC_G2
:

1143 
ªloc_vÆue
 = (
	`OPND_S
(
symvÆ
Ë+ 
addíd
Ë- 
pc
;

1149 
R_ARM_THM_PC8
:

1150 
R_ARM_THM_PC12
:

1151 
ªloc_vÆue
 = (
	`OPND_S
(
symvÆ
Ë+ 
addíd
Ë- (
pc
 & 0xFFFFFFFC);

1157 
R_ARM_REL32
:

1158 
R_ARM_PC24
:

1159 
R_ARM_THM_CALL
:

1160 
R_ARM_PLT32
:

1161 
R_ARM_CALL
:

1162 
R_ARM_JUMP24
:

1163 
R_ARM_THM_JUMP24
:

1164 
R_ARM_PREL31
:

1165 
R_ARM_MOVW_PREL_NC
:

1166 
R_ARM_THM_MOVW_PREL_NC
:

1167 
R_ARM_THM_JUMP19
:

1168 
R_ARM_THM_ALU_PREL_11_0
:

1169 
R_ARM_ALU_PC_G0_NC
:

1170 
R_ARM_ALU_PC_G0
:

1171 
R_ARM_ALU_PC_G1_NC
:

1172 
R_ARM_ALU_PC_G1
:

1173 
R_ARM_ALU_PC_G2
:

1174 
ªloc_vÆue
 = ((
	`OPND_S
(
symvÆ
Ë+ 
addíd
Ë| 
	`OPND_T
(symvÆ)Ë- 
pc
;

1181 
	`DLIF_îr‹
(
DLET_RELOC
,"invalidÑelocationÅype!\n");

1186 i‡(
	`ªl_ovîÊow
(
r_ty≥
, 
ªloc_vÆue
))

1187 
	`DLIF_îr‹
(
DLET_RELOC
, "relocation overflow!\n");

1193 
ªloc_vÆue
 = 
	`∑ck_ªsu…
‘ñoc_vÆue, 
r_ty≥
);

1198 
ªloc_vÆue
 = 
	`mask_ªsu…
‘ñoc_vÆue, 
r_ty≥
);

1203 
	`wrôe_ªloc_r
(
addªss
, 
r_ty≥
, 
ªloc_vÆue
, 
symvÆ
);

1205 #i‡
LOADER_DEBUG
 || 
LOADER_PROFILE


1210 i‡(
¥ofûög_⁄
)

1211 
DLREL_tŸÆ_ªloc_time
 +(
	`˛ock
(Ë- 
°¨t_time
);

1212 i‡(
debuggög_⁄
)

1213 
	`DLIF_åa˚
("ªloc_vÆuê0x%x\n", 
ªloc_vÆue
);

1215 
	}
}

1220 
	$ªl_u≈ack_addíd
(
ARM_RELOC_TYPE
 
r_ty≥
,

1221 
uöt8_t
* 
addªss
,

1222 
uöt32_t
* 
addíd
)

1224 
r_ty≥
)

1226 
R_ARM_ABS32
:

1227 
R_ARM_REL32
:

1228 
R_ARM_ABS32_NOI
:

1229 
R_ARM_REL32_NOI
:

1231 
	`DLIF_åa˚
("ªl_u≈ack_addíd %d\n", 
__LINE__
);

1232 *
addíd
 = *((
uöt32_t
*)
addªss
);

1233 
	`DLIF_åa˚
("ªl_u≈ack_addíd %d\n", 
__LINE__
);

1237 
R_ARM_ABS16
:

1239 *
addíd
 = *((
uöt16_t
*)
addªss
);

1240 *
addíd
 = 
	`SIGN_EXTEND
(*addend, 16);

1244 
R_ARM_ABS8
:

1246 *
addíd
 = *
addªss
;

1247 *
addíd
 = 
	`SIGN_EXTEND
(*addend, 8);

1251 
R_ARM_CALL
:

1252 
R_ARM_PC24
:

1253 
R_ARM_PLT32
:

1254 
R_ARM_JUMP24
:

1256 
uöt32_t
 
ªl_fõld
 = *((uöt32_t*)
addªss
);

1257 
uöt32_t
 
imm24
;

1258 
uöt8_t
 
HvÆ
;

1259 i‡(
	`IS_BLX
(
ªl_fõld
))

1260 
HvÆ
 = 
	`EXTRACT
(
ªl_fõld
, 24, 1);

1262 
HvÆ
 = 0x0;

1264 
imm24
 = 
	`EXTRACT
(
ªl_fõld
, 0, 24);

1265 *
addíd
 = (((
imm24
 << 1Ë+ 
HvÆ
) << 1);

1266 
	`SIGN_EXTEND
(*
addíd
, 26);

1270 
R_ARM_THM_JUMP11
:

1272 *
addíd
 = 
	`EXTRACT
(*((
uöt16_t
*)
addªss
), 0, 11);

1273 *
addíd
 = *addend << 1;

1274 
	`SIGN_EXTEND
(*
addíd
, 12);

1278 
R_ARM_THM_JUMP8
:

1280 *
addíd
 = 
	`EXTRACT
(*((
uöt16_t
*)
addªss
), 0, 8);

1281 *
addíd
 = *addend << 1;

1282 
	`SIGN_EXTEND
(*
addíd
, 9);

1286 
R_ARM_THM_CALL
:

1287 
R_ARM_THM_JUMP24
:

1289 
uöt16_t
* 
ªl_fõld_±r
 = (uöt16_à*Ë
addªss
;

1291 
uöt8_t
 
SvÆ
;

1292 
uöt16_t
 
imm10
;

1293 
uöt8_t
 
I1
;

1294 
uöt8_t
 
I2
;

1295 
uöt16_t
 
imm11
;

1297 
SvÆ
 = 
	`EXTRACT
(*
ªl_fõld_±r
, 10, 1);

1298 
imm10
 = 
	`EXTRACT
(*
ªl_fõld_±r
, 0, 10);

1299 
ªl_fõld_±r
++;

1300 
I1
 = !(
	`EXTRACT
(*
ªl_fõld_±r
, 13, 1Ë^ 
SvÆ
);

1301 
I2
 = !(
	`EXTRACT
(*
ªl_fõld_±r
, 11, 1Ë^ 
SvÆ
);

1302 
imm11
 = 
	`EXTRACT
(*
ªl_fõld_±r
, 0, 11);

1304 *
addíd
 = (
SvÆ
 << 23Ë| (
I1
 << 22Ë| (
I2
 << 21) |

1305 (
imm10
 << 11Ë| 
imm11
;

1306 *
addíd
 = *addend << 1;

1307 
	`SIGN_EXTEND
(*
addíd
, 25);

1311 
R_ARM_THM_JUMP19
:

1313 
uöt16_t
* 
ªl_fõld_±r
 = (uöt16_à*Ë
addªss
;

1315 
uöt8_t
 
SvÆ
;

1316 
uöt8_t
 
imm6
;

1317 
uöt8_t
 
J1
;

1318 
uöt8_t
 
J2
;

1319 
uöt16_t
 
imm11
;

1321 
SvÆ
 = 
	`EXTRACT
(*
ªl_fõld_±r
, 10, 1);

1322 
imm6
 = 
	`EXTRACT
(*
ªl_fõld_±r
, 0, 6);

1323 
ªl_fõld_±r
++;

1324 
J1
 = 
	`EXTRACT
(*
ªl_fõld_±r
, 13, 1);

1325 
J2
 = 
	`EXTRACT
(*
ªl_fõld_±r
, 11, 1);

1326 
imm11
 = 
	`EXTRACT
(*
ªl_fõld_±r
, 0, 11);

1328 *
addíd
 = (
SvÆ
 << 19Ë| (
J2
 << 18Ë| (
J1
 << 17) |

1329 (
imm6
 << 11Ë| 
imm11
;

1330 *
addíd
 = *addend << 1;

1331 
	`SIGN_EXTEND
(*
addíd
, 21);

1335 
R_ARM_LDR_PC_G0
:

1336 
R_ARM_LDR_PC_G1
:

1337 
R_ARM_LDR_PC_G2
:

1338 
R_ARM_ABS12
:

1340 
uöt8_t
 
UvÆ
;

1341 
uöt16_t
 
imm12
;

1343 
uöt32_t
* 
ªl_fõld_±r
 = (uöt32_t*Ë
addªss
;

1345 
UvÆ
 = 
	`EXTRACT
(*
ªl_fõld_±r
, 23, 1);

1346 
imm12
 = 
	`EXTRACT
(*
ªl_fõld_±r
, 0, 12);

1348 *
addíd
 = (
UvÆ
 =1Ë? 
imm12
 : -((
öt32_t
)(imm12));

1352 
R_ARM_THM_PC12
:

1354 
uöt8_t
 
UvÆ
;

1355 
uöt16_t
 
imm12
;

1356 
uöt16_t
* 
ªl_fõld_±r
 = (uöt16_t*Ë
addªss
;

1358 
UvÆ
 = 
	`EXTRACT
(*
ªl_fõld_±r
, 7, 1);

1359 
ªl_fõld_±r
++;

1360 
imm12
 = 
	`EXTRACT
(*
ªl_fõld_±r
, 0, 12);

1362 *
addíd
 = (
UvÆ
 =1Ë? 
imm12
 : -((
öt32_t
)imm12);

1366 
R_ARM_LDRS_PC_G0
:

1367 
R_ARM_LDRS_PC_G1
:

1368 
R_ARM_LDRS_PC_G2
:

1370 
uöt8_t
 
UvÆ
;

1371 
uöt8_t
 
imm4H
;

1372 
uöt8_t
 
imm4L
;

1373 
uöt32_t
* 
ªl_fõld_±r
 = (uöt32_t*Ë
addªss
;

1375 
UvÆ
 = 
	`EXTRACT
(*
ªl_fõld_±r
, 23, 1);

1376 
imm4H
 = 
	`EXTRACT
(*
ªl_fõld_±r
, 8, 4);

1377 
imm4L
 = 
	`EXTRACT
(*
ªl_fõld_±r
, 0, 4);

1379 *
addíd
 = (
imm4H
 << 4Ë| 
imm4L
;

1380 i‡(
UvÆ
 =0Ë*
addíd
 = -(*addend);

1384 
R_ARM_LDC_PC_G0
:

1385 
R_ARM_LDC_PC_G1
:

1386 
R_ARM_LDC_PC_G2
:

1388 
uöt8_t
 
UvÆ
;

1389 
uöt16_t
 
imm8
;

1390 
uöt32_t
* 
ªl_fõld_±r
 = (uöt32_t*Ë
addªss
;

1392 
UvÆ
 = 
	`EXTRACT
(*
ªl_fõld_±r
, 23, 1);

1393 
imm8
 = 
	`EXTRACT
(*
ªl_fõld_±r
, 0, 8);

1395 *
addíd
 = (
UvÆ
 =1Ë? 
imm8
 : -((
öt32_t
)imm8);

1399 
R_ARM_ALU_PC_G0_NC
:

1400 
R_ARM_ALU_PC_G0
:

1401 
R_ARM_ALU_PC_G1_NC
:

1402 
R_ARM_ALU_PC_G1
:

1403 
R_ARM_ALU_PC_G2
:

1405 
uöt8_t
 
RvÆ
;

1406 
uöt8_t
 
IvÆ
;

1407 
uöt32_t
 
ªl_fõld
 = *((uöt32_t*)
addªss
);

1409 
RvÆ
 = 
	`EXTRACT
(
ªl_fõld
, 8, 4);

1410 
IvÆ
 = 
	`EXTRACT
(
ªl_fõld
, 0, 8);

1412 *
addíd
 = (
IvÆ
 >> 
RvÆ
) | (Ival << (32 - Rval));

1414 i‡(
	`EXTRACT
(
ªl_fõld
, 22, 2) == 1)

1415 *
addíd
 = -(*addend);

1419 
R_ARM_MOVW_ABS_NC
:

1420 
R_ARM_MOVT_ABS
:

1421 
R_ARM_MOVW_PREL_NC
:

1422 
R_ARM_MOVT_PREL
:

1424 
uöt8_t
 
IvÆ
;

1425 
uöt16_t
 
JvÆ
;

1426 
uöt32_t
 
ªl_fõld
 = *((uöt32_t*)
addªss
);

1427 
IvÆ
 = 
	`EXTRACT
(
ªl_fõld
, 16, 4);

1428 
JvÆ
 = 
	`EXTRACT
(
ªl_fõld
, 0, 12);

1430 *
addíd
 = (
IvÆ
 << 12Ë| 
JvÆ
;

1431 
	`SIGN_EXTEND
(*
addíd
, 16);

1435 
R_ARM_THM_MOVW_ABS_NC
:

1436 
R_ARM_THM_MOVT_ABS
:

1437 
R_ARM_THM_MOVW_PREL_NC
:

1438 
R_ARM_THM_MOVT_PREL
:

1440 
uöt8_t
 
IvÆ
;

1441 
uöt8_t
 
JvÆ
;

1442 
uöt8_t
 
KvÆ
;

1443 
uöt8_t
 
LvÆ
;

1445 
uöt16_t
* 
ªl_fõld_±r
 = (uöt16_t*)
addªss
;

1446 
uöt16_t
 
ªl_fõld
 = *
ªl_fõld_±r
;

1448 
IvÆ
 = 
	`EXTRACT
(
ªl_fõld
, 0, 4);

1449 
JvÆ
 = 
	`EXTRACT
(
ªl_fõld
, 10, 1);

1451 
ªl_fõld
 = *(
ªl_fõld_±r
 + 1);

1452 
KvÆ
 = 
	`EXTRACT
(
ªl_fõld
, 12, 3);

1453 
LvÆ
 = 
	`EXTRACT
(
ªl_fõld
, 0, 8);

1455 *
addíd
 = (
IvÆ
 << 12Ë| (
JvÆ
 << 11Ë| (
KvÆ
 << 8Ë| 
LvÆ
;

1456 
	`SIGN_EXTEND
(*
addíd
, 16);

1460 
R_ARM_THM_ALU_PREL_11_0
:

1462 
uöt8_t
 
IvÆ
;

1463 
uöt8_t
 
JvÆ
;

1464 
uöt8_t
 
KvÆ
;

1465 
uöt16_t
 
imm12
;

1466 
uöt16_t
* 
ªl_fõld_±r
 = (uöt16_t*)
addªss
;

1467 
uöt16_t
 
ªl_fõld
 = *
ªl_fõld_±r
;

1468 
uöt8_t
 
bôs_11_10
;

1470 
IvÆ
 = 
	`EXTRACT
(
ªl_fõld
, 12, 3);

1472 
ªl_fõld
 = *(
ªl_fõld_±r
 + 1);

1473 
JvÆ
 = 
	`EXTRACT
(
ªl_fõld
, 12, 3);

1474 
KvÆ
 = 
	`EXTRACT
(
ªl_fõld
, 0 , 8);

1476 
imm12
 = (
IvÆ
 << 11Ë| (
JvÆ
 << 8Ë| 
KvÆ
;

1483 
bôs_11_10
 = (
imm12
 >> 10) & 0x3;

1485 i‡(
bôs_11_10
 == 0x0)

1487 
uöt8_t
 
bôs_9_8
 = (
imm12
 >> 8) & 0x3;

1488 
uöt8_t
 
bôs_7_0
 = (
imm12
) & 0xFF;

1490 
bôs_9_8
)

1492 0x0: *
addíd
 = 
bôs_7_0
;

1494 0x1: *
addíd
 = (
bôs_7_0
 << 16) | (bits_7_0);

1496 0x2: *
addíd
 = (
bôs_7_0
 << 24) | (bits_7_0 << 8);

1498 0x3: *
addíd
(
bôs_7_0
 << 24) | (bits_7_0 << 16) |

1499 (
bôs_7_0
 << 8) | (bits_7_0);

1505 
uöt8_t
 
bôs_6_0
 = (
imm12
) & 0x7F;

1506 
uöt8_t
 
bôs_11_7
 = (
imm12
 >> 7) & 0x1F;

1508 
uöt8_t
 
byã
 = 0x80 | 
bôs_6_0
;

1509 *
addíd
 = (
byã
 >> 
bôs_11_7
) | (byte << (32 - bits_11_7));

1512 
ªl_fõld
 = *
ªl_fõld_±r
;

1514 i‡(
	`EXTRACT
(
ªl_fõld
, 7, 1) == 1 &&

1515 
	`EXTRACT
(
ªl_fõld
, 5, 1) == 1)

1516 *
addíd
 = -(*addend);

1520 
R_ARM_THM_JUMP6
:

1522 
uöt8_t
 
IvÆ
;

1523 
uöt8_t
 
JvÆ
;

1525 
uöt16_t
 
ªl_fõld
 = *((uöt16_t*)
addªss
);

1527 
IvÆ
 = 
	`EXTRACT
(
ªl_fõld
, 9, 1);

1528 
JvÆ
 = 
	`EXTRACT
(
ªl_fõld
, 3, 5);

1530 *
addíd
 = ((
IvÆ
 << 5Ë| 
JvÆ
) << 1;

1531 *
addíd
 = ((*addend + 4) & 0x7F) - 4;

1536 
R_ARM_THM_ABS5
:

1538 
uöt16_t
 
ªl_fõld
 = *((uöt16_t*)
addªss
);

1539 *
addíd
 = 
	`EXTRACT
(
ªl_fõld
, 6, 5);

1540 *
addíd
 = *addend << 2;

1544 
R_ARM_THM_PC8
:

1546 
uöt16_t
 
ªl_fõld
 = *((uöt16_t*)
addªss
);

1547 *
addíd
 = 
	`EXTRACT
(
ªl_fõld
, 0, 8);

1548 *
addíd
 = *addend << 2;

1549 *
addíd
 = ((*addend + 4) & 0x3FF) - 4;

1554 
R_ARM_PREL31
:

1556 
uöt32_t
 
ªl_fõld
 = *((uöt32_t*)
addªss
);

1557 *
addíd
 = 
	`EXTRACT
(
ªl_fõld
, 0, 31);

1558 
	`SIGN_EXTEND
(*
addíd
, 31);

1563 
	`DLIF_îr‹
(
DLET_RELOC
,

1565 
r_ty≥
);

1567 
	}
}

1572 
BOOL
 
	$¥o˚ss_ªl_èbÀ
(
DLOAD_HANDLE
 
h™dÀ
,

1573 
DLIMP_Lﬂded_Segmít
* 
£g
,

1574 
Elf32_Rñ
* 
ªl_èbÀ
,

1575 
uöt32_t
 
ª um
,

1576 
öt32_t
 *
°¨t_rid
,

1577 
DLIMP_Dy«mic_ModuÀ
* 
dyn_moduÀ
)

1579 
Elf32_Addr
 
£g_°¨t_addr
 = 
£g
->
öput_vaddr
;

1580 
Elf32_Addr
 
£g_íd_addr
 = 
£g_°¨t_addr
 + 
£g
->
phdr
.
p_memsz
;

1581 
BOOL
 
found
 = 
FALSE
;

1582 
öt32_t
 
rid
 = *
°¨t_rid
;

1584 i‡(
rid
 >
ª um
)Ñid = 0;

1586  ; 
rid
 < 
ª um
;Ñid++)

1591 i‡(
ªl_èbÀ
[
rid
].
r_off£t
 >
£g_°¨t_addr
 &&

1592 
ªl_èbÀ
[
rid
].
r_off£t
 < 
£g_íd_addr
)

1594 
Elf32_Addr
 
r_symvÆ
;

1595 
ARM_RELOC_TYPE
 
r_ty≥
 = 
	`ELF32_R_TYPE
(
ªl_èbÀ
[
rid
].
r_öfo
);

1596 
öt32_t
 
r_symid
 = 
	`ELF32_R_SYM
(
ªl_èbÀ
[
rid
].
r_öfo
);

1597 
uöt8_t
* 
ªloc_addªss
;

1598 
uöt32_t
 
pc
;

1599 
uöt32_t
 
addíd
;

1600 
BOOL
 
ch™ge_ídün
;

1602 
found
 = 
TRUE
;

1609 i‡(!
	`DLSYM_ˇn⁄iˇl_lookup
(
h™dÀ
, 
r_symid
, 
dyn_moduÀ
, &
r_symvÆ
))

1612 
ªloc_addªss
 =

1613 (((
uöt8_t
*)(
£g
->
phdr
.
p_vaddr
Ë+ seg->
ªloc_off£t
) +

1614 
ªl_èbÀ
[
rid
].
r_off£t
 - 
£g
->
öput_vaddr
);

1615 
pc
 = (
uöt32_t
Ë
ªloc_addªss
;

1616 
ch™ge_ídün
 = 
	`ªl_sw≠_ídün
(
dyn_moduÀ
, 
r_ty≥
);

1617 i‡(
ch™ge_ídün
)

1618 
	`ªl_ch™ge_ídün
(
r_ty≥
, 
ªloc_addªss
);

1620 
	`ªl_u≈ack_addíd
(
	`ELF32_R_TYPE
(
ªl_èbÀ
[
rid
].
r_öfo
),

1621 
ªloc_addªss
,

1622 &
addíd
);

1624 #i‡
LOADER_DEBUG
 || 
LOADER_PROFILE


1625 i‡(
debuggög_⁄
)

1627 *
r_sym«me
 = (*Ë
dyn_moduÀ
->
symèb
[
r_symid
].
°_«me
;

1628 
	`DLIF_åa˚
("r_type=%d, "

1633 
r_ty≥
,

1634 
pc
,

1635 
addíd
,

1636 
r_sym«me
,

1637 
r_symvÆ
);

1644 
	`ªloc_do
(
r_ty≥
,

1645 
ªloc_addªss
,

1646 
addíd
,

1647 
r_symvÆ
,

1648 
pc
,

1652 i‡(
ch™ge_ídün
)

1653 
	`ªl_ch™ge_ídün
(
r_ty≥
, 
ªloc_addªss
);

1656 i‡(
found
)

1660 *
°¨t_rid
 = 
rid
;

1661  
found
;

1662 
	}
}

1664 
BOOL
 
	$¥o˚ss_ªœ_èbÀ
(
DLOAD_HANDLE
 
h™dÀ
,

1665 
DLIMP_Lﬂded_Segmít
* 
£g
,

1666 
Elf32_Rña
* 
ªœ_èbÀ
,

1667 
uöt32_t
 
ªœnum
,

1668 
öt32_t
* 
°¨t_rid
,

1669 
DLIMP_Dy«mic_ModuÀ
* 
dyn_moduÀ
)

1671 
Elf32_Addr
 
£g_°¨t_addr
 = 
£g
->
öput_vaddr
;

1672 
Elf32_Addr
 
£g_íd_addr
 = 
£g_°¨t_addr
 + 
£g
->
phdr
.
p_memsz
;

1673 
BOOL
 
found
 = 
FALSE
;

1674 
öt32_t
 
rid
 = *
°¨t_rid
;

1676 i‡(
rid
 >
ªœnum
)Ñid = 0;

1678  ; 
rid
 < 
ªœnum
;Ñid++)

1683 i‡(
ªœ_èbÀ
[
rid
].
r_off£t
 >
£g_°¨t_addr
 &&

1684 
ªœ_èbÀ
[
rid
].
r_off£t
 < 
£g_íd_addr
)

1686 
Elf32_Addr
 
r_symvÆ
;

1687 
ARM_RELOC_TYPE
 
r_ty≥
 = 
	`ELF32_R_TYPE
(
ªœ_èbÀ
[
rid
].
r_öfo
);

1688 
öt32_t
 
r_symid
 = 
	`ELF32_R_SYM
(
ªœ_èbÀ
[
rid
].
r_öfo
);

1689 
uöt8_t
* 
ªloc_addªss
;

1690 
uöt32_t
 
pc
;

1691 
uöt32_t
 
addíd
;

1692 
BOOL
 
ch™ge_ídün
;

1694 
found
 = 
TRUE
;

1701 i‡(!
	`DLSYM_ˇn⁄iˇl_lookup
(
h™dÀ
, 
r_symid
, 
dyn_moduÀ
, &
r_symvÆ
))

1704 
ªloc_addªss
 = (((
uöt8_t
*)(
£g
->
phdr
.
p_vaddr
Ë+ seg->
ªloc_off£t
) +

1705 
ªœ_èbÀ
[
rid
].
r_off£t
 - 
£g
->
öput_vaddr
);

1706 
pc
 = (
uöt32_t
Ë
ªloc_addªss
;

1707 
addíd
 = 
ªœ_èbÀ
[
rid
].
r_addíd
;

1709 
ch™ge_ídün
 = 
	`ªl_sw≠_ídün
(
dyn_moduÀ
, 
r_ty≥
);

1710 i‡(
ch™ge_ídün
)

1711 
	`ªl_ch™ge_ídün
(
r_ty≥
, 
ªloc_addªss
);

1713 #i‡
LOADER_DEBUG
 || 
LOADER_PROFILE


1714 i‡(
debuggög_⁄
)

1716 *
r_sym«me
 = (*Ë
dyn_moduÀ
->
symèb
[
r_symid
].
°_«me
;

1717 
	`DLIF_åa˚
("r_type=%d, "

1722 
r_ty≥
,

1723 
pc
,

1724 
addíd
,

1725 
r_sym«me
,

1726 
r_symvÆ
);

1735 
	`ªloc_do
(
	`ELF32_R_TYPE
(
ªœ_èbÀ
[
rid
].
r_öfo
),

1736 
ªloc_addªss
,

1737 
addíd
,

1738 
r_symvÆ
,

1739 
pc
,

1743 i‡(
ch™ge_ídün
)

1744 
	`ªl_ch™ge_ídün
(
r_ty≥
, 
ªloc_addªss
);

1746 i‡(
found
)

1750 *
°¨t_rid
 = 
rid
;

1751  
found
;

1752 
	}
}

1760 
	$ªad_ªl_èbÀ
(
Elf32_Rñ
** 
ªl_èbÀ
,

1761 
öt32_t
 
èbÀ_off£t
,

1762 
uöt32_t
 
ª um
, uöt32_à
ªÀ¡
,

1763 
LOADER_FILE_DESC
* 
ñf_fûe
,

1764 
BOOL
 
wr⁄g_ídün
)

1766 
i
;

1767 *
ªl_èbÀ
 = (
Elf32_Rñ
*Ë
	`DLIF_mÆloc
(
ª um
*
ªÀ¡
);

1768 i‡(
NULL
 =*
ªl_èbÀ
) {

1769 
	`DLIF_îr‹
(
DLET_MEMORY
,"FailedÅo AllocateÑead_rel_table\n");

1772 
	`DLIF_f£ek
(
ñf_fûe
, 
èbÀ_off£t
, 
LOADER_SEEK_SET
);

1773 
	`DLIF_‰ód
(*
ªl_èbÀ
, 
ª um
, 
ªÀ¡
, 
ñf_fûe
);

1775 i‡(
wr⁄g_ídün
)

1776 
i
=0; i<
ª um
; i++)

1777 
	`DLIMP_ch™ge_ªl_ídün
(*
ªl_èbÀ
 + 
i
);

1778 
	}
}

1786 
	$ªad_ªœ_èbÀ
(
Elf32_Rña
** 
ªœ_èbÀ
,

1787 
öt32_t
 
èbÀ_off£t
,

1788 
uöt32_t
 
ªœnum
, uöt32_à
ªœít
,

1789 
LOADER_FILE_DESC
* 
ñf_fûe
,

1790 
BOOL
 
wr⁄g_ídün
)

1792 
i
;

1793 *
ªœ_èbÀ
 = 
	`DLIF_mÆloc
(
ªœnum
*
ªœít
);

1794 i‡(
NULL
 =*
ªœ_èbÀ
) {

1795 
	`DLIF_îr‹
(
DLET_MEMORY
,"FailedÅo AllocateÑead_rela_table\n");

1798 
	`DLIF_f£ek
(
ñf_fûe
, 
èbÀ_off£t
, 
LOADER_SEEK_SET
);

1799 
	`DLIF_‰ód
(*
ªœ_èbÀ
, 
ªœnum
, 
ªœít
, 
ñf_fûe
);

1801 i‡(
wr⁄g_ídün
)

1802 
i
=0; i<
ªœnum
; i++)

1803 
	`DLIMP_ch™ge_ªœ_ídün
(*
ªœ_èbÀ
 + 
i
);

1804 
	}
}

1812 
	$¥o˚ss_gŸ_ªlocs
(
DLOAD_HANDLE
 
h™dÀ
,

1813 
Elf32_Rñ
* 
ªl_èbÀ
, 
uöt32_t
 
ª um
,

1814 
Elf32_Rña
* 
ªœ_èbÀ
, 
uöt32_t
 
ªœnum
,

1815 
DLIMP_Dy«mic_ModuÀ
* 
dyn_moduÀ
)

1817 
DLIMP_Lﬂded_Segmít
* 
£g
 =

1818 (
DLIMP_Lﬂded_Segmít
*)(
dyn_moduÀ
->
lﬂded_moduÀ
->
lﬂded_£gmíts
.
buf
);

1819 
£g_size
 = 
dyn_moduÀ
->
lﬂded_moduÀ
->
lﬂded_£gmíts
.
size
;

1820 
öt32_t
 
ªl_rid
 = 0;

1821 
öt32_t
 
ªœ_rid
 = 0;

1822 
s
;

1824 
s
=0; s<
£g_size
; s++)

1829 if(!
£g
[
s
].
phdr
.
p_fûesz
) ;

1831 #i‡
LOADER_DEBUG
 || 
LOADER_PROFILE


1835 i‡(
debuggög_⁄
)

1837 
	`DLIF_åa˚
("Rño¯£gmíà%d:\n", 
s
);

1838 
	`DLIF_åa˚
("addr=0x%x, old_addr=0x%x,Ñ_offset=0x%x\n",

1839 
£g
[
s
].
phdr
.
p_vaddr
, seg[s].
öput_vaddr
, seg[s].
ªloc_off£t
);

1843 i‡(
ªœ_èbÀ
)

1844 
	`¥o˚ss_ªœ_èbÀ
(
h™dÀ
, (
£g
 + 
s
), 
ªœ_èbÀ
, 
ªœnum
,

1845 &
ªœ_rid
, 
dyn_moduÀ
);

1847 i‡(
ªl_èbÀ
)

1848 
	`¥o˚ss_ªl_èbÀ
(
h™dÀ
, (
£g
 + 
s
), 
ªl_èbÀ
, 
ª um
, &
ªl_rid
,

1849 
dyn_moduÀ
);

1851 
	}
}

1860 
	$¥o˚ss_∂tgŸ_ªlocs
(
DLOAD_HANDLE
 
h™dÀ
,

1861 * 
∂t_ªloc_èbÀ
, 
ª…y≥
,

1862 
uöt32_t
 
∂äum
,

1863 
DLIMP_Dy«mic_ModuÀ
* 
dyn_moduÀ
)

1865 
Elf32_Addr
 
r_off£t
 = (
ª…y≥
 =
DT_REL
) ?

1866 ((
Elf32_Rñ
*Ë
∂t_ªloc_èbÀ
)->
r_off£t
 :

1867 ((
Elf32_Rña
*Ë
∂t_ªloc_èbÀ
)->
r_off£t
;

1868 
DLIMP_Lﬂded_Segmít
* 
£g
 =

1869 (
DLIMP_Lﬂded_Segmít
*)(
dyn_moduÀ
->
lﬂded_moduÀ
->
lﬂded_£gmíts
.
buf
);

1870 
£g_size
 = 
dyn_moduÀ
->
lﬂded_moduÀ
->
lﬂded_£gmíts
.
size
;

1871 
öt32_t
 
∂t_rid
 = 0;

1872 
s
;

1880 
s
=0; s<
£g_size
; s++)

1882 
Elf32_Addr
 
£g_°¨t_addr
 = 
£g
[
s
].
öput_vaddr
;

1883 
Elf32_Addr
 
£g_íd_addr
 = 
£g_°¨t_addr
 + 
£g
[
s
].
phdr
.
p_memsz
;

1888 if(!
£g
[
s
].
phdr
.
p_fûesz
) ;

1890 i‡(
r_off£t
 >
£g_°¨t_addr
 &&

1891 
r_off£t
 < 
£g_íd_addr
)

1893 i‡(
ª…y≥
 =
DT_REL
)

1894 
	`¥o˚ss_ªl_èbÀ
(
h™dÀ
, (
£g
 + 
s
),

1895 (
Elf32_Rñ
*Ë
∂t_ªloc_èbÀ
,

1896 
∂äum
, &
∂t_rid
,

1897 
dyn_moduÀ
);

1899 
	`¥o˚ss_ªœ_èbÀ
(
h™dÀ
, (
£g
 + 
s
),

1900 (
Elf32_Rña
*Ë
∂t_ªloc_èbÀ
,

1901 
∂äum
, &
∂t_rid
,

1902 
dyn_moduÀ
);

1907 
	}
}

1913 
	$DLREL_ªloˇã
(
DLOAD_HANDLE
 
h™dÀ
,

1914 
LOADER_FILE_DESC
* 
ñf_fûe
,

1915 
DLIMP_Dy«mic_ModuÀ
* 
dyn_moduÀ
)

1918 
Elf32_Dyn
* 
dyn_nuggë
 = 
dyn_moduÀ
->
dy¡ab
;

1919 
Elf32_Rña
* 
ªœ_èbÀ
 = 
NULL
;

1920 
Elf32_Rñ
* 
ªl_èbÀ
 = 
NULL
;

1921 * 
∂t_èbÀ
 = 
NULL
;

1927 
uöt32_t
 
ªœsz
 = 
	`DLIMP_gë_fú°_dy¡ag
(
DT_RELASZ
, 
dyn_nuggë
);

1928 
uöt32_t
 
ªœít
 = 
	`DLIMP_gë_fú°_dy¡ag
(
DT_RELAENT
, 
dyn_nuggë
);

1929 
uöt32_t
 
ªœnum
 = 0;

1935 
uöt32_t
 
ªlsz
 = 
	`DLIMP_gë_fú°_dy¡ag
(
DT_RELSZ
, 
dyn_nuggë
);

1936 
uöt32_t
 
ªÀ¡
 = 
	`DLIMP_gë_fú°_dy¡ag
(
DT_RELENT
, 
dyn_nuggë
);

1937 
uöt32_t
 
ª um
 = 0;

1943 
uöt32_t
 
∂åñsz
 = 
	`DLIMP_gë_fú°_dy¡ag
(
DT_PLTRELSZ
, 
dyn_nuggë
);

1944 
∂åñty≥
 = 
	`DLIMP_gë_fú°_dy¡ag
(
DT_PLTREL
, 
dyn_nuggë
);

1945 
uöt32_t
 
∂äum
 = 0;

1954 i‡(
∂åñsz
 !
INT_MAX
)

1956 i‡(
∂åñty≥
 =
DT_REL
)

1958 
∂äum
 = 
∂åñsz
/
ªÀ¡
;

1959 
ªlsz
 -
∂åñsz
;

1960 
	`ªad_ªl_èbÀ
(((
Elf32_Rñ
**Ë&
∂t_èbÀ
),

1961 
	`DLIMP_gë_fú°_dy¡ag
(
DT_JMPREL
, 
dyn_nuggë
),

1962 
∂äum
, 
ªÀ¡
, 
ñf_fûe
,

1963 
dyn_moduÀ
->
wr⁄g_ídün
);

1965 i‡(
∂åñty≥
 =
DT_RELA
)

1967 
∂äum
 = 
∂åñsz
/
ªœít
;

1968 
ªœsz
 -
∂åñsz
;

1969 
	`ªad_ªœ_èbÀ
(((
Elf32_Rña
**Ë&
∂t_èbÀ
),

1970 
	`DLIMP_gë_fú°_dy¡ag
(
DT_JMPREL
, 
dyn_nuggë
),

1971 
∂äum
, 
ªœít
, 
ñf_fûe
,

1972 
dyn_moduÀ
->
wr⁄g_ídün
);

1976 
	`DLIF_îr‹
(
DLET_RELOC
,

1978 
DT_REL
, 
DT_RELA
);

1985 i‡(
ªœsz
 !
INT_MAX
)

1987 
ªœnum
 = 
ªœsz
/
ªœít
;

1988 
	`ªad_ªœ_èbÀ
(&
ªœ_èbÀ
,

1989 
	`DLIMP_gë_fú°_dy¡ag
(
DT_RELA
, 
dyn_nuggë
),

1990 
ªœnum
, 
ªœít
, 
ñf_fûe
, 
dyn_moduÀ
->
wr⁄g_ídün
);

1996 i‡(
ªlsz
 !
INT_MAX
)

1998 
ª um
 = 
ªlsz
/
ªÀ¡
;

1999 
	`ªad_ªl_èbÀ
(&
ªl_èbÀ
, 
	`DLIMP_gë_fú°_dy¡ag
(
DT_REL
, 
dyn_nuggë
),

2000 
ª um
, 
ªÀ¡
, 
ñf_fûe
, 
dyn_moduÀ
->
wr⁄g_ídün
);

2006 i‡(
∂t_èbÀ
)

2007 
	`¥o˚ss_∂tgŸ_ªlocs
(
h™dÀ
, 
∂t_èbÀ
, 
∂åñty≥
, 
∂äum
, 
dyn_moduÀ
);

2012 i‡(
ªl_èbÀ
 || 
ªœ_èbÀ
)

2013 
	`¥o˚ss_gŸ_ªlocs
(
h™dÀ
, 
ªl_èbÀ
, 
ª um
, 
ªœ_èbÀ
, 
ªœnum
,

2014 
dyn_moduÀ
);

2019 i‡(
ªœ_èbÀ
Ë
	`DLIF_‰ì
(rela_table);

2020 i‡(
ªl_èbÀ
Ë
	`DLIF_‰ì
(rel_table);

2021 i‡(
∂t_èbÀ
Ë
	`DLIF_‰ì
(plt_table);

2022 
	}
}

2027 #i‡
UNIT_TEST


2028 
	$unô_¨m_ªloc_do
(
ARM_RELOC_TYPE
 
r_ty≥
,

2029 
uöt8_t
* 
addªss_•a˚
,

2030 
uöt32_t
 
addíd
, uöt32_à
symvÆ
, uöt32_à
pc
,

2031 
uöt32_t
 
°©ic_ba£
, 
wr⁄g_ídün
)

2033 
	`ªloc_do
(
r_ty≥
, 
addªss_•a˚
, 
addíd
, 
symvÆ
, 
pc
, 
°©ic_ba£
);

2034 
	}
}

2036 
	$unô_¨m_ªl_u≈ack_addíd
(
ARM_RELOC_TYPE
 
r_ty≥
,

2037 
uöt8_t
* 
addªss
,

2038 
uöt32_t
* 
addíd
)

2040 
	`ªl_u≈ack_addíd
(
r_ty≥
, 
addªss
, 
addíd
);

2041 
	}
}

2043 
BOOL
 
	$unô_¨m_ªl_ovîÊow
(
ARM_RELOC_TYPE
 
r_ty≥
, 
öt32_t
 
ªloc_vÆue
)

2045  
	`ªl_ovîÊow
(
r_ty≥
, 
ªloc_vÆue
);

2046 
	}
}

2048 
	$unô_¨m_ªl_mask_f‹_group
(
ARM_RELOC_TYPE
 
r_ty≥
, 
öt32_t
* 
ªloc_vÆ
)

2050 
	`ªl_mask_f‹_group
(
r_ty≥
, 
ªloc_vÆ
);

2051 
	}
}

	@utils/elfload/c60_dynamic.c

38 #ifde‡
C60_TARGET


39 
	~"c60_ñf32.h
"

40 #i‡
deföed
 (
__KERNEL__
)

41 
	~<löux/ty≥s.h
>

43 
	~<öây≥s.h
>

44 
	~<°dlib.h
>

46 
	~"dlﬂd_≠i.h
"

47 
	~"dlﬂd.h
"

54 
BOOL
 
	$DLDYN_c60_¥o˚ss_dy«mic_èg
(
DLIMP_Dy«mic_ModuÀ
* 
dyn_moduÀ
, 
i
)

56 
dyn_moduÀ
->
dy¡ab
[
i
].
d_èg
)

64 
DT_C6000_GSYM_OFFSET
:

65 
dyn_moduÀ
->
gsymèb_off£t
 = dyn_moduÀ->
dy¡ab
[
i
].
d_un
.
d_vÆ
;

66 #i‡
LOADER_DEBUG


67 i‡(
debuggög_⁄
)

68 
	`DLIF_åa˚
("Found global symbolÅable: %d\n",

69 
dyn_moduÀ
->
gsymèb_off£t
);

71  
TRUE
;

78 
DT_C6000_GSTR_OFFSET
:

79 
dyn_moduÀ
->
g°πab_off£t
 = dyn_moduÀ->
dy¡ab
[
i
].
d_un
.
d_vÆ
;

80 #i‡
LOADER_DEBUG


81 i‡(
debuggög_⁄
)

82 
	`DLIF_åa˚
("Found global stringÅable: %d\n",

83 
dyn_moduÀ
->
g°πab_off£t
);

85  
TRUE
;

95 
DT_C6000_DSBT_BASE
:

96 
dyn_moduÀ
->
dsbt_ba£_ègidx
 = 
i
;

97  
TRUE
;

108 
DT_C6000_DSBT_INDEX
:

109 
dyn_moduÀ
->
dsbt_ödex
 = dyn_moduÀ->
dy¡ab
[
i
].
d_un
.
d_vÆ
;

110  
TRUE
;

117 
DT_C6000_DSBT_SIZE
:

118 
dyn_moduÀ
->
dsbt_size
 = dyn_moduÀ->
dy¡ab
[
i
].
d_un
.
d_vÆ
;

119  
TRUE
;

123  
FALSE
;

124 
	}
}

136 
BOOL
 
	$DLDYN_c60_ªloˇã_dy«mic_èg_öfo
(
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
,

137 
öt32_t
 
i
)

139 
dyn_moduÀ
->
dy¡ab
[
i
].
d_èg
)

144 
DT_C6000_GSYM_OFFSET
:

145 
DT_C6000_GSTR_OFFSET
:

146 
DT_C6000_DSBT_INDEX
:

147 
DT_C6000_DSBT_SIZE
:

148  
TRUE
;

157 
DT_C6000_DSBT_BASE
:

158  
	`DLIMP_upd©e_dy¡ag_£˘i⁄_addªss
(
dyn_moduÀ
, 
i
);

161 
	`DLIF_îr‹
(
DLET_MISC
, "Invalid dynamicÅagÉncountered, %d\n",

162 ()
dyn_moduÀ
->
dy¡ab
[
i
].
d_èg
);

163  
FALSE
;

164 
	}
}

172 
BOOL
 
	$DLDYN_c60_¥o˚ss_eioßbi
(
DLIMP_Dy«mic_ModuÀ
* 
dyn_moduÀ
)

174 
uöt8_t
 
oßbi
 = 
dyn_moduÀ
->
fhdr
.
e_idít
[
EI_OSABI
];

176 i‡(
dyn_moduÀ
->
ªloˇèbÀ
)

181 i‡(
oßbi
 =
ELFOSABI_C6000_ELFABI
)

182  
TRUE
;

189 i‡(
oßbi
 =
ELFOSABI_C6000_LINUX
)

190  
TRUE
;

198 i‡(
oßbi
 =
ELFOSABI_NONE
)

199  
TRUE
;

202  
FALSE
;

203 
	}
}

	@utils/elfload/c60_reloc.c

38 #i‡
deföed
 (
__KERNEL__
)

39 
	~<löux/limôs.h
>

41 
	~<limôs.h
>

43 
	~<˘y≥.h
>

44 
	~<°d¨g.h
>

45 
	~<°dio.h
>

46 
	~<°dlib.h
>

47 
	~"ªloˇã.h
"

48 
	~"c60_ñf32.h
"

49 
	~"dlﬂd_≠i.h
"

50 
	~"utû.h
"

51 
	~"dlﬂd_ídün.h
"

52 
	~"symèb.h
"

54 
	#MASK
(
n
,
s
Ë(((1 <<ÇË- 1Ë<< s)

	)

97 
	$wrôe_ªloc_r
(
uöt8_t
* 
buf„ªd_£gmít
,

98 
uöt32_t
 
£gmít_off£t
,

99 
r_ty≥
, 
uöt32_t
 
r
)

101 
uöt32_t
* 
ªl_fõld_±r
 = (uöt32_t*)(
buf„ªd_£gmít
 + 
£gmít_off£t
);

103 #i‡
LOADER_DEBUG


107 if(
debuggög_⁄
)

109 
	`DLIF_åa˚
("RWRT: segmít_off£t: %d\n", 
£gmít_off£t
);

110 
	`DLIF_åa˚
("RWRT: buf„ªd_£gmít: 0x%x\n", 
buf„ªd_£gmít
);

111 
	`DLIF_åa˚
("RWRT:Ññ_fõld_±r: 0x%x\n", 
ªl_fõld_±r
);

112 
	`DLIF_åa˚
("RWRT:Ñesu…: 0x%x\n", 
r
);

121 
r_ty≥
)

123 
R_C6000_ABS32
:

124 *
ªl_fõld_±r
 = 
r
;

126 
R_C6000_PREL31
:

127 *
ªl_fõld_±r
 = (*ªl_fõld_±∏& ~
	`MASK
(30,0)Ë| 
r
;

129 
R_C6000_ABS16
:

130 *((
uöt16_t
*)(
buf„ªd_£gmít
 + 
£gmít_off£t
)Ë
r
;

132 
R_C6000_ABS8
:

133 *((
uöt8_t
*)(
buf„ªd_£gmít
 + 
£gmít_off£t
)Ë
r
;

135 
R_C6000_PCR_S21
:

136 *
ªl_fõld_±r
 = (*ªl_fõld_±∏& ~
	`MASK
(21,7)Ë| (
r
 << 7);

138 
R_C6000_PCR_S12
:

139 *
ªl_fõld_±r
 = (*ªl_fõld_±∏& ~
	`MASK
(12,16)Ë| (
r
 << 16);

141 
R_C6000_PCR_S10
:

142 *
ªl_fõld_±r
 = (*ªl_fõld_±∏& ~
	`MASK
(10,13)Ë| (
r
 << 13);

144 
R_C6000_PCR_S7
:

145 *
ªl_fõld_±r
 = (*ªl_fõld_±∏& ~
	`MASK
(7,16)Ë| (
r
 << 16);

148 
R_C6000_ABS_S16
:

149 *
ªl_fõld_±r
 = (*ªl_fõld_±∏& ~
	`MASK
(16,7)Ë| (
r
 << 7);

151 
R_C6000_ABS_L16
:

152 *
ªl_fõld_±r
 = (*ªl_fõld_±∏& ~
	`MASK
(16,7)Ë| (
r
 << 7);

154 
R_C6000_ABS_H16
:

155 *
ªl_fõld_±r
 = (*ªl_fõld_±∏& ~
	`MASK
(16,7)Ë| (
r
 << 7);

158 
R_C6000_SBR_U15_B
:

159 *
ªl_fõld_±r
 = (*ªl_fõld_±∏& ~
	`MASK
(15,8)Ë| (
r
 << 8);

161 
R_C6000_SBR_U15_H
:

162 *
ªl_fõld_±r
 = (*ªl_fõld_±∏& ~
	`MASK
(15,8)Ë| (
r
 << 8);

164 
R_C6000_SBR_U15_W
:

165 
R_C6000_DSBT_INDEX
:

166 *
ªl_fõld_±r
 = (*ªl_fõld_±∏& ~
	`MASK
(15,8)Ë| (
r
 << 8);

169 
R_C6000_SBR_S16
:

170 
R_C6000_SBR_L16_B
:

171 
R_C6000_SBR_L16_H
:

172 
R_C6000_SBR_L16_W
:

173 
R_C6000_SBR_H16_B
:

174 
R_C6000_SBR_H16_H
:

175 
R_C6000_SBR_H16_W
:

176 *
ªl_fõld_±r
 = (*ªl_fõld_±∏& ~
	`MASK
(16,7)Ë| (
r
 << 7);

182 
R_C6000_COPY
:

185 
	`DLIF_îr‹
(
DLET_RELOC
,

189 #i‡
LOADER_DEBUG


190 i‡(
debuggög_⁄
)

191 
	`DLIF_åa˚
("ªloc_fõld 0x%x\n", *
ªl_fõld_±r
);

193 
	}
}

199 
öt32_t
 
	$∑ck_ªsu…
(
öt32_t
 
u≈acked_ªsu…
, 
r_ty≥
)

201 
r_ty≥
)

203 
R_C6000_ABS32
:

204 
R_C6000_ABS16
:

205 
R_C6000_ABS8
:

206 
R_C6000_ABS_S16
:

207 
R_C6000_ABS_L16
:

208 
R_C6000_SBR_U15_B
:

209 
R_C6000_SBR_S16
:

210 
R_C6000_SBR_L16_B
:

211  
u≈acked_ªsu…
;

213 
R_C6000_SBR_U15_H
:

214 
R_C6000_SBR_L16_H
:

215 
R_C6000_PREL31
:

216  
u≈acked_ªsu…
 >> 1;

218 
R_C6000_PCR_S21
:

219 
R_C6000_PCR_S12
:

220 
R_C6000_PCR_S10
:

221 
R_C6000_PCR_S7
:

222 
R_C6000_SBR_U15_W
:

223 
R_C6000_SBR_L16_W
:

224 
R_C6000_DSBT_INDEX
:

225  
u≈acked_ªsu…
 >> 2;

227 
R_C6000_ABS_H16
:

228 
R_C6000_SBR_H16_B
:

229  
u≈acked_ªsu…
 >> 16;

231 
R_C6000_SBR_H16_H
:

232  
u≈acked_ªsu…
 >> 17;

234 
R_C6000_SBR_H16_W
:

235  
u≈acked_ªsu…
 >> 18;

240 
R_C6000_COPY
:

243 
	`DLIF_îr‹
(
DLET_RELOC
,

247 
	}
}

253 
öt32_t
 
	$mask_ªsu…
(
öt32_t
 
unmasked_ªsu…
, 
r_ty≥
)

255 
r_ty≥
)

257 
R_C6000_ABS8
:

258  
unmasked_ªsu…
 & 0xFF;

260 
R_C6000_ABS32
:

261  
unmasked_ªsu…
;

263 
R_C6000_ABS16
:

264 
R_C6000_ABS_S16
:

265 
R_C6000_ABS_L16
:

266 
R_C6000_ABS_H16
:

267 
R_C6000_SBR_S16
:

268 
R_C6000_SBR_L16_B
:

269 
R_C6000_SBR_L16_H
:

270 
R_C6000_SBR_L16_W
:

271 
R_C6000_SBR_H16_B
:

272 
R_C6000_SBR_H16_H
:

273 
R_C6000_SBR_H16_W
:

274  
unmasked_ªsu…
 & 0xFFFF;

276 
R_C6000_PCR_S21
:

277  
unmasked_ªsu…
 & 0x1FFFFF;

279 
R_C6000_PCR_S12
:

280  
unmasked_ªsu…
 & 0xFFF;

282 
R_C6000_PCR_S10
:

283  
unmasked_ªsu…
 & 0x3FF;

285 
R_C6000_PCR_S7
:

286  
unmasked_ªsu…
 & 0x7F;

288 
R_C6000_SBR_U15_B
:

289 
R_C6000_SBR_U15_H
:

290 
R_C6000_SBR_U15_W
:

291 
R_C6000_DSBT_INDEX
:

292  
unmasked_ªsu…
 & 0x7FFF;

294 
R_C6000_PREL31
:

295  
unmasked_ªsu…
 & 0x7FFFFFFF;

300 
R_C6000_COPY
:

303 
	`DLIF_îr‹
(
DLET_RELOC
,

307 
	}
}

316 
BOOL
 
	$ªl_ovîÊow
(
C60_RELOC_TYPE
 
r_ty≥
, 
öt32_t
 
ªloc_vÆue
)

321 
r_ty≥
)

323 
R_C6000_ABS16
:  ((
ªloc_vÆue
 > 65535) ||

324 (
ªloc_vÆue
 < -32768));

325 
R_C6000_ABS8
:  ((
ªloc_vÆue
 > 255) ||

326 (
ªloc_vÆue
 < -128));

327 
R_C6000_PCR_S21
:  ((
ªloc_vÆue
 >= 0x400000) ||

328 (
ªloc_vÆue
 < -0x400000));

329 
R_C6000_PCR_S12
:  ((
ªloc_vÆue
 >= 0x2000) ||

330 (
ªloc_vÆue
 < -0x2000));

331 
R_C6000_PCR_S10
:  ((
ªloc_vÆue
 >= 0x800) ||

332 (
ªloc_vÆue
 < -0x800));

333 
R_C6000_PCR_S7
:  ((
ªloc_vÆue
 >= 0x100) ||

334 (
ªloc_vÆue
 < -0x100));

335 
R_C6000_SBR_S16
:

336 
R_C6000_ABS_S16
:  ((
ªloc_vÆue
 >= 0x8000) ||

337 (
ªloc_vÆue
 < -0x8000));

338 
R_C6000_SBR_U15_B
:  (((
uöt32_t
)
ªloc_vÆue
) >= 0x8000);

339 
R_C6000_SBR_U15_H
:  (((
uöt32_t
)
ªloc_vÆue
) >= 0xFFFF);

340 
R_C6000_DSBT_INDEX
:

341 
R_C6000_SBR_U15_W
:  (((
uöt32_t
)
ªloc_vÆue
) >= 0x1FFFD);

347 
R_C6000_ABS_L16
:

348 
R_C6000_ABS_H16
:

349 
R_C6000_SBR_L16_B
:

350 
R_C6000_SBR_L16_H
:

351 
R_C6000_SBR_L16_W
:

352 
R_C6000_SBR_H16_B
:

353 
R_C6000_SBR_H16_H
:

354 
R_C6000_SBR_H16_W
:

360 
R_C6000_ABS32
:

361 
R_C6000_PREL31
:

369 
	`DLIF_îr‹
(
DLET_RELOC
,

373 
	}
}

378 
	$ªloc_do
(
C60_RELOC_TYPE
 
r_ty≥
,

379 
uöt8_t
 *
£gmít_addªss
,

380 
uöt32_t
 
addíd
,

381 
uöt32_t
 
symvÆ
,

382 
uöt32_t
 
•c
,

383 
wr⁄g_ídün
,

384 
uöt32_t
 
ba£_poöãr
,

385 
öt32_t
 
dsbt_ödex
)

387 
öt32_t
 
ªloc_vÆue
 = 0;

389 #i‡
LOADER_DEBUG
 && 
LOADER_PROFILE


394 
°¨t_time
;

395 i‡(
debuggög_⁄
 || 
¥ofûög_⁄
)

397 
DLREL_ªloˇti⁄s
++;

398 i‡(
¥ofûög_⁄
Ë
°¨t_time
 = 
	`˛ock
();

406 
r_ty≥
)

411 
R_C6000_ABS32
:

412 
R_C6000_ABS16
:

413 
R_C6000_ABS8
:

414 
R_C6000_ABS_S16
:

415 
R_C6000_ABS_L16
:

416 
R_C6000_ABS_H16
:

417 
ªloc_vÆue
 = 
symvÆ
 + 
addíd
;

423 
R_C6000_PCR_S21
:

424 
R_C6000_PCR_S12
:

425 
R_C6000_PCR_S10
:

426 
R_C6000_PCR_S7
:

432 
öt32_t
 
›nd_p
 = (
•c
 + (öt32_t)
£gmít_addªss
) & 0xffffffe0;

433 
ªloc_vÆue
 = 
symvÆ
 + 
addíd
 - 
›nd_p
;

444 
R_C6000_PREL31
:

460 
öt32_t
 
›nd_p
 = (
•c
 + (öt32_t)
£gmít_addªss
);

461 
ªloc_vÆue
 = 
symvÆ
 + 
addíd
 - 
›nd_p
;

468 
R_C6000_SBR_U15_B
:

469 
R_C6000_SBR_U15_H
:

470 
R_C6000_SBR_U15_W
:

471 
R_C6000_SBR_S16
:

472 
R_C6000_SBR_L16_B
:

473 
R_C6000_SBR_L16_H
:

474 
R_C6000_SBR_L16_W
:

475 
R_C6000_SBR_H16_B
:

476 
R_C6000_SBR_H16_H
:

477 
R_C6000_SBR_H16_W
:

478 
ªloc_vÆue
 = 
symvÆ
 + 
addíd
 - 
ba£_poöãr
;

489 
R_C6000_DSBT_INDEX
:

490 
ªloc_vÆue
 = ((
symvÆ
 + 
addíd
Ë- 
ba£_poöãr
Ë+ (
dsbt_ödex
 << 2);

499 
R_C6000_COPY
:

505 
	`DLIF_îr‹
(
DLET_RELOC
,

514 i‡(
	`ªl_ovîÊow
(
r_ty≥
, 
ªloc_vÆue
))

515 
	`DLIF_îr‹
(
DLET_RELOC
, "relocation overflow!\n");

521 
ªloc_vÆue
 = 
	`∑ck_ªsu…
‘ñoc_vÆue, 
r_ty≥
);

526 
ªloc_vÆue
 = 
	`mask_ªsu…
‘ñoc_vÆue, 
r_ty≥
);

531 i‡(
wr⁄g_ídün
)

532 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(
£gmít_addªss
 + 
•c
));

537 
	`wrôe_ªloc_r
(
£gmít_addªss
, 
•c
, 
r_ty≥
, 
ªloc_vÆue
);

542 i‡(
wr⁄g_ídün
)

543 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(
£gmít_addªss
 + 
•c
));

545 #i‡
LOADER_DEBUG
 && 
LOADER_PROFILE


550 i‡(
¥ofûög_⁄
)

551 
DLREL_tŸÆ_ªloc_time
 +(
	`˛ock
(Ë- 
°¨t_time
);

552 i‡(
debuggög_⁄
)

553 
	`DLIF_åa˚
("ªloc_vÆuê0x%x\n", 
ªloc_vÆue
);

556 
	}
}

564 
	$ªl_u≈ack_addíd
(
C60_RELOC_TYPE
 
r_ty≥
,

565 
uöt8_t
 *
addªss
,

566 
uöt32_t
 *
addíd
)

574 *
addíd
 = 0;

576 
	`DLIF_îr‹
(
DLET_RELOC
,

580 #i‡!
	`deföed
 (
__KERNEL__
)

581 
	`exô
(1);

583 
	}
}

591 
BOOL
 
	$ªl_sw≠_ídün
(
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
,

592 
C60_RELOC_TYPE
 
r_ty≥
)

594 i‡(
dyn_moduÀ
->
wr⁄g_ídün
Ë 
TRUE
;

596  
FALSE
;

597 
	}
}

606 
	$ªl_ch™ge_ídün
(
C60_RELOC_TYPE
 
r_ty≥
, 
uöt8_t
 *
addªss
)

611 
	`DLIMP_ch™ge_ídün32
((
öt32_t
 *)
addªss
);

612 
	}
}

621 
	$ªad_ªl_èbÀ
(
Elf32_Rñ
 **
ªl_èbÀ
,

622 
öt32_t
 
èbÀ_off£t
,

623 
uöt32_t
 
ª um
, uöt32_à
ªÀ¡
,

624 
LOADER_FILE_DESC
 *
fd
, 
BOOL
 
wr⁄g_ídün
)

626 *
ªl_èbÀ
 = (
Elf32_Rñ
 *)
	`DLIF_mÆloc
(
ª um
 * 
ªÀ¡
);

627 i‡(
NULL
 =*
ªl_èbÀ
) {

628 
	`DLIF_îr‹
(
DLET_MEMORY
, "FailedÅo AllocateÑead_rel_table\n");

631 
	`DLIF_f£ek
(
fd
, 
èbÀ_off£t
, 
LOADER_SEEK_SET
);

632 
	`DLIF_‰ód
(*
ªl_èbÀ
, 
ª um
, 
ªÀ¡
, 
fd
);

634 i‡(
wr⁄g_ídün
)

636 
i
;

637 
i
 = 0; i < 
ª um
; i++)

638 
	`DLIMP_ch™ge_ªl_ídün
(*
ªl_èbÀ
 + 
i
);

640 
	}
}

648 
	$¥o˚ss_ªl_èbÀ
(
DLOAD_HANDLE
 
h™dÀ
, 
DLIMP_Lﬂded_Segmít
* 
£g
,

649 
Elf32_Rñ
 *
ªl_èbÀ
,

650 
uöt32_t
 
ª um
,

651 
öt32_t
 *
°¨t_ªlidx
,

652 
uöt32_t
 
ti_°©ic_ba£
,

653 
DLIMP_Dy«mic_ModuÀ
* 
dyn_moduÀ
)

655 
Elf32_Addr
 
£g_°¨t_addr
 = 
£g
->
öput_vaddr
;

656 
Elf32_Addr
 
£g_íd_addr
 = 
£g_°¨t_addr
 + 
£g
->
phdr
.
p_memsz
;

657 
BOOL
 
found
 = 
FALSE
;

658 
öt32_t
 
ªlidx
 = *
°¨t_ªlidx
;

664 i‡(
ªlidx
 >
ª um
)Ñelidx = 0;

669  ; 
ªlidx
 < 
ª um
;Ñelidx++)

674 i‡(
ªl_èbÀ
[
ªlidx
].
r_off£t
 >
£g_°¨t_addr
 &&

675 
ªl_èbÀ
[
ªlidx
].
r_off£t
 < 
£g_íd_addr
)

677 
Elf32_Addr
 
r_symvÆ
 = 0;

678 
C60_RELOC_TYPE
 
r_ty≥
 =

679 (
C60_RELOC_TYPE
)
	`ELF32_R_TYPE
(
ªl_èbÀ
[
ªlidx
].
r_öfo
);

680 
öt32_t
 
r_symid
 = 
	`ELF32_R_SYM
(
ªl_èbÀ
[
ªlidx
].
r_öfo
);

682 
uöt8_t
 *
ªloc_addªss
 = 
NULL
;

683 
uöt32_t
 
pc
 = 0;

684 
uöt32_t
 
addíd
 = 0;

686 
BOOL
 
ch™ge_ídün
 = 
FALSE
;

688 
found
 = 
TRUE
;

694 i‡(!
	`DLSYM_ˇn⁄iˇl_lookup
(
h™dÀ
, 
r_symid
, 
dyn_moduÀ
, &
r_symvÆ
))

702 
ªloc_addªss
 =

703 (((
uöt8_t
 *)(
£g
->
phdr
.
p_vaddr
Ë+ seg->
ªloc_off£t
) +

704 
ªl_èbÀ
[
ªlidx
].
r_off£t
 - 
£g
->
öput_vaddr
);

705 
pc
 = (
uöt32_t
)
ªloc_addªss
;

707 
ch™ge_ídün
 = 
	`ªl_sw≠_ídün
(
dyn_moduÀ
, 
r_ty≥
);

708 i‡(
ch™ge_ídün
)

709 
	`ªl_ch™ge_ídün
(
r_ty≥
, 
ªloc_addªss
);

711 
	`ªl_u≈ack_addíd
(

712 (
C60_RELOC_TYPE
)
	`ELF32_R_TYPE
(
ªl_èbÀ
[
ªlidx
].
r_öfo
),

713 
ªloc_addªss
, &
addíd
);

719 
	`ªloc_do
(
r_ty≥
,

720 
ªloc_addªss
,

721 
addíd
,

722 
r_symvÆ
,

723 
pc
,

724 
dyn_moduÀ
->
wr⁄g_ídün
,

725 
ti_°©ic_ba£
,

726 
dyn_moduÀ
->
dsbt_ödex
);

730 i‡(
found
)

733 
	}
}

742 
	$ªad_ªœ_èbÀ
(
Elf32_Rña
 **
ªœ_èbÀ
,

743 
öt32_t
 
èbÀ_off£t
,

744 
uöt32_t
 
ªœnum
, uöt32_à
ªœít
,

745 
LOADER_FILE_DESC
 *
fd
, 
BOOL
 
wr⁄g_ídün
)

747 *
ªœ_èbÀ
 = (
Elf32_Rña
 *)
	`DLIF_mÆloc
(
ªœnum
 * 
ªœít
);

748 i‡(
NULL
 =*
ªœ_èbÀ
) {

749 
	`DLIF_îr‹
(
DLET_MEMORY
, "FailedÅo AllocateÑead_rela_table\n");

752 
	`DLIF_f£ek
(
fd
, 
èbÀ_off£t
, 
LOADER_SEEK_SET
);

753 
	`DLIF_‰ód
(*
ªœ_èbÀ
, 
ªœnum
, 
ªœít
, 
fd
);

755 i‡(
wr⁄g_ídün
)

757 
i
;

758 
i
 = 0; i < 
ªœnum
; i++)

759 
	`DLIMP_ch™ge_ªœ_ídün
(*
ªœ_èbÀ
 + 
i
);

761 
	}
}

769 
	$¥o˚ss_ªœ_èbÀ
(
DLOAD_HANDLE
 
h™dÀ
, 
DLIMP_Lﬂded_Segmít
 *
£g
,

770 
Elf32_Rña
 *
ªœ_èbÀ
,

771 
uöt32_t
 
ªœnum
,

772 
öt32_t
 *
°¨t_ªlidx
,

773 
uöt32_t
 
ti_°©ic_ba£
,

774 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
)

776 
Elf32_Addr
 
£g_°¨t_addr
 = 
£g
->
öput_vaddr
;

777 
Elf32_Addr
 
£g_íd_addr
 = 
£g_°¨t_addr
 + 
£g
->
phdr
.
p_memsz
;

778 
BOOL
 
found
 = 
FALSE
;

779 
öt32_t
 
ªlidx
 = *
°¨t_ªlidx
;

785 i‡(
ªlidx
 > 
ªœnum
)Ñelidx = 0;

790  ; 
ªlidx
 < 
ªœnum
;Ñelidx++)

795 i‡(
ªœ_èbÀ
[
ªlidx
].
r_off£t
 >
£g_°¨t_addr
 &&

796 
ªœ_èbÀ
[
ªlidx
].
r_off£t
 < 
£g_íd_addr
)

798 
Elf32_Addr
 
r_symvÆ
;

799 
C60_RELOC_TYPE
 
r_ty≥
 =

800 (
C60_RELOC_TYPE
)
	`ELF32_R_TYPE
(
ªœ_èbÀ
[
ªlidx
].
r_öfo
);

801 
öt32_t
 
r_symid
 = 
	`ELF32_R_SYM
(
ªœ_èbÀ
[
ªlidx
].
r_öfo
);

803 
found
 = 
TRUE
;

809 i‡(!
	`DLSYM_ˇn⁄iˇl_lookup
(
h™dÀ
, 
r_symid
, 
dyn_moduÀ
, &
r_symvÆ
))

816 
	`ªloc_do
(
r_ty≥
,

817 (
uöt8_t
*)(
£g
->
phdr
.
p_vaddr
Ë+ seg->
ªloc_off£t
,

818 
ªœ_èbÀ
[
ªlidx
].
r_addíd
,

819 
r_symvÆ
,

820 
ªœ_èbÀ
[
ªlidx
].
r_off£t
 - 
£g
->
öput_vaddr
,

821 
dyn_moduÀ
->
wr⁄g_ídün
,

822 
ti_°©ic_ba£
,

823 
dyn_moduÀ
->
dsbt_ödex
);

826 i‡(
found
)

829 
	}
}

839 
	$¥o˚ss_gŸ_ªlocs
(
DLOAD_HANDLE
 
h™dÀ
,

840 
Elf32_Rñ
* 
ªl_èbÀ
, 
uöt32_t
 
ª um
,

841 
Elf32_Rña
* 
ªœ_èbÀ
, 
uöt32_t
 
ªœnum
,

842 
DLIMP_Dy«mic_ModuÀ
* 
dyn_moduÀ
)

844 
DLIMP_Lﬂded_Segmít
 *
£g
 =

845 (
DLIMP_Lﬂded_Segmít
*)(
dyn_moduÀ
->
lﬂded_moduÀ
->
lﬂded_£gmíts
.
buf
);

846 
uöt32_t
 
num_£gs
 = 
dyn_moduÀ
->
lﬂded_moduÀ
->
lﬂded_£gmíts
.
size
;

847 
öt32_t
 
ªl_ªlidx
 = 0;

848 
öt32_t
 
ªœ_ªlidx
 = 0;

849 
uöt32_t
 
£g_idx
 = 0;

850 
uöt32_t
 
ti_°©ic_ba£
 = 0;

856 i‡(!
	`DLSYM_lookup_loˇl_symèb
("__TI_STATIC_BASE", 
dyn_moduÀ
->
symèb
,

857 
dyn_moduÀ
->
symnum
, &
ti_°©ic_ba£
))

858 
	`DLIF_îr‹
(
DLET_RELOC
, "CouldÇotÑesolve value of __TI_STATIC_BASE\n");

863 
£g_idx
 = 0; seg_idx < 
num_£gs
; seg_idx++)

868 i‡(!
£g
[
£g_idx
].
phdr
.
p_fûesz
) ;

870 i‡(
ªœ_èbÀ
)

871 
	`¥o˚ss_ªœ_èbÀ
(
h™dÀ
, (
£g
 + 
£g_idx
),

872 
ªœ_èbÀ
, 
ªœnum
, &
ªœ_ªlidx
,

873 
ti_°©ic_ba£
, 
dyn_moduÀ
);

875 i‡(
ªl_èbÀ
)

876 
	`¥o˚ss_ªl_èbÀ
(
h™dÀ
, (
£g
 + 
£g_idx
),

877 
ªl_èbÀ
, 
ª um
, &
ªl_ªlidx
,

878 
ti_°©ic_ba£
, 
dyn_moduÀ
);

880 
	}
}

890 
	$¥o˚ss_∂tgŸ_ªlocs
(
DLOAD_HANDLE
 
h™dÀ
, * 
∂t_ªloc_èbÀ
,

891 
ª…y≥
,

892 
uöt32_t
 
∂äum
,

893 
DLIMP_Dy«mic_ModuÀ
* 
dyn_moduÀ
)

895 
Elf32_Addr
 
r_off£t
 = (
ª…y≥
 =
DT_REL
) ?

896 ((
Elf32_Rñ
 *)
∂t_ªloc_èbÀ
)->
r_off£t
 :

897 ((
Elf32_Rña
 *)
∂t_ªloc_èbÀ
)->
r_off£t
;

899 
DLIMP_Lﬂded_Segmít
* 
£g
 =

900 (
DLIMP_Lﬂded_Segmít
*)(
dyn_moduÀ
->
lﬂded_moduÀ
->
lﬂded_£gmíts
.
buf
);

902 
uöt32_t
 
num_£gs
 = 
dyn_moduÀ
->
lﬂded_moduÀ
->
lﬂded_£gmíts
.
size
;

903 
öt32_t
 
∂t_ªlidx
 = 0;

904 
uöt32_t
 
£g_idx
 = 0;

905 
uöt32_t
 
ti_°©ic_ba£
 = 0;

911 i‡(!
	`DLSYM_lookup_loˇl_symèb
("__TI_STATIC_BASE", 
dyn_moduÀ
->
symèb
,

912 
dyn_moduÀ
->
symnum
, &
ti_°©ic_ba£
))

913 
	`DLIF_îr‹
(
DLET_RELOC
, "CouldÇotÑesolve value of __TI_STATIC_BASE\n");

920 
£g_idx
 = 0; seg_idx < 
num_£gs
; seg_idx++)

922 
Elf32_Addr
 
£g_°¨t_addr
 = 
£g
[
£g_idx
].
öput_vaddr
;

923 
Elf32_Addr
 
£g_íd_addr
 = 
£g_°¨t_addr
 + 
£g
[
£g_idx
].
phdr
.
p_memsz
;

928 if(!
£g
[
£g_idx
].
phdr
.
p_fûesz
) ;

930 i‡(
r_off£t
 >
£g_°¨t_addr
 &&

931 
r_off£t
 < 
£g_íd_addr
)

933 i‡(
ª…y≥
 =
DT_REL
)

934 
	`¥o˚ss_ªl_èbÀ
(
h™dÀ
, (
£g
 + 
£g_idx
),

935 (
Elf32_Rñ
 *)
∂t_ªloc_èbÀ
,

936 
∂äum
, &
∂t_ªlidx
,

937 
ti_°©ic_ba£
, 
dyn_moduÀ
);

939 
	`¥o˚ss_ªœ_èbÀ
(
h™dÀ
, (
£g
 + 
£g_idx
),

940 (
Elf32_Rña
 *)
∂t_ªloc_èbÀ
,

941 
∂äum
, &
∂t_ªlidx
,

942 
ti_°©ic_ba£
, 
dyn_moduÀ
);

947 
	}
}

953 
	$DLREL_ªloˇã_c60
(
DLOAD_HANDLE
 
h™dÀ
, 
LOADER_FILE_DESC
 *
fd
,

954 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
)

956 
Elf32_Dyn
 *
dyn_nuggë
 = 
dyn_moduÀ
->
dy¡ab
;

957 
Elf32_Rña
 *
ªœ_èbÀ
 = 
NULL
;

958 
Elf32_Rñ
 *
ªl_èbÀ
 = 
NULL
;

959 *
∂t_èbÀ
 = 
NULL
;

965 
uöt32_t
 
ªœsz
 = 
	`DLIMP_gë_fú°_dy¡ag
(
DT_RELASZ
, 
dyn_nuggë
);

966 
uöt32_t
 
ªœít
 = 
	`DLIMP_gë_fú°_dy¡ag
(
DT_RELAENT
, 
dyn_nuggë
);

967 
uöt32_t
 
ªœnum
 = 0;

973 
uöt32_t
 
ªlsz
 = 
	`DLIMP_gë_fú°_dy¡ag
(
DT_RELSZ
, 
dyn_nuggë
);

974 
uöt32_t
 
ªÀ¡
 = 
	`DLIMP_gë_fú°_dy¡ag
(
DT_RELENT
, 
dyn_nuggë
);

975 
uöt32_t
 
ª um
 = 0;

981 
uöt32_t
 
∂åñsz
 = 
	`DLIMP_gë_fú°_dy¡ag
(
DT_PLTRELSZ
, 
dyn_nuggë
);

982 
∂åñtyp
 = 
	`DLIMP_gë_fú°_dy¡ag
(
DT_PLTREL
, 
dyn_nuggë
);

983 
uöt32_t
 
∂äum
 = 0;

988 i‡(
	`is_dsbt_moduÀ
(
dyn_moduÀ
) &&

989 (
dyn_moduÀ
->
dsbt_ödex
 =
DSBT_INDEX_INVALID
))

990 
dyn_moduÀ
->
dsbt_ödex
 =

991 
	`DLIF_gë_dsbt_ödex
(
dyn_moduÀ
->
lﬂded_moduÀ
->
fûe_h™dÀ
);

1000 i‡(
∂åñsz
 !
INT_MAX
)

1002 i‡(
∂åñtyp
 =
DT_REL
)

1004 
∂äum
 = 
∂åñsz
/
ªÀ¡
;

1005 
ªlsz
 -
∂åñsz
;

1006 
	`ªad_ªl_èbÀ
(((
Elf32_Rñ
**Ë&
∂t_èbÀ
),

1007 
	`DLIMP_gë_fú°_dy¡ag
(
DT_JMPREL
, 
dyn_nuggë
),

1008 
∂äum
, 
ªÀ¡
, 
fd
, 
dyn_moduÀ
->
wr⁄g_ídün
);

1011 i‡(
∂åñtyp
 =
DT_RELA
)

1013 
∂äum
 = 
∂åñsz
/
ªœít
;

1014 
ªœsz
 -
∂åñsz
;

1015 
	`ªad_ªœ_èbÀ
(((
Elf32_Rña
**Ë&
∂t_èbÀ
),

1016 
	`DLIMP_gë_fú°_dy¡ag
(
DT_JMPREL
, 
dyn_nuggë
),

1017 
∂äum
, 
ªœít
, 
fd
, 
dyn_moduÀ
->
wr⁄g_ídün
);

1022 
	`DLIF_îr‹
(
DLET_RELOC
,

1024 
DT_REL
, 
DT_RELA
);

1031 i‡(
ªœsz
 !
INT_MAX
)

1033 
ªœnum
 = 
ªœsz
/
ªœít
;

1034 
	`ªad_ªœ_èbÀ
(&
ªœ_èbÀ
, 
	`DLIMP_gë_fú°_dy¡ag
(
DT_RELA
, 
dyn_nuggë
),

1035 
ªœnum
, 
ªœít
, 
fd
, 
dyn_moduÀ
->
wr⁄g_ídün
);

1041 i‡(
ªlsz
 !
INT_MAX
)

1043 
ª um
 = 
ªlsz
/
ªÀ¡
;

1044 
	`ªad_ªl_èbÀ
(&
ªl_èbÀ
, 
	`DLIMP_gë_fú°_dy¡ag
(
DT_REL
, 
dyn_nuggë
),

1045 
ª um
, 
ªÀ¡
, 
fd
, 
dyn_moduÀ
->
wr⁄g_ídün
);

1051 i‡(
∂t_èbÀ
)

1052 
	`¥o˚ss_∂tgŸ_ªlocs
(
h™dÀ
, 
∂t_èbÀ
, 
∂åñtyp
, 
∂äum
, 
dyn_moduÀ
);

1057 i‡(
ªl_èbÀ
 || 
ªœ_èbÀ
)

1058 
	`¥o˚ss_gŸ_ªlocs
(
h™dÀ
, 
ªl_èbÀ
, 
ª um
, 
ªœ_èbÀ
, 
ªœnum
, 
dyn_moduÀ
);

1063 i‡(
ªœ_èbÀ
Ë
	`DLIF_‰ì
(rela_table);

1064 i‡(
ªl_èbÀ
Ë
	`DLIF_‰ì
(rel_table);

1065 i‡(
∂t_èbÀ
Ë
	`DLIF_‰ì
(plt_table);

1066 
	}
}

1071 #ifde‡
UNIT_TEST


1072 
	$unô_c60_ªloc_do
(
C60_RELOC_TYPE
 
r_ty≥
,

1073 
uöt8_t
 *
addªss_•a˚
,

1074 
uöt32_t
 
addíd
, uöt32_à
symvÆ
, uöt32_à
pc
,

1075 
uöt32_t
 
°©ic_ba£
, 
wr⁄g_ídün
,

1076 
öt32_t
 
dsbt_ödex
)

1078 
	`ªloc_do
(
r_ty≥
, 
addªss_•a˚
, 
addíd
, 
symvÆ
, 
pc
, 
FALSE
, 
°©ic_ba£
, 
dsbt_ödex
);

1079 
	}
}

1082 
	$unô_c60_ªl_u≈ack_addíd
(
C60_RELOC_TYPE
 
r_ty≥
,

1083 
uöt8_t
* 
addªss
,

1084 
uöt32_t
* 
addíd
)

1086 
	`ªl_u≈ack_addíd
(
r_ty≥
, 
addªss
, 
addíd
);

1087 
	}
}

1090 
BOOL
 
	$unô_c60_ªl_ovîÊow
(
C60_RELOC_TYPE
 
r_ty≥
, 
öt32_t
 
ªloc_vÆue
)

1092  
	`ªl_ovîÊow
(
r_ty≥
, 
ªloc_vÆue
);

1093 
	}
}

	@utils/elfload/dload.c

44 
	~<limôs.h
>

45 
	~<öây≥s.h
>

46 
	~<°dio.h
>

47 
	~<°dlib.h
>

48 
	~<°rög.h
>

49 
	~<time.h
>

51 
	~"AºayLi°.h
"

52 
	~"Queue.h
"

54 
	~"symèb.h
"

55 
	~"dlﬂd_ídün.h
"

56 
	~"ñf32.h
"

57 
	~"dlﬂd.h
"

58 
	~"ªloˇã.h
"

59 
	~"dlﬂd_≠i.h
"

61 #ifde‡
ARM_TARGET


62 
	~"¨m_dy«mic.h
"

65 #ifde‡
C60_TARGET


66 
	~"c60_dy«mic.h
"

73 
	$TYPE_QUEUE_IMPLEMENTATION
(
DLIMP_Lﬂded_ModuÀ
*, 
lﬂded_moduÀ_±r
)

78 #i‡
LOADER_DEBUG


79 
Boﬁ
 
debuggög_⁄
 = 1;

86 #i‡
LOADER_DEBUG
 || 
LOADER_PROFILE


87 
Boﬁ
 
¥ofûög_⁄
 = 0;

90 #i‡
LOADER_DEBUG
 || 
LOADER_PROFILE


91 
DLREL_ªloˇti⁄s
;

92 
time_t
 
DLREL_tŸÆ_ªloc_time
;

102 
	$TYPE_STACK_IMPLEMENTATION
(
DLIMP_Dy«mic_ModuÀ
*, 
dy«mic_moduÀ_±r
)

107 #i‡
LOADER_PROFILE
 || 
LOADER_DEBUG


108 
˛ock_t
 
cy˛e0
 = 0;

109 
˛ock_t
 
cy˛e_íd
 = 0;

110 
	#¥ofûe_°¨t_˛ock
(Ë(
cy˛e0
 = 
	`˛ock
())

	)

111 
	#¥ofûe_°›_˛ock
(Ë(
cy˛e_íd
 = 
	`˛ock
())

	)

112 
	#¥ofûe_cy˛e_cou¡
(Ë(
cy˛e_íd
 - 
cy˛e0
)

	)

126 
DLOAD_HANDLE
 
	$DLOAD_¸óã
(* 
˛õ¡_h™dÀ
)

128 
LOADER_OBJECT
 * 
pLﬂdîObje˘
;

130 
pLﬂdîObje˘
 = 
	`DLIF_mÆloc
((
LOADER_OBJECT
));

133 i‡(
pLﬂdîObje˘
 !
NULL
) {

137 
	`AL_öôülize
(&(
pLﬂdîObje˘
->
DLIMP_moduÀ_dïídícy_li°
),

141 
	`lﬂded_moduÀ_±r_öôülize_queue
(&
pLﬂdîObje˘
->
DLIMP_lﬂded_obje˘s
);

144 
	`dy«mic_moduÀ_±r_öôülize_°ack
(&
pLﬂdîObje˘
->
DLIMP_dïídícy_°ack
);

146 
pLﬂdîObje˘
->
fûe_h™dÀ
 = 1;

148 
pLﬂdîObje˘
->
DLOAD_TARGET_MACHINE
 = 
DLOAD_DEFAULT_TARGET_MACHINE
;

151 
pLﬂdîObje˘
->
˛õ¡_h™dÀ
 = client_handle;

154 ((
DLOAD_HANDLE
)
pLﬂdîObje˘
);

155 
	}
}

169 
	$DLOAD_de°roy
(
DLOAD_HANDLE
 
h™dÀ
)

171 
LOADER_OBJECT
 * 
pLﬂdîObje˘
;

173 
pLﬂdîObje˘
 = (
LOADER_OBJECT
 *)
h™dÀ
;

175 
	`AL_de°roy
(&(
pLﬂdîObje˘
->
DLIMP_moduÀ_dïídícy_li°
));

178 
	`DLIF_‰ì
 (
pLﬂdîObje˘
);

179 
	}
}

188 
uöt32_t
 
	$DLIMP_gë_fú°_dy¡ag
(
èg
, 
Elf32_Dyn
* 
dyn_èbÀ
)

194 
Elf32_Dyn
 *
dç
 = 
dyn_èbÀ
;

195 
dç
->
d_èg
 !
DT_NULL
)

197 i‡(
dç
->
d_èg
 =
èg
Ë dç->
d_un
.
d_vÆ
;

198 
dç
++;

204  
INT_MAX
;

205 
	}
}

216 
BOOL
 
	$dlﬂd_™d_Æloˇã_dïídícõs
(
DLOAD_HANDLE
 
h™dÀ
,

217 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
)

222 
Elf32_Dyn
* 
dyn_nuggë
 = 
dyn_moduÀ
->
dy¡ab
;

223 
LOADER_OBJECT
 *
pH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

225 #i‡
LOADER_DEBUG


226 i‡(
debuggög_⁄
)

227 
	`DLIF_åa˚
("Starting dload_and_allocate_dependencies() for %s ...\n",

228 
dyn_moduÀ
->
«me
);

231 
dyn_nuggë
->
d_èg
 !
DT_NULL
)

238 i‡(
dyn_nuggë
->
d_èg
 =
DT_NEEDED
)

240 
lﬂded_moduÀ_±r_Queue_Node
* 
±r
;

242 #i‡
LOADER_DEBUG


243 i‡(
debuggög_⁄
)

244 
	`DLIF_åa˚
("Found DT_NEEDED: %s\n",

245 
dyn_moduÀ
->
°πab
+
dyn_nuggë
->
d_un
.
d_vÆ
);

253 
±r
 = 
pH™dÀ
->
DLIMP_lﬂded_obje˘s
.
‰⁄t_±r
;Öå !
NULL
;

254 
±r
 =Öå->
√xt_±r
)

256 i‡(!
	`°rcmp
(
±r
->
vÆue
->
«me
,

257 
dyn_moduÀ
->
°πab
 + 
dyn_nuggë
->
d_un
.
d_vÆ
))

259 
±r
->
vÆue
->
u£_cou¡
++;

260 
	`AL_≠≥nd
(&(
dyn_moduÀ
->
lﬂded_moduÀ
->
dïídícõs
),

261 &(
±r
->
vÆue
->
fûe_h™dÀ
));

271 i‡(
±r
 =
NULL
)

273 
öt32_t
 
dïídít_h™dÀ
 = 
	`DLIF_lﬂd_dïídít
(

274 
pH™dÀ
->
˛õ¡_h™dÀ
,

275 
dyn_moduÀ
->
°πab
 +

276 
dyn_nuggë
->
d_un
.
d_vÆ
);

277 
	`AL_≠≥nd
(&(
dyn_moduÀ
->
lﬂded_moduÀ
->
dïídícõs
),

278 &
dïídít_h™dÀ
);

279 i‡(
dïídít_h™dÀ
 =0Ë 
FALSE
;

283 
dyn_nuggë
++;

286 #i‡
LOADER_DEBUG


287 i‡(
debuggög_⁄
)

288 
	`DLIF_åa˚
("Finished dload_and_allocate_dependencies() for %s\n",

289 
dyn_moduÀ
->
«me
);

292  
TRUE
;

293 
	}
}

301 
	$lﬂd_obje˘
(
LOADER_FILE_DESC
 *
fd
, 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
)

309 
	}
}

329 
	$öôülize_lﬂded_moduÀ
(
DLOAD_HANDLE
 
h™dÀ
,

330 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
)

332 
i
;

333 
LOADER_OBJECT
 *
pH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

340 
DLIMP_Lﬂded_ModuÀ
 *
lﬂded_moduÀ
 =

341 
dyn_moduÀ
->
lﬂded_moduÀ
 = 
	`DLIF_mÆloc
((
DLIMP_Lﬂded_ModuÀ
));

343 if(
lﬂded_moduÀ
 =
NULL
) {

344 #i‡
LOADER_DEBUG
 || 
LOADER_PROFILE


345 if(
debuggög_⁄
)

346 
	`DLIF_îr‹
(
DLET_MISC
, "Eº‹áŒoˇtög mem‹y %d...\n",
__LINE__
);

348 
	`exô
(1);

350 #i‡
LOADER_DEBUG
 || 
LOADER_PROFILE


354 i‡(
debuggög_⁄
 || 
¥ofûög_⁄
)

356 
	`DLIF_åa˚
("Starting initialize_loaded_module() ...\n");

357 i‡(
¥ofûög_⁄
Ë
	`¥ofûe_°¨t_˛ock
();

361 
lﬂded_moduÀ
->
«me
 = 
	`DLIF_mÆloc
(
	`°æí
(
dyn_moduÀ
->name) + 1);

362 i‡(
NULL
 =
lﬂded_moduÀ
->
«me
) {

363 
	`DLIF_îr‹
(
DLET_MISC
, "Eº‹áŒoˇtög mem‹y %d...\n",
__LINE__
);

364 
	`exô
(1);

366 
	`°r˝y
(
lﬂded_moduÀ
->
«me
, 
dyn_moduÀ
->name);

368 
lﬂded_moduÀ
->
fûe_h™dÀ
 = 
pH™dÀ
->file_handle++;

369 
lﬂded_moduÀ
->
dúe˘_dïídít_⁄ly
 = 
dyn_moduÀ
->direct_dependent_only;

370 
lﬂded_moduÀ
->
u£_cou¡
 = 1;

375 i‡(
pH™dÀ
->
fûe_h™dÀ
 == 0)

376 
	`DLIF_îr‹
(
DLET_MISC
, "DLOAD File handle overflowed.\n");

386 
lﬂded_moduÀ
->
gsymèb
 = 
NULL
;

387 
lﬂded_moduÀ
->
g°πab
 = 
NULL
;

388 
lﬂded_moduÀ
->
gsymnum
 =Üﬂded_moduÀ->
g°rsz
 = 0;

393 
	`AL_öôülize
(&(
lﬂded_moduÀ
->
dïídícõs
), (), 1);

395 i‡(
dyn_moduÀ
->
symèb
)

396 
	`DLSYM_c›y_globÆs
(
dyn_moduÀ
);

401 
	`AL_öôülize
(&(
lﬂded_moduÀ
->
lﬂded_£gmíts
),

402 (
DLIMP_Lﬂded_Segmít
), 
dyn_moduÀ
->
phnum
);

407 
i
 = 0; i < 
dyn_moduÀ
->
phnum
; i++)

408 i‡(
dyn_moduÀ
->
phdr
[
i
].
p_ty≥
 =
PT_LOAD
)

414 
DLIMP_Lﬂded_Segmít
 
£g
;

415 
£g
.
obj_desc
 = 
	`DLIF_mÆloc
((
DLOAD_MEMORY_SEGMENT
));

416 
£g
.
phdr
.
p_vaddr
 = 
dyn_moduÀ
->phdr[
i
].p_vaddr;

417 
£g
.
phdr
.
p_off£t
 = 
dyn_moduÀ
->phdr[
i
].p_offset;

418 
£g
.
modifõd
 = 0;

419 if(
£g
.
obj_desc
) {

420 
£g
.
obj_desc
->
èrgë_∑ge
 = 0;

421 
£g
.
phdr
.
p_fûesz
 = seg.
obj_desc
->
objsz_ö_byãs


422 
dyn_moduÀ
->
phdr
[
i
].
p_fûesz
;

423 
£g
.
phdr
.
p_memsz
 = seg.
obj_desc
->
memsz_ö_byãs


424 
dyn_moduÀ
->
phdr
[
i
].
p_memsz
;

426 
£g
.
phdr
.
p_Æign
 = 
dyn_moduÀ
->phdr[
i
].p_align;

427 
£g
.
phdr
.
p_Êags
 = 
dyn_moduÀ
->phdr[
i
].p_flags;

428 
£g
.
öput_vaddr
 = 0;

429 
£g
.
phdr
.
p_∑ddr
 = 0;

430 
£g
.
phdr
.
p_ty≥
 = 
PT_LOAD
;

431 
£g
.
ªloc_off£t
 = 0;

432 
	`AL_≠≥nd
(&(
lﬂded_moduÀ
->
lﬂded_£gmíts
), &
£g
);

433 #i‡
LOADER_DEBUG


434 i‡(
debuggög_⁄
)

435 
	`DLIF_åa˚
("%s:£g.phdr.p_vadd∏0x%x\n",
__func__
,

436 
£g
.
phdr
.
p_vaddr
);

446 
lﬂded_moduÀ
->
föi_¨øy
 = (
Elf32_Addr
)
NULL
;

447 
lﬂded_moduÀ
->
föi_¨øysz
 = 0;

448 
lﬂded_moduÀ
->
föi
 = (
Elf32_Addr
Ë
NULL
;

450 #i‡
LOADER_DEBUG
 || 
LOADER_PROFILE


451 i‡(
debuggög_⁄
 || 
¥ofûög_⁄
)

453 
	`DLIF_åa˚
("Finished initialize_loaded_module()\n");

454 i‡(
¥ofûög_⁄
)

456 
	`¥ofûe_°›_˛ock
();

457 
	`DLIF_åa˚
("Took %d cy˛es.\n", (
öt32_t
)
	`¥ofûe_cy˛e_cou¡
());

462 
	}
}

474 
BOOL
 
	$lﬂd_°©ic_£gmít
(
DLOAD_HANDLE
 
h™dÀ
, 
LOADER_FILE_DESC
 *
fd
,

475 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
)

477 
i
;

478 
DLIMP_Lﬂded_Segmít
* 
£g
 = (DLIMP_Loaded_Segment*)

479 (
dyn_moduÀ
->
lﬂded_moduÀ
->
lﬂded_£gmíts
.
buf
);

480 
LOADER_OBJECT
 *
pH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

482 #i‡
LOADER_DEBUG


483 i‡(
debuggög_⁄
) {

484 
	`DLIF_åa˚
("dynmoduÀ i†0x%x\n",(
UI¡32
Ë
dyn_moduÀ
);

485 
	`DLIF_åa˚
("lﬂded_moduÀ i†0x%x\n",(
UI¡32
)
dyn_moduÀ
->
lﬂded_moduÀ
);

486 
	`DLIF_åa˚
("loaded_segments is 0x%x\n",

487 (
UI¡32
)&
dyn_moduÀ
->
lﬂded_moduÀ
->
lﬂded_£gmíts
);

488 
	`DLIF_åa˚
("seg is 0x%x\n",

489 (
UI¡32
)
dyn_moduÀ
->
lﬂded_moduÀ
->
lﬂded_£gmíts
.
buf
);

500 
i
 = 0; i < 
dyn_moduÀ
->
lﬂded_moduÀ
->
lﬂded_£gmíts
.
size
; i++)

502 
DLOAD_MEMORY_REQUEST
 
èrg_ªq
;

503 
£g
[
i
].
obj_desc
->
èrgë_∑ge
 = 0;

504 
èrg_ªq
.
Êags
 = 0;

510 i‡(
£g
[
i
].
phdr
.
p_Êags
 & 
PF_X
Ë
èrg_ªq
.
Êags
 |
DLOAD_SF_execuèbÀ
;

512 
èrg_ªq
.
Æign
 = 
£g
[
i
].
phdr
.
p_Æign
;

513 
£g
[
i
].
obj_desc
->
èrgë_addªss
 = (
TARGET_ADDRESS
)£g[i].
phdr
.
p_vaddr
;

514 
èrg_ªq
.
Êags
 &~
DLOAD_SF_ªloˇèbÀ
;

515 
èrg_ªq
.
Â
 = 
fd
;

516 
èrg_ªq
.
£gmít
 = 
£g
[
i
].
obj_desc
;

517 
èrg_ªq
.
off£t
 = 
£g
[
i
].
phdr
.
p_off£t
;

518 
èrg_ªq
.
Êù_ídün
 = 
dyn_moduÀ
->
wr⁄g_ídün
;

519 #i‡
LOADER_DEBUG


520 i‡(
debuggög_⁄
) {

521 
	`DLIF_åa˚
("============================================\n");

522 
	`DLIF_åa˚
("èrg_ªq.Æig¿%d\n", 
èrg_ªq
.
Æign
);

523 
	`DLIF_åa˚
("èrg_ªq.£gmíà0x%x\n", (
UI¡32
Ë
èrg_ªq
.
£gmít
);

524 
	`DLIF_åa˚
("èrg_ªq.off£à0x%x\n", 
èrg_ªq
.
off£t
);

525 
	`DLIF_åa˚
("èrg_ªq.Êag†0x%x\n", 
èrg_ªq
.
Êags
);

532 i‡(!
	`DLIF_Æloˇã
(
pH™dÀ
->
˛õ¡_h™dÀ
, &
èrg_ªq
)Ë 
FALSE
;

539 i‡(
£g
[
i
].
phdr
.
p_fûesz
)

541 
	`DLIF_c›y
(
pH™dÀ
->
˛õ¡_h™dÀ
, &
èrg_ªq
);

542 
	`DLIF_wrôe
(
pH™dÀ
->
˛õ¡_h™dÀ
, &
èrg_ªq
);

546  
TRUE
;

547 
	}
}

557 
BOOL
 
	$ªloˇã_èrgë_dy«mic_èg_öfo
(
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
,

558 
i
)

560 #ifde‡
ARM_TARGET


561 i‡(
	`is_¨m_moduÀ
(&
dyn_moduÀ
->
fhdr
))

562  
	`DLDYN_¨m_ªloˇã_dy«mic_èg_öfo
(
dyn_moduÀ
, 
i
);

565 #ifde‡
C60_TARGET


566 i‡(
	`is_c60_moduÀ
(&
dyn_moduÀ
->
fhdr
))

567  
	`DLDYN_c60_ªloˇã_dy«mic_èg_öfo
(
dyn_moduÀ
, 
i
);

570  
FALSE
;

571 
	}
}

582 
BOOL
 
	$DLIMP_upd©e_dy¡ag_£˘i⁄_addªss
(
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
,

583 
öt32_t
 
i
)

585 
j
;

586 
DLIMP_Lﬂded_Segmít
 *
£g
 = (DLIMP_Loaded_Segment *)

587 (
dyn_moduÀ
->
lﬂded_moduÀ
->
lﬂded_£gmíts
.
buf
);

588 
j
 = 0; j < 
dyn_moduÀ
->
lﬂded_moduÀ
->
lﬂded_£gmíts
.
size
; j++)

590 i‡((
dyn_moduÀ
->
dy¡ab
[
i
].
d_un
.
d_±r
 >
£g
[
j
].
öput_vaddr
) &&

591 (
dyn_moduÀ
->
dy¡ab
[
i
].
d_un
.
d_±r
 <

592 (
£g
[
j
].
öput_vaddr
 + seg[j].
phdr
.
p_memsz
)))

594 
dyn_moduÀ
->
dy¡ab
[
i
].
d_un
.
d_±r
 +=

595 (
£g
[
j
].
phdr
.
p_vaddr
 - seg[j].
öput_vaddr
);

596  
TRUE
;

600  
FALSE
;

601 
	}
}

611 
BOOL
 
	$ªloˇã_dy«mic_èg_öfo
(
LOADER_FILE_DESC
 *
fd
,

612 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
)

619 
i
;

620 
i
 = 0; 
dyn_moduÀ
->
dy¡ab
[i].
d_èg
 !
DT_NULL
; i++)

622 
dyn_moduÀ
->
dy¡ab
[
i
].
d_èg
)

627 
DT_NEEDED
:

628 
DT_PLTRELSZ
:

629 
DT_HASH
:

630 
DT_STRTAB
:

631 
DT_SYMTAB
:

632 
DT_RELA
:

633 
DT_RELASZ
:

634 
DT_RELAENT
:

635 
DT_STRSZ
:

636 
DT_SYMENT
:

637 
DT_SONAME
:

638 
DT_RPATH
:

639 
DT_SYMBOLIC
:

640 
DT_REL
:

641 
DT_RELSZ
:

642 
DT_RELENT
:

643 
DT_PLTREL
:

644 
DT_DEBUG
:

645 
DT_TEXTREL
:

646 
DT_BIND_NOW
:

647 
DT_INIT_ARRAYSZ
:

648 
DT_RUNPATH
:

649 
DT_FLAGS
:

650 
DT_PREINIT_ARRAYSZ
:

664 
DT_PREINIT_ARRAY
:

665 
DT_INIT
:

666 
DT_INIT_ARRAY
:

667 i‡(!
	`DLIMP_upd©e_dy¡ag_£˘i⁄_addªss
(
dyn_moduÀ
, 
i
))

668  
FALSE
;

678 
DT_FINI_ARRAY
:

679 
DT_FINI
:

680 i‡(!
	`DLIMP_upd©e_dy¡ag_£˘i⁄_addªss
(
dyn_moduÀ
, 
i
))

681  
FALSE
;

683 i‡(
dyn_moduÀ
->
dy¡ab
[
i
].
d_èg
 =
DT_FINI
)

684 
dyn_moduÀ
->
lﬂded_moduÀ
->
föi
 =

685 
dyn_moduÀ
->
dy¡ab
[
i
].
d_un
.
d_±r
;

687 
dyn_moduÀ
->
lﬂded_moduÀ
->
föi_¨øy
 =

688 
dyn_moduÀ
->
dy¡ab
[
i
].
d_un
.
d_±r
;

692 
DT_FINI_ARRAYSZ
:

693 
dyn_moduÀ
->
lﬂded_moduÀ
->
föi_¨øysz
 =

694 
dyn_moduÀ
->
dy¡ab
[
i
].
d_un
.
d_vÆ
;

700 
DT_JMPREL
:

709 i‡(!
	`ªloˇã_èrgë_dy«mic_èg_öfo
(
dyn_moduÀ
, 
i
))

710  
FALSE
;

719  
TRUE
;

720 
	}
}

747 
BOOL
 
	gÆloˇã_dy«mic_£gmíts_™d_ªloˇã_symbﬁs


748 (
DLOAD_HANDLE
 
	gh™dÀ
,

749 
LOADER_FILE_DESC
 *
	gfd
,

750 
DLIMP_Dy«mic_ModuÀ
 *
	gdyn_moduÀ
)

752 
	gi
,
	gj
;

753 
DLIMP_Lﬂded_Segmít
* 
	g£g
 = (DLIMP_Loaded_Segment*)

754 (
dyn_moduÀ
->
lﬂded_moduÀ
->
lﬂded_£gmíts
.
buf
);

755 
Elf32_Ehdr
 *
	gfhdr
 = &(
dyn_moduÀ
->
fhdr
);

756 
LOADER_OBJECT
 *
	gpH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

758 #i‡
LOADER_DEBUG
 || 
LOADER_PROFILE


759 i‡(
	gdebuggög_⁄
 || 
	g¥ofûög_⁄
)

761 
DLIF_åa˚
("DynamicÉxecutable found.\n"

763 i‡(
	g¥ofûög_⁄
Ë
¥ofûe_°¨t_˛ock
();

770 
	gi
 = 0; i < 
	gdyn_moduÀ
->
	glﬂded_moduÀ
->
	glﬂded_£gmíts
.
	gsize
; i++)

776 
öt32_t
 
	gaddr_off£t
;

777 
DLOAD_MEMORY_REQUEST
 
	gèrg_ªq
;

778 
	g£g
[
i
].
	gobj_desc
->
	gèrgë_∑ge
 = 0;

779 
	gèrg_ªq
.
	gÊags
 = 0;

780 i‡(
	g£g
[
i
].
	gphdr
.
	gp_Êags
 & 
	gPF_X
Ë
	gèrg_ªq
.
	gÊags
 |
DLOAD_SF_execuèbÀ
;

781 
	gèrg_ªq
.
	gÆign
 = 0x20;

782 
	g£g
[
i
].
	gobj_desc
->
	gèrgë_addªss
 = (
TARGET_ADDRESS
)
£g
[i].
phdr
.
p_vaddr
;

783 
	gèrg_ªq
.
	gÊags
 |
DLOAD_SF_ªloˇèbÀ
;

785 
	gèrg_ªq
.
	gÂ
 = 
fd
;

786 
	gèrg_ªq
.
	g£gmít
 = 
£g
[
i
].
obj_desc
;

787 
	gèrg_ªq
.
	goff£t
 = 
£g
[
i
].
phdr
.
p_off£t
;

788 
	gèrg_ªq
.
	gÊù_ídün
 = 
dyn_moduÀ
->
wr⁄g_ídün
;

790 #i‡
LOADER_DEBUG


791 i‡(
	gdebuggög_⁄
)

792 
DLIF_åa˚
("Segmíà%d fœg†0x%x\n", 
i
, 
èrg_ªq
.
Êags
);

794 i‡(!
DLIF_Æloˇã
(
pH™dÀ
->
˛õ¡_h™dÀ
, &
èrg_ªq
))

796 
DLIF_îr‹
(
DLET_MEMORY
, "DLIFállocation failure.\n");

797  
	gFALSE
;

804 
	gaddr_off£t
 = (
öt32_t
)(
£g
[
i
].
obj_desc
->
èrgë_addªss
) -

805 (
öt32_t
)(
£g
[
i
].
phdr
.
p_vaddr
);

807 #i‡
LOADER_DEBUG


808 i‡(
	gdebuggög_⁄
)

810 
DLIF_åa˚
("Segment %d (at 0x%x, 0x%x bytes)ÑelocatedÅo 0x%x\n",

811 
i
,

812 (
öt32_t
)(
£g
[
i
].
phdr
.
p_vaddr
),

813 (
öt32_t
)(
£g
[
i
].
phdr
.
p_memsz
),

814 (
öt32_t
)(
£g
[
i
].
obj_desc
->
èrgë_addªss
));

815 
DLIF_åa˚
–"Add∏Off£ài†0x%x\n", 
addr_off£t
);

823 i‡(
	gdyn_moduÀ
->
	gªloˇã_íåy_poöt
 &&

824 
	gfhdr
->
	ge_íåy
 >(
Elf32_Addr
)(
£g
[
i
].
phdr
.
p_vaddr
) &&

825 
fhdr
->
e_íåy
 < (
Elf32_Addr
)((
uöt8_t
*)(
£g
[
i
].
phdr
.
p_vaddr
) +

826 (
uöt32_t
)(
£g
[
i
].
phdr
.
p_memsz
)))

828 #i‡
LOADER_DEBUG


829 i‡(
debuggög_⁄
)

831 
DLIF_åa˚
("EntryÖoint 0x%xÑelocatedÅo 0x%x\n",

832 
fhdr
->
e_íåy
, fhdr->e_íåy + 
addr_off£t
);

835 
	gfhdr
->
	ge_íåy
 +
addr_off£t
;

841 
	gdyn_moduÀ
->
	gªloˇã_íåy_poöt
 = 
FALSE
;

847 
	gj
 = 0; j < 
	gfhdr
->
	ge_phnum
; j++)

848 i‡(
	gdyn_moduÀ
->
	gphdr
[
j
].
	gp_vaddr
 =(
Elf32_Addr
)
£g
[
i
].
phdr
.
p_vaddr
)

850 
dyn_moduÀ
->
phdr
[
j
].
p_vaddr
 +
addr_off£t
;

851 
	gdyn_moduÀ
->
	gphdr
[
i
].
	gp_∑ddr
 +
addr_off£t
;

855 
	g£g
[
i
].
	göput_vaddr
 = (
Elf32_Addr
)(
£g
[i].
phdr
.
p_vaddr
);

856 
	g£g
[
i
].
	gphdr
.
	gp_vaddr
 +
addr_off£t
;

863 
Elf32_Sym
 *
	ggsymèb
 =

864 ((
Elf32_Sym
*)(
dyn_moduÀ
->
lﬂded_moduÀ
->
gsymèb
));

865 
Elf32_Addr
 
	g£gmít_°¨t
 = (Elf32_Addr)
£g
[
i
].
phdr
.
p_vaddr
;

866 
Elf32_Addr
 
	g£gmít_íd
 = (Elf32_Addr)
£g
[
i
].
phdr
.
p_vaddr
 +

867 
£g
[
i
].
phdr
.
p_memsz
;

868 
Elf32_W‹d
 
	gglobÆ_ödex
 = 
dyn_moduÀ
->
symnum
 -

869 
dyn_moduÀ
->
lﬂded_moduÀ
->
gsymnum
;

871 
	gj
 = 0; j < 
	gdyn_moduÀ
->
	gsymnum
; j++)

876 
Elf32_Addr
 
	gsymvÆ_adj
 = 
dyn_moduÀ
->
symèb
[
j
].
°_vÆue
 +

877 
addr_off£t
;

884 i‡(
	gsymvÆ_adj
 >
£gmít_°¨t
 && 
symvÆ_adj
 < 
£gmít_íd
 &&

885 
dyn_moduÀ
->
symèb
[
j
].
°_shndx
 !
INT16_MAX
)

887 
dyn_moduÀ
->
symèb
[
j
].
°_vÆue
 = 
symvÆ_adj
;

892 i‡(
	gj
 >
globÆ_ödex
)

893 
gsymèb
[
j
-
globÆ_ödex
].
°_vÆue
 = 
symvÆ_adj
;

898 
	gdyn_moduÀ
->
	gsymèb
[
j
].
	g°_shndx
 = 
INT16_MAX
;

914 i‡(!
ªloˇã_dy«mic_èg_öfo
(
fd
, 
dyn_moduÀ
))

916 
DLIF_îr‹
(
DLET_MISC
, "Failed dynamicÅable update.\n");

917  
	gFALSE
;

920 #i‡
LOADER_DEBUG
 || 
LOADER_PROFILE


921 i‡(
	gdebuggög_⁄
 || 
	g¥ofûög_⁄
)

923 
DLIF_åa˚
("allocate_dynamic_segments_and_relocate_symbols() Done\n");

924 i‡(
	g¥ofûög_⁄
)

926 
¥ofûe_°›_˛ock
();

927 
DLIF_åa˚
("Took %d cy˛es.\n", ()
¥ofûe_cy˛e_cou¡
());

932  
	gTRUE
;

943 
	$dñëe_DLIMP_Lﬂded_ModuÀ
(
DLOAD_HANDLE
 
h™dÀ
,

944 
DLIMP_Lﬂded_ModuÀ
 **
µlm
)

946 
DLIMP_Lﬂded_ModuÀ
 *
lﬂded_moduÀ
 = *
µlm
;

947 
DLIMP_Lﬂded_Segmít
 *
£gmíts
 = (DLIMP_Loaded_Segment*)

948 (
lﬂded_moduÀ
->
lﬂded_£gmíts
.
buf
);

949 
LOADER_OBJECT
 *
pH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

955 
i
;

956 
i
 = 0; i < 
lﬂded_moduÀ
->
lﬂded_£gmíts
.
size
; i++)

958 i‡(!
	`DLIF_ªÀa£
(
pH™dÀ
->
˛õ¡_h™dÀ
, 
£gmíts
[
i
].
obj_desc
))

959 
	`DLIF_îr‹
(
DLET_MISC
, "Failed callÅo DLIF_release!\n");;

960 
	`DLIF_‰ì
(
£gmíts
[
i
].
obj_desc
);

967 i‡(
lﬂded_moduÀ
->
fûe_h™dÀ
 =
DLIMP_≠∂iˇti⁄_h™dÀ
)

968 
DLIMP_≠∂iˇti⁄_h™dÀ
 = 0;

974 i‡(
lﬂded_moduÀ
->
«me
Ë
	`DLIF_‰ì
(loaded_module->name);

975 i‡(
lﬂded_moduÀ
->
gsymèb
Ë
	`DLIF_‰ì
(loaded_module->gsymtab);

976 
lﬂded_moduÀ
->
gsymnum
 = 0;

977 i‡(
lﬂded_moduÀ
->
g°πab
Ë
	`DLIF_‰ì
(loaded_module->gstrtab);

978 
lﬂded_moduÀ
->
g°rsz
 = 0;

979 
	`AL_de°roy
(&(
lﬂded_moduÀ
->
lﬂded_£gmíts
));

980 
	`AL_de°roy
(&(
lﬂded_moduÀ
->
dïídícõs
));

986 
	`DLIF_‰ì
(
lﬂded_moduÀ
);

987 *
µlm
 = 
NULL
;

988 
	}
}

997 
DLIMP_Dy«mic_ModuÀ
 *
	$√w_DLIMP_Dy«mic_ModuÀ
(
LOADER_FILE_DESC
 *
fd
)

1002 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
 =

1003 (
DLIMP_Dy«mic_ModuÀ
 *)
	`DLIF_mÆloc
((DLIMP_Dynamic_Module));

1005 i‡(!
dyn_moduÀ
)

1006  
NULL
;

1011 
dyn_moduÀ
->
«me
 = 
NULL
;

1012 
dyn_moduÀ
->
fd
 = fd;

1013 
dyn_moduÀ
->
phdr
 = 
NULL
;

1014 
dyn_moduÀ
->
phnum
 = 0;

1015 
dyn_moduÀ
->
°πab
 = 
NULL
;

1016 
dyn_moduÀ
->
°rsz
 = 0;

1017 
dyn_moduÀ
->
dy¡ab
 = 
NULL
;

1018 
dyn_moduÀ
->
symèb
 = 
NULL
;

1019 
dyn_moduÀ
->
symnum
 = 0;

1020 
dyn_moduÀ
->
gsymèb_off£t
 = 0;

1021 
dyn_moduÀ
->
g°πab_off£t
 = 0;

1022 
dyn_moduÀ
->
c_¨gs
 = 
NULL
;

1023 
dyn_moduÀ
->
¨gc
 = 0;

1024 
dyn_moduÀ
->
¨gv
 = 
NULL
;

1025 
dyn_moduÀ
->
lﬂded_moduÀ
 = 
NULL
;

1026 
dyn_moduÀ
->
wr⁄g_ídün
 = 0;

1027 
dyn_moduÀ
->
dúe˘_dïídít_⁄ly
 = 
TRUE
;

1028 
dyn_moduÀ
->
ªloˇèbÀ
 = 
FALSE
;

1029 
dyn_moduÀ
->
ªloˇã_íåy_poöt
 = 
TRUE
;

1031 
dyn_moduÀ
->
dsbt_size
 = 0;

1032 
dyn_moduÀ
->
dsbt_ödex
 = 
DSBT_INDEX_INVALID
;

1033 
dyn_moduÀ
->
dsbt_ba£_ègidx
 = -1;

1035 
dyn_moduÀ
->
¥eöô_¨øy_idx
 = -1;

1036 
dyn_moduÀ
->
¥eöô_¨øysz
 = 0;

1037 
dyn_moduÀ
->
öô_idx
 = -1;

1038 
dyn_moduÀ
->
öô_¨øy_idx
 = -1;

1039 
dyn_moduÀ
->
öô_¨øysz
 = 0;

1041  
dyn_moduÀ
;

1042 
	}
}

1056 
DLIMP_Lﬂded_ModuÀ
 *
	$dëach_lﬂded_moduÀ
(
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
)

1058 i‡(
dyn_moduÀ
 && dyn_moduÀ->
lﬂded_moduÀ
)

1060 
DLIMP_Lﬂded_ModuÀ
 *
lﬂded_moduÀ
 = 
dyn_moduÀ
->loaded_module;

1061 
dyn_moduÀ
->
lﬂded_moduÀ
 = 
NULL
;

1062  
lﬂded_moduÀ
;

1065  
NULL
;

1066 
	}
}

1074 
	$dñëe_DLIMP_Dy«mic_ModuÀ
(
DLOAD_HANDLE
 
h™dÀ
,

1075 
DLIMP_Dy«mic_ModuÀ
 **
µdm
)

1077 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
 = 
NULL
;

1079 i‡(!
µdm
 || (*µdm =
NULL
))

1081 
	`DLIF_îr‹
(
DLET_MISC
,

1084 
	`exô
(1);

1087 
dyn_moduÀ
 = *
µdm
;

1088 i‡(
dyn_moduÀ
->
«me
Ë
	`DLIF_‰ì
(dyn_module->name);

1089 i‡(
dyn_moduÀ
->
°πab
Ë
	`DLIF_‰ì
(dyn_module->strtab);

1090 i‡(
dyn_moduÀ
->
symèb
Ë
	`DLIF_‰ì
(dyn_module->symtab);

1091 i‡(
dyn_moduÀ
->
phdr
Ë
	`DLIF_‰ì
(dyn_module->phdr);

1092 i‡(
dyn_moduÀ
->
dy¡ab
Ë
	`DLIF_‰ì
(dyn_module->dyntab);

1100 i‡(
dyn_moduÀ
->
lﬂded_moduÀ
 !
NULL
)

1101 
	`dñëe_DLIMP_Lﬂded_ModuÀ
(
h™dÀ
, &(
dyn_moduÀ
->
lﬂded_moduÀ
));

1107 
	`DLIF_‰ì
(
dyn_moduÀ
);

1108 *
µdm
 = 
NULL
;

1109 
	}
}

1119 
BOOL
 
	$fûe_hódî_magic_numbî_is_vÆid
(
Elf32_Ehdr
* 
hódî
)

1124 i‡(!
hódî
->
e_idít
[
EI_MAG0
] =
ELFMAG0
 ||

1125 !
hódî
->
e_idít
[
EI_MAG1
] =
ELFMAG1
 ||

1126 !
hódî
->
e_idít
[
EI_MAG2
] =
ELFMAG2
 ||

1127 !
hódî
->
e_idít
[
EI_MAG3
] =
ELFMAG3
)

1129 
	`DLIF_îr‹
(
DLET_FILE
, "Invalid ELF magicÇumber.\n");

1130  
FALSE
;

1133  
TRUE
;

1134 
	}
}

1144 
BOOL
 
	$fûe_hódî_machöe_is_vÆid
(
DLOAD_HANDLE
 
h™dÀ
, 
Elf32_HÆf
 
e_machöe
)

1146 
LOADER_OBJECT
 *
pH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

1148 i‡(
pH™dÀ
->
DLOAD_TARGET_MACHINE
 =
EM_NONE
)

1149 
pH™dÀ
->
DLOAD_TARGET_MACHINE
 = 
e_machöe
;

1151 i‡(
e_machöe
 !
pH™dÀ
->
DLOAD_TARGET_MACHINE
)

1152  
FALSE
;

1154  
TRUE
;

1155 
	}
}

1165 
BOOL
 
	$is_vÆid_ñf_obje˘_fûe
(
LOADER_FILE_DESC
 *
fd
,

1166 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
)

1168 
uöt32_t
 
fsz
;

1169 
i
;

1174 
	`DLIF_f£ek
(
fd
, 0, 
LOADER_SEEK_END
);

1175 
fsz
 = 
	`DLIF_·ñl
(
fd
);

1181 i‡(!((
dyn_moduÀ
->
°rsz
 < 
fsz
) &&

1182 (
dyn_moduÀ
->
symnum
 < 
fsz
) &&

1183 (
dyn_moduÀ
->
phnum
 * (
Elf32_Phdr
)Ë< 
fsz
))

1185 
	`DLIF_îr‹
(
DLET_FILE
, "Invalid ELFÅable bounds.\n");

1186  
FALSE
;

1192 i‡(
dyn_moduÀ
->
dy¡ab
 && !
	`°rcmp
(dyn_moduÀ->
«me
, ""))

1194 
	`DLIF_îr‹
(
DLET_MISC
, "Dynamic fileÜacks SO_NAME identifier.\n");

1195  
FALSE
;

1201 
i
 = 0; i < 
dyn_moduÀ
->
phnum
; i++)

1203 
Elf32_Phdr
* 
phdr
 = 
dyn_moduÀ
->phd∏+ 
i
;

1208 i‡(!(
phdr
->
p_ty≥
 !
PT_LOAD
 ||Öhdr->
p_fûesz
 <phdr->
p_memsz
))

1210 
	`DLIF_îr‹
(
DLET_MISC
,

1211 "InvÆid fûê‹ mem‹y sizêf‹ segmíà%d.\n", 
i
);

1212  
FALSE
;

1218 i‡(!(
phdr
->
p_off£t
 +Öhdr->
p_fûesz
 < 
fsz
))

1220 
	`DLIF_îr‹
(
DLET_FILE
,

1221 "Fûêloˇti⁄ o‡£gmíà%d i†∑°Åhêíd o‡fûe.\n", 
i
);

1222  
FALSE
;

1229 i‡(
dyn_moduÀ
->
fhdr
.
e_ty≥
 =
ET_DYN
 && !dyn_moduÀ->
symèb
Ë 
FALSE
;

1234  
TRUE
;

1235 
	}
}

1243 
BOOL
 
	$¥o˚ss_eioßbi
(
DLIMP_Dy«mic_ModuÀ
* 
dyn_moduÀ
)

1245 #i‡
ARM_TARGET


1246 i‡(
	`is_¨m_moduÀ
(&
dyn_moduÀ
->
fhdr
))

1247  
	`DLDYN_¨m_¥o˚ss_eioßbi
(
dyn_moduÀ
);

1250 #i‡
C60_TARGET


1251 i‡(
	`is_c60_moduÀ
(&
dyn_moduÀ
->
fhdr
))

1252  
	`DLDYN_c60_¥o˚ss_eioßbi
(
dyn_moduÀ
);

1255  
FALSE
;

1256 
	}
}

1264 
BOOL
 
	$dlﬂd_fûe_hódî
(
DLOAD_HANDLE
 
h™dÀ
, 
LOADER_FILE_DESC
 *
fd
,

1265 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
)

1270 
	`DLIF_‰ód
(&(
dyn_moduÀ
->
fhdr
), (
Elf32_Ehdr
), 1, 
fd
);

1276 
dyn_moduÀ
->
wr⁄g_ídün
 =

1277 (
dyn_moduÀ
->
fhdr
.
e_idít
[
EI_DATA
] !
	`DLIMP_gë_ídün
());

1282 i‡(
dyn_moduÀ
->
wr⁄g_ídün
)

1283 
	`DLIMP_ch™ge_ehdr_ídün
(&(
dyn_moduÀ
->
fhdr
));

1285 #i‡
LOADER_DEBUG


1286 i‡(
debuggög_⁄
) {

1290 
	`DLIF_åa˚
("ELF: %c%c%c\n", 
dyn_moduÀ
->
fhdr
.
e_idít
[1],

1291 
dyn_moduÀ
->
fhdr
.
e_idít
[2],

1292 
dyn_moduÀ
->
fhdr
.
e_idít
[3]);

1293 
	`DLIF_åa˚
("ELF file headerÉntryÖoint: %x\n",

1294 
dyn_moduÀ
->
fhdr
.
e_íåy
);

1301 i‡(!
	`fûe_hódî_magic_numbî_is_vÆid
(&(
dyn_moduÀ
->
fhdr
)))

1303 
	`DLIF_îr‹
(
DLET_FILE
, "Invalid ELF file header magicÇumber.\n");

1304  
FALSE
;

1307 i‡(!
	`fûe_hódî_machöe_is_vÆid
(
h™dÀ
, 
dyn_moduÀ
->
fhdr
.
e_machöe
))

1309 
	`DLIF_îr‹
(
DLET_FILE
, "Invalid ELF fileÅarget machine.\n");

1310 
	`DLIF_åa˚
("dyn_module->fhdr.e_machine = 0x%x\n",

1311 
dyn_moduÀ
->
fhdr
.
e_machöe
);

1312  
FALSE
;

1318 i‡((
dyn_moduÀ
->
fhdr
.
e_ty≥
 !
ET_EXEC
) &&

1319 (
dyn_moduÀ
->
fhdr
.
e_ty≥
 !
ET_DYN
))

1321 
	`DLIF_îr‹
(
DLET_FILE
, "Invalid ELF fileÅype.\n");

1322  
FALSE
;

1325 #i‡
LOADER_DEBUG
 || 
LOADER_PROFILE


1331 i‡(
debuggög_⁄
 || 
¥ofûög_⁄
)

1333 
	`DLIF_åa˚
("done.\n");

1334 i‡(
¥ofûög_⁄
)

1336 
	`¥ofûe_°›_˛ock
();

1337 
	`DLIF_åa˚
("Took %d cy˛es.\n", ()
	`¥ofûe_cy˛e_cou¡
());

1338 
	`¥ofûe_°¨t_˛ock
();

1343  
TRUE
;

1344 
	}
}

1353 
	$dlﬂd_¥ogøm_hódî_èbÀ
(
LOADER_FILE_DESC
 *
fd
,

1354 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
)

1359 
Elf32_Ehdr
 *
fhdr
 = &(
dyn_moduÀ
->fhdr);

1360 
dyn_moduÀ
->
phdr
 = (
Elf32_Phdr
*)

1361 (
	`DLIF_mÆloc
(
fhdr
->
e_phnum
 * fhdr->
e_phítsize
));

1362 
	`DLIF_f£ek
(
fd
, 
fhdr
->
e_phoff
, 
LOADER_SEEK_SET
);

1363 if(
dyn_moduÀ
->
phdr
) {

1364 
	`DLIF_‰ód
(
dyn_moduÀ
->
phdr
, 
fhdr
->
e_phítsize
, fhdr->
e_phnum
,
fd
);

1365 
dyn_moduÀ
->
phnum
 = 
fhdr
->
e_phnum
;

1371 i‡(
dyn_moduÀ
->
wr⁄g_ídün
)

1373 
i
;

1374 
i
 = 0; i < 
dyn_moduÀ
->
phnum
; i++)

1375 
	`DLIMP_ch™ge_phdr_ídün
(
dyn_moduÀ
->
phdr
 + 
i
);

1378 
	}
}

1392 
BOOL
 
	$dlﬂd_hódîs
(
DLOAD_HANDLE
 
h™dÀ
, 
LOADER_FILE_DESC
 *
fd
,

1393 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
)

1395 #i‡
LOADER_DEBUG
 || 
LOADER_PROFILE


1399 i‡(
debuggög_⁄
 || 
¥ofûög_⁄
)

1401 
	`DLIF_åa˚
("\nReading file headers ...\n");

1402 i‡(
¥ofûög_⁄
Ë
	`¥ofûe_°¨t_˛ock
();

1410 i‡(!
	`dlﬂd_fûe_hódî
(
h™dÀ
, 
fd
, 
dyn_moduÀ
))

1411  
FALSE
;

1416 
	`dlﬂd_¥ogøm_hódî_èbÀ
(
fd
, 
dyn_moduÀ
);

1418  
TRUE
;

1419 
	}
}

1431 
BOOL
 
	$föd_dy«mic_£gmít
(
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
,

1432 
Elf32_W‹d
 *
dyn_£g_idx
)

1434 
i
;

1441 i‡((
dyn_moduÀ
 =
NULL
Ë|| (
dyn_£g_idx
 == NULL))

1443 
	`DLIF_îr‹
(
DLET_MISC
, "InternalÉrror: find_dynamic_segment()Çeeds "

1445 
	`exô
(1);

1451 
dyn_moduÀ
->
ªloˇèbÀ
 = 
TRUE
;

1452 
i
 = 0; i < 
dyn_moduÀ
->
phnum
; i++)

1453 i‡(
dyn_moduÀ
->
phdr
[
i
].
p_ty≥
 =
PT_DYNAMIC
)

1454 { *
dyn_£g_idx
 = 
i
;  
TRUE
; }

1460 
dyn_moduÀ
->
ªloˇèbÀ
 = 
FALSE
;

1461 #i‡
LOADER_DEBUG


1462 
	`DLIF_w¨nög
(
DLWT_MISC
, "'%s' doesÇot haveá dynamic segment;ássuming "

1464 "bêªloˇãd.\n", 
dyn_moduÀ
->
«me
);

1466  
FALSE
;

1467 
	}
}

1476 
	$c›y_dy«mic_èbÀ
(
LOADER_FILE_DESC
 *
fd
,

1477 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
,

1478 
Elf32_W‹d
 
dyn_£g_idx
)

1484 
Elf32_W‹d
 
num_ñem
;

1485 
dyn_moduÀ
->
dy¡ab
 = 
	`DLIF_mÆloc
(dyn_moduÀ->
phdr
[
dyn_£g_idx
].
p_fûesz
);

1486 
num_ñem
 =

1487 
dyn_moduÀ
->
phdr
[
dyn_£g_idx
].
p_fûesz
 / (
Elf32_Dyn
);

1488 
	`DLIF_f£ek
(
fd
, 
dyn_moduÀ
->
phdr
[
dyn_£g_idx
].
p_off£t
, 
LOADER_SEEK_SET
);

1489 if(
dyn_moduÀ
->
dy¡ab
) {

1490 
	`DLIF_‰ód
(
dyn_moduÀ
->
dy¡ab
, (
Elf32_Dyn
), 
num_ñem
, 
fd
);

1495 i‡(
dyn_moduÀ
->
wr⁄g_ídün
)

1497 
i
;

1498 
i
 = 0; i < 
num_ñem
; i++)

1499 
	`DLIMP_ch™ge_dy√¡_ídün
(&
dyn_moduÀ
->
dy¡ab
[
i
]);

1502 
	}
}

1510 
BOOL
 
	$¥o˚ss_èrgë_dy«mic_èg
(
DLIMP_Dy«mic_ModuÀ
* 
dyn_moduÀ
, 
i
)

1512 #ifde‡
ARM_TARGET


1513 i‡(
	`is_¨m_moduÀ
(&
dyn_moduÀ
->
fhdr
))

1514  
	`DLDYN_¨m_¥o˚ss_dy«mic_èg
(
dyn_moduÀ
, 
i
);

1517 #ifde‡
C60_TARGET


1518 i‡(
	`is_c60_moduÀ
(&
dyn_moduÀ
->
fhdr
))

1519  
	`DLDYN_c60_¥o˚ss_dy«mic_èg
(
dyn_moduÀ
, 
i
);

1522  
FALSE
;

1523 
	}
}

1533 
BOOL
 
	$¥o˚ss_dy«mic_èbÀ
(
LOADER_FILE_DESC
 *
fd
,

1534 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
)

1536 
i
;

1537 
BOOL
 
s⁄ame_found
 = 
FALSE
;

1538 
Elf32_Addr
 
s⁄ame_off£t
 = 0;

1539 
Elf32_Addr
 
°πab_off£t
 = 0;

1540 
Elf32_Addr
 
hash_off£t
 = 0;

1541 
Elf32_Addr
 
symèb_off£t
 = 0;

1549 
i
 = 0; 
dyn_moduÀ
->
dy¡ab
[i].
d_èg
 !
DT_NULL
; i++)

1551 
dyn_moduÀ
->
dy¡ab
[
i
].
d_èg
)

1559 
DT_SONAME
:

1560 #i‡
LOADER_DEBUG


1561 i‡(
debuggög_⁄
Ë
	`DLIF_åa˚
("Found SO_NAME.\n");

1568 
s⁄ame_found
 = 
TRUE
;

1569 
s⁄ame_off£t
 = 
dyn_moduÀ
->
dy¡ab
[
i
].
d_un
.
d_±r
;

1575 
DT_STRSZ
:

1576 
dyn_moduÀ
->
°rsz
 = dyn_moduÀ->
dy¡ab
[
i
].
d_un
.
d_vÆ
;

1578 #i‡
LOADER_DEBUG


1579 i‡(
debuggög_⁄
)

1580 
	`DLIF_åa˚
("Found stringÅable Size: 0x%x\n",

1581 
dyn_moduÀ
->
°rsz
);

1592 
DT_STRTAB
:

1593 
°πab_off£t
 = 
dyn_moduÀ
->
dy¡ab
[
i
].
d_un
.
d_±r
;

1594 #i‡
LOADER_DEBUG


1595 i‡(
debuggög_⁄
)

1596 
	`DLIF_åa˚
("Found såögÅabÀ: 0x%x\n", 
°πab_off£t
);

1603 
DT_HASH
:

1604 
hash_off£t
 = 
dyn_moduÀ
->
dy¡ab
[
i
].
d_un
.
d_±r
;

1605 #i‡
LOADER_DEBUG


1606 i‡(
debuggög_⁄
)

1607 
	`DLIF_åa˚
("Found symbﬁ hashÅabÀ: 0x%x\n", 
hash_off£t
);

1614 
DT_SYMTAB
:

1615 
symèb_off£t
 = 
dyn_moduÀ
->
dy¡ab
[
i
].
d_un
.
d_±r
;

1616 #i‡
LOADER_DEBUG


1617 i‡(
debuggög_⁄
)

1618 
	`DLIF_åa˚
("Found symbﬁÅabÀ: 0x%x\n", 
symèb_off£t
);

1635 
DT_PREINIT_ARRAY
:

1636 
dyn_moduÀ
->
¥eöô_¨øy_idx
 = 
i
;

1639 
DT_PREINIT_ARRAYSZ
:

1640 
dyn_moduÀ
->
¥eöô_¨øysz
 = dyn_moduÀ->
dy¡ab
[
i
].
d_un
.
d_vÆ
;

1643 
DT_INIT
:

1644 
dyn_moduÀ
->
öô_idx
 = 
i
;

1647 
DT_INIT_ARRAY
:

1648 
dyn_moduÀ
->
öô_¨øy_idx
 = 
i
;

1651 
DT_INIT_ARRAYSZ
:

1652 
dyn_moduÀ
->
öô_¨øysz
 = dyn_moduÀ->
dy¡ab
[
i
].
d_un
.
d_vÆ
;

1660 
DT_FINI_ARRAY
:

1661 
DT_FINI_ARRAYSZ
:

1662 
DT_FINI
:

1671 i‡(!
	`¥o˚ss_èrgë_dy«mic_èg
(
dyn_moduÀ
, 
i
))

1673 #i‡
LOADER_DEBUG


1674 i‡(
debuggög_⁄
)

1675 
	`DLIF_åa˚
("Unrecognized dynamicÅag: 0x%X\n",

1676 
dyn_moduÀ
->
dy¡ab
[
i
].
d_èg
);

1690 i‡(
°πab_off£t
 && 
dyn_moduÀ
->
°rsz
)

1692 
	`DLIF_f£ek
(
fd
, 
°πab_off£t
, 
LOADER_SEEK_SET
);

1693 
dyn_moduÀ
->
°πab
 = 
	`DLIF_mÆloc
(dyn_moduÀ->
°rsz
);

1694 if(
dyn_moduÀ
->
°πab
)

1695 
	`DLIF_‰ód
(
dyn_moduÀ
->
°πab
, (
uöt8_t
), dyn_moduÀ->
°rsz
,

1696 
fd
);

1698  
FALSE
;

1702 
	`DLIF_w¨nög
(
DLWT_MISC
,

1704  
FALSE
;

1711 i‡(
hash_off£t
)

1731 
Elf32_W‹d
 
hash_nbuckë
;

1732 
Elf32_W‹d
 
hash_nchaö
;

1738 
	`DLIF_f£ek
(
fd
, 
hash_off£t
, 
LOADER_SEEK_SET
);

1739 
	`DLIF_‰ód
(&(
hash_nbuckë
), (
Elf32_W‹d
), 1, 
fd
);

1740 
	`DLIF_‰ód
(&(
hash_nchaö
), (
Elf32_W‹d
), 1, 
fd
);

1741 i‡(
dyn_moduÀ
->
wr⁄g_ídün
)

1743 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(&(
hash_nbuckë
)));

1744 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(&(
hash_nchaö
)));

1752 
dyn_moduÀ
->
symnum
 = 
hash_nchaö
;

1753 #i‡
LOADER_DEBUG


1754 i‡(
debuggög_⁄
Ë
	`DLIF_åa˚
("symnum=%d\n", 
hash_nchaö
);

1759 
	`DLIF_w¨nög
(
DLWT_MISC
,

1761  
FALSE
;

1767 i‡(
symèb_off£t
)

1769 
j
 = 0;

1770 
	`DLIF_f£ek
(
fd
, 
symèb_off£t
, 
LOADER_SEEK_SET
);

1771 
dyn_moduÀ
->
symèb
 =

1772 
	`DLIF_mÆloc
(
dyn_moduÀ
->
symnum
 * (
Elf32_Sym
));

1773 if(
dyn_moduÀ
->
symèb
 =
NULL
)

1774  
FALSE
;

1775 
	`DLIF_‰ód
(
dyn_moduÀ
->
symèb
, (
Elf32_Sym
),

1776 
dyn_moduÀ
->
symnum
, 
fd
);

1777 i‡(
dyn_moduÀ
->
wr⁄g_ídün
)

1779 
j
 = 0; j < 
dyn_moduÀ
->
symnum
; j++)

1780 
	`DLIMP_ch™ge_sym_ídün
(
dyn_moduÀ
->
symèb
 + 
j
);

1787 i‡(
°πab_off£t
)

1788 
j
 = 0; j < 
dyn_moduÀ
->
symnum
; j++) {

1789 
dyn_moduÀ
->
symèb
[
j
].
°_«me
 +=

1790 (
Elf32_W‹d
Ë
dyn_moduÀ
->
°πab
;

1791 #i‡
LOADER_DEBUG


1792 i‡(
debuggög_⁄
)

1793 
	`DLIF_åa˚
("Name of dynamicÉntry: %s\n",

1794 
dyn_moduÀ
->
symèb
[
j
].
°_«me
);

1800 
	`DLIF_w¨nög
(
DLWT_MISC
,

1802  
FALSE
;

1808 i‡(!
s⁄ame_found
)

1810 
	`DLIF_w¨nög
(
DLWT_MISC
, "DynamicÅag DT_SONAME isÇot found!\n");

1811 
dyn_moduÀ
->
«me
 = 
	`DLIF_mÆloc
(());

1812 if(
dyn_moduÀ
->
«me
)

1813 *
dyn_moduÀ
->
«me
 = '\0';

1815  
FALSE
;

1819 
dyn_moduÀ
->
«me
 =

1820 
	`DLIF_mÆloc
(
	`°æí
(
dyn_moduÀ
->
°πab
 + 
s⁄ame_off£t
) + 1);

1821 if(
dyn_moduÀ
->
«me
) {

1822 
	`°r˝y
(
dyn_moduÀ
->
«me
, dyn_moduÀ->
°πab
 + 
s⁄ame_off£t
);

1823 #i‡
LOADER_DEBUG


1824 i‡(
debuggög_⁄
)

1825 
	`DLIF_åa˚
("Namêo‡dy«mi¯obje˘: %s\n", 
dyn_moduÀ
->
«me
);

1829 
	`DLIF_îr‹
(
DLET_MISC
, "Eº‹áŒoˇtög mem‹y %d.\n",
__LINE__
);

1830  
FALSE
;

1834  
TRUE
;

1835 
	}
}

1847 
BOOL
 
	$dlﬂd_dy«mic_öf‹m©i⁄
(
LOADER_FILE_DESC
 *
fd
,

1848 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
,

1849 
Elf32_W‹d
 
dyn_£g_idx
)

1854 
	`c›y_dy«mic_èbÀ
(
fd
, 
dyn_moduÀ
, 
dyn_£g_idx
);

1861  
	`¥o˚ss_dy«mic_èbÀ
(
fd
, 
dyn_moduÀ
);

1862 
	}
}

1873 
BOOL
 
	$check_cúcuœr_dïídícy
(
DLOAD_HANDLE
 
h™dÀ
,

1874 c⁄° *
dyn_mod_«me
)

1881 
i
;

1882 
LOADER_OBJECT
 *
pH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

1884 
i
 = 0; i < 
pH™dÀ
->
DLIMP_moduÀ_dïídícy_li°
.
size
; i++)

1885 i‡(!
	`°rcmp
(
dyn_mod_«me
,

1886 ((**)(
pH™dÀ
->
DLIMP_moduÀ_dïídícy_li°
.
buf
))[
i
]))

1888 
	`DLIF_îr‹
(
DLET_MISC
,

1890 "¥o˚s†o‡lﬂdög.\n", 
dyn_mod_«me
);

1891  
FALSE
;

1894  
TRUE
;

1895 
	}
}

1909 
BOOL
 
	$dlﬂd_dy«mic_£gmít
(
DLOAD_HANDLE
 
h™dÀ
,

1910 
LOADER_FILE_DESC
 *
fd
,

1911 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
)

1919 
Elf32_W‹d
 
dyn_£g_idx
 = 0;

1920 i‡(!
	`föd_dy«mic_£gmít
(
dyn_moduÀ
, &
dyn_£g_idx
))

1921  
TRUE
;

1926 i‡(!
	`¥o˚ss_eioßbi
(
dyn_moduÀ
))

1928 
	`DLIF_îr‹
(
DLET_FILE
, "Unsupported EI_OSABI value.\n");

1929  
FALSE
;

1936 i‡(!
	`dlﬂd_dy«mic_öf‹m©i⁄
(
fd
, 
dyn_moduÀ
, 
dyn_£g_idx
))

1937  
FALSE
;

1944 i‡(!
	`check_cúcuœr_dïídícy
(
h™dÀ
, 
dyn_moduÀ
->
«me
))

1945  
FALSE
;

1947  
TRUE
;

1948 
	}
}

1955 
	$c›y_£gmíts
(
DLOAD_HANDLE
 
h™dÀ
, 
LOADER_FILE_DESC
* 
Â
,

1956 
DLIMP_Dy«mic_ModuÀ
* 
dyn_moduÀ
, * 
d©a
)

1958 
LOADER_OBJECT
 *
pH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

1959 
DLIMP_Lﬂded_Segmít
* 
£g
 =

1960 (
DLIMP_Lﬂded_Segmít
*)(
dyn_moduÀ
->
lﬂded_moduÀ
->
lﬂded_£gmíts
.
buf
);

1961 
s
, 
£g_size
 = 
dyn_moduÀ
->
lﬂded_moduÀ
->
lﬂded_£gmíts
.
size
;

1962 **
va
 = 
	`DLIF_mÆloc
(
£g_size
 * (*));

1964 i‡(!
va
) {

1965 
	`DLIF_îr‹
(
DLET_MISC
, "FailedÅoállocate va in copy_segments.\n");

1969 *
d©a
 = ()
va
;

1971 
s
=0; s<
£g_size
; s++)

1973 
DLOAD_MEMORY_REQUEST
 
èrg_ªq
;

1974 
èrg_ªq
.
Â
 = fp;

1975 
èrg_ªq
.
£gmít
 = 
£g
[
s
].
obj_desc
;

1976 
èrg_ªq
.
off£t
 = 
£g
[
s
].
phdr
.
p_off£t
;

1977 
èrg_ªq
.
Êags
 = 
DLOAD_SF_ªloˇèbÀ
;

1978 i‡(
£g
[
s
].
phdr
.
p_Êags
 & 
PF_X
)

1979 
£g
[
s
].
phdr
.
p_Êags
 |
DLOAD_SF_execuèbÀ
;

1980 
èrg_ªq
.
Æign
 = 
£g
[
s
].
phdr
.
p_Æign
;

1986 
	`DLIF_c›y
(
pH™dÀ
->
˛õ¡_h™dÀ
, &
èrg_ªq
);

1988 
va
[
s
] = 
èrg_ªq
.
ho°_addªss
;

1993 
£g
[
s
].
ªloc_off£t
 = (
öt32_t
)(
èrg_ªq
.
ho°_addªss
) -

1994 (
öt32_t
)(
£g
[
s
].
obj_desc
->
èrgë_addªss
);

1996 
	}
}

2003 
	$wrôe_£gmíts
(
DLOAD_HANDLE
 
h™dÀ
, 
LOADER_FILE_DESC
* 
Â
,

2004 
DLIMP_Dy«mic_ModuÀ
* 
dyn_moduÀ
, * 
d©a
)

2006 
LOADER_OBJECT
 *
pH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

2007 
DLIMP_Lﬂded_Segmít
* 
£g
 =

2008 (
DLIMP_Lﬂded_Segmít
*)(
dyn_moduÀ
->
lﬂded_moduÀ
->
lﬂded_£gmíts
.
buf
);

2009 
s
, 
£g_size
 = 
dyn_moduÀ
->
lﬂded_moduÀ
->
lﬂded_£gmíts
.
size
;

2010 **
va
 = (*)*
d©a
;

2012 i‡(!
va
) {

2013 
	`DLIF_îr‹
(
DLET_MISC
, "Invalid host virtualáddressárrayÖassed into"

2018 
s
=0; s<
£g_size
; s++)

2020 
DLOAD_MEMORY_REQUEST
 
èrg_ªq
;

2021 
èrg_ªq
.
Â
 = fp;

2022 
èrg_ªq
.
£gmít
 = 
£g
[
s
].
obj_desc
;

2023 
èrg_ªq
.
off£t
 = 
£g
[
s
].
phdr
.
p_off£t
;

2024 
èrg_ªq
.
Êags
 = 
DLOAD_SF_ªloˇèbÀ
;

2025 i‡(
£g
[
s
].
phdr
.
p_Êags
 & 
PF_X
)

2026 
£g
[
s
].
phdr
.
p_Êags
 |
DLOAD_SF_execuèbÀ
;

2027 
èrg_ªq
.
Æign
 = 
£g
[
s
].
phdr
.
p_Æign
;

2028 
èrg_ªq
.
ho°_addªss
 = 
va
[
s
];

2034 
	`DLIF_wrôe
(
pH™dÀ
->
˛õ¡_h™dÀ
, &
èrg_ªq
);

2037 
	`DLIF_‰ì
(
va
);

2038 
	}
}

2056 
	$DLOAD_öôülize
(
DLOAD_HANDLE
 
h™dÀ
)

2058 
LOADER_OBJECT
 *
pH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

2063 
	`AL_öôülize
(&
pH™dÀ
->
DLIMP_moduÀ_dïídícy_li°
,

2065 
	}
}

2081 
	$DLOAD_föÆize
(
DLOAD_HANDLE
 
h™dÀ
)

2083 
LOADER_OBJECT
 *
pH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

2088 
	`AL_de°roy
(&
pH™dÀ
->
DLIMP_moduÀ_dïídícy_li°
);

2089 
	}
}

2099 
öt32_t
 
	$dlﬂd_°©ic_execuèbÀ
(
DLOAD_HANDLE
 
h™dÀ
,

2100 
LOADER_FILE_DESC
 *
fd
,

2101 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
)

2103 
öt32_t
 
loˇl_fûe_h™dÀ
 = 0;

2105 #i‡
LOADER_DEBUG


2106 i‡(
debuggög_⁄
Ë
	`DLIF_åa˚
("Starting dload_static_executable() ...\n");

2114 
dyn_moduÀ
->
lﬂded_moduÀ
->
íåy_poöt
 = dyn_moduÀ->
fhdr
.
e_íåy
;

2115 i‡(
	`lﬂd_°©ic_£gmít
(
h™dÀ
, 
fd
, 
dyn_moduÀ
) &&

2116 
	`lﬂd_obje˘
(
fd
, 
dyn_moduÀ
))

2123 
DLIMP_Lﬂded_ModuÀ
 *
lﬂded_moduÀ
 = 
	`dëach_lﬂded_moduÀ
(
dyn_moduÀ
);

2124 i‡(
lﬂded_moduÀ
)

2125 
loˇl_fûe_h™dÀ
 = 
lﬂded_moduÀ
->
fûe_h™dÀ
;

2127 
	`DLIF_îr‹
(
DLET_MISC
, "FailedÅo detach module.\n");

2128 
	`dñëe_DLIMP_Dy«mic_ModuÀ
(
h™dÀ
, &
dyn_moduÀ
);

2129  
loˇl_fûe_h™dÀ
;

2138 
	`DLIF_åa˚
("%s:%d EMEMORY\n",
__func__
,
__LINE__
);

2139 
	`DLIF_îr‹
(
DLET_MEMORY
,

2146 
	`dñëe_DLIMP_Dy«mic_ModuÀ
(
h™dÀ
, &
dyn_moduÀ
);

2148 #i‡
LOADER_DEBUG


2149 i‡(
debuggög_⁄
Ë
	`DLIF_åa˚
("Finished dload_static_executable()\n");

2152  
loˇl_fûe_h™dÀ
;

2153 
	}
}

2164 
	$¥o˚ss_dy«mic_moduÀ_ªloˇti⁄s
(
DLOAD_HANDLE
 
h™dÀ
,

2165 
LOADER_FILE_DESC
 *
fd
,

2166 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
)

2168 
d©a
 = 0;

2170 #i‡
LOADER_DEBUG
 || 
LOADER_PROFILE


2171 if(
debuggög_⁄
 || 
¥ofûög_⁄
)

2173 
	`DLIF_åa˚
("RunningÑelocate()...\n");

2174 i‡(
¥ofûög_⁄
Ë
	`¥ofûe_°¨t_˛ock
();

2181 
	`c›y_£gmíts
(
h™dÀ
, 
fd
, 
dyn_moduÀ
, &
d©a
);

2186 #i‡
ARM_TARGET


2187 i‡(
	`is_¨m_moduÀ
(&
dyn_moduÀ
->
fhdr
))

2188 
	`DLREL_ªloˇã
(
h™dÀ
, 
fd
, 
dyn_moduÀ
);

2191 #i‡
C60_TARGET


2192 i‡(
	`is_c60_moduÀ
(&
dyn_moduÀ
->
fhdr
))

2193 
	`DLREL_ªloˇã_c60
(
h™dÀ
, 
fd
, 
dyn_moduÀ
);

2199 
	`wrôe_£gmíts
(
h™dÀ
, 
fd
, 
dyn_moduÀ
, &
d©a
);

2201 #i‡
LOADER_DEBUG
 || 
LOADER_PROFILE


2205 i‡(
debuggög_⁄
 || 
¥ofûög_⁄
)

2207 i‡(
¥ofûög_⁄
)

2209 
	`¥ofûe_°›_˛ock
();

2210 
	`DLIF_åa˚
("Took %d cy˛es.\n", ()
	`¥ofûe_cy˛e_cou¡
());

2211 
	`DLIF_åa˚
("TŸÆÑño¯time: %d\n", ()
DLREL_tŸÆ_ªloc_time
);

2212 
	`DLIF_åa˚
("TimeÖerÑelocation: %d\n",

2213 (
DLREL_ªloˇti⁄s
 ?

2214 ()(
DLREL_tŸÆ_ªloc_time
 / 
DLREL_ªloˇti⁄s
) : 0));

2217 
	`DLIF_åa˚
("Numbî o‡ªloˇti⁄s: %d\n", 
DLREL_ªloˇti⁄s
);

2218 
	`DLIF_åa˚
("\nAboutÅoÑunÜoad_object()...");

2219 
DLREL_tŸÆ_ªloc_time
 = 
DLREL_ªloˇti⁄s
 = 0;

2220 i‡(
¥ofûög_⁄
Ë
	`¥ofûe_°¨t_˛ock
();

2223 
	}
}

2242 
	$execuã_moduÀ_¥e_öôüliz©i⁄
(
DLOAD_HANDLE
 
h™dÀ
, 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
)

2244 
LOADER_OBJECT
 *
pH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

2253 i‡(
dyn_moduÀ
->
¥eöô_¨øysz
 != 0)

2259 
TARGET_ADDRESS
 
¥eöô_¨øy_loc
 = (TARGET_ADDRESS)

2260 (
dyn_moduÀ
->
dy¡ab
[dyn_moduÀ->
¥eöô_¨øy_idx
].
d_un
.
d_±r
);

2265 
öt32_t
 
i
;

2266 
öt32_t
 
num_¥eöô_f˙s
 =

2267 
dyn_moduÀ
->
¥eöô_¨øysz
/(
TARGET_ADDRESS
);

2268 
TARGET_ADDRESS
 *
¥eöô_¨øy_buf
 = (TARGET_ADDRESS *)

2269 
	`DLIF_mÆloc
(
dyn_moduÀ
->
¥eöô_¨øysz
);

2270 if(
¥eöô_¨øy_buf
) {

2271 
	`DLIF_ªad
(
pH™dÀ
->
˛õ¡_h™dÀ
, 
¥eöô_¨øy_buf
, 1,

2272 
dyn_moduÀ
->
¥eöô_¨øysz
,

2273 (
TARGET_ADDRESS
)
¥eöô_¨øy_loc
);

2283 
i
 = 0; i < 
num_¥eöô_f˙s
; i++)

2284 
	`DLIF_execuã
(
pH™dÀ
->
˛õ¡_h™dÀ
,

2285 (
TARGET_ADDRESS
)(
¥eöô_¨øy_buf
[
i
]));

2287 
	`DLIF_‰ì
(
¥eöô_¨øy_buf
);

2290 
	}
}

2302 
	$execuã_moduÀ_öôüliz©i⁄
(
DLOAD_HANDLE
 
h™dÀ
,

2303 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
)

2305 
LOADER_OBJECT
 *
pH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

2313 i‡(
dyn_moduÀ
->
öô_idx
 != -1)

2320 
TARGET_ADDRESS
 
öô_f˙
 = (TARGET_ADDRESS)

2321 (
dyn_moduÀ
->
dy¡ab
[dyn_moduÀ->
öô_idx
].
d_un
.
d_±r
);

2322 
	`DLIF_execuã
(
pH™dÀ
->
˛õ¡_h™dÀ
, 
öô_f˙
);

2332 i‡(
dyn_moduÀ
->
öô_¨øysz
 != 0)

2338 
TARGET_ADDRESS
 
öô_¨øy_loc
 = (TARGET_ADDRESS)

2339 (
dyn_moduÀ
->
dy¡ab
[dyn_moduÀ->
öô_¨øy_idx
].
d_un
.
d_±r
);

2344 
öt32_t
 
i
;

2345 
öt32_t
 
num_öô_f˙s
 = 
dyn_moduÀ
->
öô_¨øysz
/(
TARGET_ADDRESS
);

2346 
TARGET_ADDRESS
 *
öô_¨øy_buf
 = (TARGET_ADDRESS *)

2347 
	`DLIF_mÆloc
(
dyn_moduÀ
->
öô_¨øysz
);

2348 if(
öô_¨øy_buf
) {

2349 
	`DLIF_ªad
(
pH™dÀ
->
˛õ¡_h™dÀ
, 
öô_¨øy_buf
, 1,

2350 
dyn_moduÀ
->
öô_¨øysz
, (
TARGET_ADDRESS
)
öô_¨øy_loc
);

2359 
i
 = 0; i < 
num_öô_f˙s
; i++)

2360 
	`DLIF_execuã
(
pH™dÀ
->
˛õ¡_h™dÀ
,

2361 (
TARGET_ADDRESS
)(
öô_¨øy_buf
[
i
]));

2363 
	`DLIF_‰ì
(
öô_¨øy_buf
);

2366 
	}
}

2381 
öt32_t
 
	$ªloˇã_dïídícy_gøph_moduÀs
(
DLOAD_HANDLE
 
h™dÀ
,

2382 
LOADER_FILE_DESC
 *
fd
,

2383 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
)

2390 
öt32_t
 
loˇl_fûe_h™dÀ
 = 
dyn_moduÀ
->
lﬂded_moduÀ
->
fûe_h™dÀ
;

2391 
LOADER_OBJECT
 *
pH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

2392 
dy«mic_moduÀ_±r_Sèck_Node
 *
±r
 =

2393 
pH™dÀ
->
DLIMP_dïídícy_°ack
.
bŸtom_±r
;

2394 i‡(
±r
 && (±r->
vÆue
 !
dyn_moduÀ
)Ë{ 
loˇl_fûe_h™dÀ
;}

2399 
	`DLIF_assign_dsbt_ödi˚s
();

2405 
	`DLIF_upd©e_Æl_dsbts
();

2413 
pH™dÀ
->
DLIMP_dïídícy_°ack
.
size
 > 0)

2415 
DLIMP_Dy«mic_ModuÀ
 *
dyn_mod_±r
 =

2416 
	`dy«mic_moduÀ_±r_p›
(&
pH™dÀ
->
DLIMP_dïídícy_°ack
);

2421 
	`¥o˚ss_dy«mic_moduÀ_ªloˇti⁄s
(
h™dÀ
, 
dyn_mod_±r
->
fd
,

2422 
dyn_mod_±r
);

2428 
	`DLSYM_lookup_loˇl_symèb
("__c_¨gs__", 
dyn_mod_±r
->
symèb
,

2429 
dyn_mod_±r
->
symnum
,

2430 (
Elf32_Addr
 *)&
dyn_mod_±r
->
c_¨gs
);

2441 
dyn_mod_±r
->
lﬂded_moduÀ
->
íåy_poöt
 = dyn_mod_±r->
fhdr
.
e_íåy
;

2447 
	`lﬂd_obje˘
(
dyn_mod_±r
->
fd
, dyn_mod_ptr);

2452 
	`execuã_moduÀ_öôüliz©i⁄
(
h™dÀ
, 
dyn_mod_±r
);

2457 i‡(
dyn_mod_±r
->
fd
 != fd)

2459 
	`DLIF_f˛o£
(
dyn_mod_±r
->
fd
);

2460 
dyn_mod_±r
->
fd
 = 
NULL
;

2467 
	`dëach_lﬂded_moduÀ
(
dyn_mod_±r
);

2468 
	`dñëe_DLIMP_Dy«mic_ModuÀ
(
h™dÀ
, &
dyn_mod_±r
);

2470  
loˇl_fûe_h™dÀ
;

2471 
	}
}

2483 
öt32_t
 
	$DLOAD_lﬂd
(
DLOAD_HANDLE
 
h™dÀ
, 
LOADER_FILE_DESC
 *
fd
, 
¨gc
,

2484 ** 
¨gv
)

2486 
LOADER_OBJECT
 *
pH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

2487 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
 = 
	`√w_DLIMP_Dy«mic_ModuÀ
(
fd
);

2489 i‡(!
dyn_moduÀ
)

2492 #i‡
LOADER_DEBUG


2497 i‡(
debuggög_⁄
Ë
	`DLIF_åa˚
("Loading file...\n");

2503 i‡(!
fd
)

2505 
	`DLIF_îr‹
(
DLET_FILE
, "Missing file specification.\n");

2506 
	`dñëe_DLIMP_Dy«mic_ModuÀ
(
h™dÀ
, &
dyn_moduÀ
);

2513 i‡(!
	`dlﬂd_hódîs
(
h™dÀ
, 
fd
, 
dyn_moduÀ
)) {

2514 
	`dñëe_DLIMP_Dy«mic_ModuÀ
(
h™dÀ
, &
dyn_moduÀ
);

2523 i‡(!
	`dlﬂd_dy«mic_£gmít
(
h™dÀ
, 
fd
, 
dyn_moduÀ
)) {

2524 
	`dñëe_DLIMP_Dy«mic_ModuÀ
(
h™dÀ
, &
dyn_moduÀ
);

2535  
dyn_moduÀ
->
c_¨gs
 = (
uöt8_t
*)(0x02204000);

2540 
dyn_moduÀ
->
¨gc
 =árgc;

2541 
dyn_moduÀ
->
¨gv
 =árgv;

2542 i‡(
dyn_moduÀ
->
«me
 =
NULL
) {

2543 
dyn_moduÀ
->
«me
 = 
	`DLIF_mÆloc
(());

2544 if(
dyn_moduÀ
->
«me
)

2545 *
dyn_moduÀ
->
«me
 = '\0';

2547 
	`dñëe_DLIMP_Dy«mic_ModuÀ
(
h™dÀ
, &
dyn_moduÀ
);

2555 i‡(!
	`is_vÆid_ñf_obje˘_fûe
(
fd
, 
dyn_moduÀ
))

2557 
	`DLIF_îr‹
(
DLET_FILE
, "AttemptÅoÜoad invalid ELF file, '%s'.\n",

2558 
dyn_moduÀ
->
«me
);

2559 
	`dñëe_DLIMP_Dy«mic_ModuÀ
(
h™dÀ
, &
dyn_moduÀ
);

2563 #i‡
LOADER_DEBUG
 || 
LOADER_PROFILE


2568 i‡(
debuggög_⁄
 || 
¥ofûög_⁄
)

2570 
	`DLIF_åa˚
("Finished dload_dynamic_segment.\n");

2571 i‡(
¥ofûög_⁄
)

2573 
	`¥ofûe_°›_˛ock
();

2574 
	`DLIF_åa˚
("Took %d cy˛es.\n", ()
	`¥ofûe_cy˛e_cou¡
());

2584 
	`öôülize_lﬂded_moduÀ
(
h™dÀ
, 
dyn_moduÀ
);

2589 
	`lﬂded_moduÀ_±r_íqueue
(&
pH™dÀ
->
DLIMP_lﬂded_obje˘s
,

2590 
dyn_moduÀ
->
lﬂded_moduÀ
);

2595 i‡(!
dyn_moduÀ
->
ªloˇèbÀ
)

2596  
	`dlﬂd_°©ic_execuèbÀ
(
h™dÀ
, 
fd
, 
dyn_moduÀ
);

2605 i‡(!
	`Æloˇã_dy«mic_£gmíts_™d_ªloˇã_symbﬁs
(
h™dÀ
, 
fd
, 
dyn_moduÀ
)) {

2606 
	`lﬂded_moduÀ_±r_ªmove
(&
pH™dÀ
->
DLIMP_lﬂded_obje˘s
,

2607 
dyn_moduÀ
->
lﬂded_moduÀ
);

2608 
	`dñëe_DLIMP_Dy«mic_ModuÀ
(
h™dÀ
, &
dyn_moduÀ
);

2615 i‡(
dyn_moduÀ
->
fhdr
.
e_ty≥
 =
ET_EXEC
)

2616 
	`execuã_moduÀ_¥e_öôüliz©i⁄
(
h™dÀ
, 
dyn_moduÀ
);

2623 
	`AL_≠≥nd
(&
pH™dÀ
->
DLIMP_moduÀ_dïídícy_li°
, &
dyn_moduÀ
->
«me
);

2630 
	`dy«mic_moduÀ_±r_push
(&
pH™dÀ
->
DLIMP_dïídícy_°ack
, 
dyn_moduÀ
);

2636 i‡(
	`is_dsbt_moduÀ
(
dyn_moduÀ
) &&

2637 !
	`DLIF_ªgi°î_dsbt_ödex_ªque°
(
h™dÀ
,

2638 
dyn_moduÀ
->
«me
,

2639 
dyn_moduÀ
->
lﬂded_moduÀ
->
fûe_h™dÀ
,

2640 
dyn_moduÀ
->
dsbt_ödex
)) {

2641 
	`dy«mic_moduÀ_±r_p›
(&
pH™dÀ
->
DLIMP_dïídícy_°ack
);

2642 
	`lﬂded_moduÀ_±r_ªmove
(&
pH™dÀ
->
DLIMP_lﬂded_obje˘s
,

2643 
dyn_moduÀ
->
lﬂded_moduÀ
);

2644 
	`dñëe_DLIMP_Dy«mic_ModuÀ
(
h™dÀ
, &
dyn_moduÀ
);

2653 i‡(!
	`dlﬂd_™d_Æloˇã_dïídícõs
(
h™dÀ
, 
dyn_moduÀ
)) {

2654 
	`dy«mic_moduÀ_±r_p›
(&
pH™dÀ
->
DLIMP_dïídícy_°ack
);

2655 
	`lﬂded_moduÀ_±r_ªmove
(&
pH™dÀ
->
DLIMP_lﬂded_obje˘s
,

2656 
dyn_moduÀ
->
lﬂded_moduÀ
);

2657 
	`dñëe_DLIMP_Dy«mic_ModuÀ
(
h™dÀ
, &
dyn_moduÀ
);

2665 
pH™dÀ
->
DLIMP_moduÀ_dïídícy_li°
.
size
--;

2671 
	`DLSYM_lookup_loˇl_symèb
("__c_¨gs__", 
dyn_moduÀ
->
symèb
,

2672 
dyn_moduÀ
->
symnum
,

2673 (
Elf32_Addr
 *)&
dyn_moduÀ
->
c_¨gs
);

2676  
	`ªloˇã_dïídícy_gøph_moduÀs
(
h™dÀ
, 
fd
, 
dyn_moduÀ
);

2677 
	}
}

2679 
BOOL
 
	$DLOAD_gë_íåy_«mes_öfo
(
DLOAD_HANDLE
 
h™dÀ
,

2680 
uöt32_t
 
fûe_h™dÀ
,

2681 
öt32_t
 *
íåy_±_˙t
,

2682 
öt32_t
 *
íåy_±_max_«me_Àn
)

2689 
LOADER_OBJECT
 *
pH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

2690 
lﬂded_moduÀ_±r_Queue_Node
* 
±r
;

2691 
±r
 = 
pH™dÀ
->
DLIMP_lﬂded_obje˘s
.
‰⁄t_±r
;

2692 
±r
 !
NULL
;

2693 
±r
 =Öå->
√xt_±r
)

2695 i‡(
±r
->
vÆue
->
fûe_h™dÀ
 == file_handle)

2697 
DLIMP_Lﬂded_ModuÀ
 *
moduÀ
 = 
±r
->
vÆue
;

2698 
Elf32_Sym
 *
symèb
;

2699 
i
;

2705 
symèb
 = (
Elf32_Sym
*)
moduÀ
->
gsymèb
;

2706 *
íåy_±_˙t
 = 
moduÀ
->
gsymnum
;

2707 *
íåy_±_max_«me_Àn
 = 0;

2708 
i
 = 0; i < 
moduÀ
->
gsymnum
; i++)

2710 c⁄° *
sym_«me
 = (c⁄° *)
symèb
[
i
].
°_«me
;

2712 i‡((
	`°æí
(
sym_«me
Ë+ 1Ë> *
íåy_±_max_«me_Àn
)

2713 *
íåy_±_max_«me_Àn
 = 
	`°æí
(
sym_«me
) + 1;

2716  
TRUE
;

2723  
FALSE
;

2724 
	}
}

2737 
BOOL
 
	$DLOAD_gë_íåy_«mes
(
DLOAD_HANDLE
 
h™dÀ
,

2738 
uöt32_t
 
fûe_h™dÀ
,

2739 
öt32_t
 *
íåy_±_˙t
,

2740 ***
íåy_±_«mes
)

2747 **
«mes
;

2748 
LOADER_OBJECT
 *
pH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

2749 
lﬂded_moduÀ_±r_Queue_Node
* 
±r
;

2750 
±r
 = 
pH™dÀ
->
DLIMP_lﬂded_obje˘s
.
‰⁄t_±r
;

2751 
±r
 !
NULL
;

2752 
±r
 =Öå->
√xt_±r
)

2754 i‡(
±r
->
vÆue
->
fûe_h™dÀ
 == file_handle)

2756 
DLIMP_Lﬂded_ModuÀ
 *
moduÀ
 = 
±r
->
vÆue
;

2757 
Elf32_Sym
 *
symèb
;

2758 
i
;

2764 
symèb
 = (
Elf32_Sym
*)
moduÀ
->
gsymèb
;

2765 i‡(*
íåy_±_˙t
 < 
moduÀ
->
gsymnum
) {

2766 
	`DLIF_îr‹
(
DLET_MEMORY
, "Thereáre %dÉntryÖoints, "

2768 
moduÀ
->
gsymnum
,*
íåy_±_˙t
);

2769  
FALSE
;

2772 
«mes
 = *
íåy_±_«mes
;

2773 
i
 = 0; i < 
moduÀ
->
gsymnum
; i++)

2775 c⁄° *
sym_«me
 = (c⁄° *)
symèb
[
i
].
°_«me
;

2776 
	`°r˝y
(
«mes
[
i
],
sym_«me
);

2779  
TRUE
;

2786  
FALSE
;

2787 
	}
}

2796 
BOOL
 
	$DLOAD_gë_íåy_poöt
(
DLOAD_HANDLE
 
h™dÀ
, 
uöt32_t
 
fûe_h™dÀ
,

2797 
TARGET_ADDRESS
 *
sym_vÆ
)

2804 
lﬂded_moduÀ_±r_Queue_Node
* 
±r
;

2805 
LOADER_OBJECT
 *
pH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

2806 
±r
 = 
pH™dÀ
->
DLIMP_lﬂded_obje˘s
.
‰⁄t_±r
;

2807 
±r
 !
NULL
;

2808 
±r
 =Öå->
√xt_±r
)

2809 i‡(
±r
->
vÆue
->
fûe_h™dÀ
 == file_handle)

2811 *
sym_vÆ
 = (
TARGET_ADDRESS
)(
±r
->
vÆue
->
íåy_poöt
);

2812  
TRUE
;

2818  
FALSE
;

2819 
	}
}

2829 
BOOL
 
	$DLOAD_quîy_symbﬁ
(
DLOAD_HANDLE
 
h™dÀ
,

2830 
uöt32_t
 
fûe_h™dÀ
,

2831 c⁄° *
sym_«me
,

2832 
TARGET_ADDRESS
 *
sym_vÆ
)

2839 
lﬂded_moduÀ_±r_Queue_Node
* 
±r
;

2840 
LOADER_OBJECT
 *
pH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

2841 
±r
 = 
pH™dÀ
->
DLIMP_lﬂded_obje˘s
.
‰⁄t_±r
;

2842 
±r
 !
NULL
;

2843 
±r
 =Öå->
√xt_±r
)

2845 i‡(
±r
->
vÆue
->
fûe_h™dÀ
 == file_handle)

2847 
DLIMP_Lﬂded_ModuÀ
 *
moduÀ
 = 
±r
->
vÆue
;

2848 
Elf32_Sym
 *
symèb
;

2849 
i
;

2854 
symèb
 = (
Elf32_Sym
*)
moduÀ
->
gsymèb
;

2855 
i
=0; i < 
moduÀ
->
gsymnum
; i++)

2857 i‡(!
	`°rcmp
(
sym_«me
, (c⁄° *)
symèb
[
i
].
°_«me
))

2859 *
sym_vÆ
 = (
TARGET_ADDRESS
Ë
symèb
[
i
].
°_vÆue
;

2860  
TRUE
;

2869  
FALSE
;

2870 
	}
}

2881 
DLIMP_Lﬂded_ModuÀ
 *
	$u∆ök_lﬂded_moduÀ
(
DLOAD_HANDLE
 
h™dÀ
,

2882 
lﬂded_moduÀ_±r_Queue_Node
 *
back_±r
,

2883 
lﬂded_moduÀ_±r_Queue_Node
 *
lm_node
)

2885 
DLIMP_Lﬂded_ModuÀ
 *
lﬂded_moduÀ
 = 
lm_node
->
vÆue
;

2886 
LOADER_OBJECT
 *
pH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

2887 
	`lﬂded_moduÀ_±r_ªmove
(&
pH™dÀ
->
DLIMP_lﬂded_obje˘s
, 
lm_node
->
vÆue
);

2888  
lﬂded_moduÀ
;

2889 
	}
}

2899 
	$execuã_moduÀ_ãrmö©i⁄
(
DLOAD_HANDLE
 
h™dÀ
,

2900 
DLIMP_Lﬂded_ModuÀ
 *
lﬂded_moduÀ
)

2902 
LOADER_OBJECT
 *
pH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

2909 i‡(
lﬂded_moduÀ
->
föi_¨øysz
 != 0)

2914 
öt32_t
 
i
;

2915 
öt32_t
 
num_föi_f˙s
 =

2916 
lﬂded_moduÀ
->
föi_¨øysz
/(
TARGET_ADDRESS
);

2917 
TARGET_ADDRESS
 *
föi_¨øy_buf
 = (TARGET_ADDRESS *)

2918 
	`DLIF_mÆloc
(
lﬂded_moduÀ
->
föi_¨øysz
);

2919 if(
föi_¨øy_buf
) {

2920 
	`DLIF_ªad
(
pH™dÀ
->
˛õ¡_h™dÀ
, 
föi_¨øy_buf
, 1,

2921 
lﬂded_moduÀ
->
föi_¨øysz
,

2922 (
TARGET_ADDRESS
)
lﬂded_moduÀ
->
föi_¨øy
);

2929 
i
 = 
num_föi_f˙s
 - 1; i >= 0; i--)

2930 
	`DLIF_execuã
(
pH™dÀ
->
˛õ¡_h™dÀ
,

2931 (
TARGET_ADDRESS
)(
föi_¨øy_buf
[
i
]));

2933 
	`DLIF_‰ì
(
föi_¨øy_buf
);

2942 i‡(
lﬂded_moduÀ
->
föi
 !(
Elf32_Addr
)
NULL
)

2943 
	`DLIF_execuã
(
pH™dÀ
->
˛õ¡_h™dÀ
,

2944 (
TARGET_ADDRESS
)
lﬂded_moduÀ
->
föi
);

2945 
	}
}

2955 
	$ªmove_lﬂded_moduÀ
(
DLOAD_HANDLE
 
h™dÀ
,

2956 
lﬂded_moduÀ_±r_Queue_Node
 *
lm_node
)

2958 
DLIMP_Lﬂded_ModuÀ
 *
lm_obje˘
 = 
NULL
;

2959 
lﬂded_moduÀ_±r_Queue_Node
 *
back_±r
 = 
NULL
;

2960 
LOADER_OBJECT
 *
pH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

2962 i‡(
lm_node
 !
pH™dÀ
->
DLIMP_lﬂded_obje˘s
.
‰⁄t_±r
)

2963 
back_±r
 = 
pH™dÀ
->
DLIMP_lﬂded_obje˘s
.
‰⁄t_±r
;

2964 
back_±r
->
√xt_±r
 !
lm_node
;

2965 
back_±r
 = back_±r->
√xt_±r
);

2967 
lm_obje˘
 = 
	`u∆ök_lﬂded_moduÀ
(
h™dÀ
, 
back_±r
, 
lm_node
);

2969 
	`dñëe_DLIMP_Lﬂded_ModuÀ
(
h™dÀ
, &
lm_obje˘
);

2970 
	}
}

2986 
BOOL
 
	$DLOAD_u∆ﬂd
(
DLOAD_HANDLE
 
h™dÀ
, 
uöt32_t
 
fûe_h™dÀ
)

2988 
lﬂded_moduÀ_±r_Queue_Node
* 
lm_node
;

2989 
LOADER_OBJECT
 *
pH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

2991 
lm_node
 = 
pH™dÀ
->
DLIMP_lﬂded_obje˘s
.
‰⁄t_±r
;Üm_nodê!
NULL
;

2992 
lm_node
 =Üm_node->
√xt_±r
)

2994 i‡(
lm_node
->
vÆue
->
fûe_h™dÀ
 == file_handle)

2996 --
lm_node
->
vÆue
->
u£_cou¡
;

2997 i‡(
lm_node
->
vÆue
->
u£_cou¡
 == 0)

2999 
DLIMP_Lﬂded_ModuÀ
 *
lﬂded_moduÀ
 =

3000 (
DLIMP_Lﬂded_ModuÀ
 *)
lm_node
->
vÆue
;

3001 
j
;

3002 *
dï_fûe_h™dÀs
;

3011 
	`execuã_moduÀ_ãrmö©i⁄
(
h™dÀ
, 
lﬂded_moduÀ
);

3018 
dï_fûe_h™dÀs
 = (*)(
lﬂded_moduÀ
->
dïídícõs
.
buf
);

3019 
j
 = 0; j < 
lﬂded_moduÀ
->
dïídícõs
.
size
; j++) {

3020 
	`DLIF_u∆ﬂd_dïídít
(
pH™dÀ
->
˛õ¡_h™dÀ
,

3021 
dï_fûe_h™dÀs
[
j
]);

3033 
	`ªmove_lﬂded_moduÀ
(
h™dÀ
, 
lm_node
);

3042 i‡(
pH™dÀ
->
DLIMP_lﬂded_obje˘s
.
‰⁄t_±r
 =
NULL
)

3044 
pH™dÀ
->
DLOAD_TARGET_MACHINE
 = 
DLOAD_DEFAULT_TARGET_MACHINE
;

3047  
TRUE
;

3052  
FALSE
;

3053 
	}
}

3062 
öt32_t
 
	$DLOAD_lﬂd_symbﬁs
(
DLOAD_HANDLE
 
h™dÀ
, 
LOADER_FILE_DESC
 *
fd
)

3064 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
 = 
NULL
;

3065 
DLIMP_Lﬂded_ModuÀ
 *
lﬂded_moduÀ
 = 
NULL
;

3066 
LOADER_OBJECT
 *
pH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

3071 i‡(!
fd
)

3073 
	`DLIF_îr‹
(
DLET_FILE
, "Missing file specification.\n");

3077 
dyn_moduÀ
 = 
	`√w_DLIMP_Dy«mic_ModuÀ
(
fd
);

3082 i‡(!
dyn_moduÀ
)

3088 
dyn_moduÀ
->
¨gc
 = 0;

3089 
dyn_moduÀ
->
¨gv
 = 
NULL
;

3094 i‡(!
	`dlﬂd_hódîs
(
h™dÀ
, 
fd
, 
dyn_moduÀ
)) {

3095 
	`dñëe_DLIMP_Dy«mic_ModuÀ
(
h™dÀ
, &
dyn_moduÀ
);

3104 i‡(!
	`dlﬂd_dy«mic_£gmít
(
h™dÀ
, 
fd
, 
dyn_moduÀ
)) {

3105 
	`dñëe_DLIMP_Dy«mic_ModuÀ
(
h™dÀ
, &
dyn_moduÀ
);

3112 i‡(!
	`is_vÆid_ñf_obje˘_fûe
(
fd
, 
dyn_moduÀ
))

3114 
	`DLIF_îr‹
(
DLET_FILE
, "AttemptÅoÜoad invalid ELF file, '%s'.\n",

3115 
dyn_moduÀ
->
«me
);

3116 
	`dñëe_DLIMP_Dy«mic_ModuÀ
(
h™dÀ
, &
dyn_moduÀ
);

3125 
	`öôülize_lﬂded_moduÀ
(
h™dÀ
, 
dyn_moduÀ
);

3133 
	`lﬂded_moduÀ_±r_íqueue
(&
pH™dÀ
->
DLIMP_lﬂded_obje˘s
,

3134 
dyn_moduÀ
->
lﬂded_moduÀ
);

3140 i‡(
	`is_dsbt_moduÀ
(
dyn_moduÀ
))

3142 
	`dy«mic_moduÀ_±r_push
(&
pH™dÀ
->
DLIMP_dïídícy_°ack
, 
dyn_moduÀ
);

3143 
	`DLIF_ªgi°î_dsbt_ödex_ªque°
(
h™dÀ
,

3144 
dyn_moduÀ
->
«me
,

3145 
dyn_moduÀ
->
lﬂded_moduÀ
->
fûe_h™dÀ
,

3146 
dyn_moduÀ
->
dsbt_ödex
);

3147 
	`DLIF_assign_dsbt_ödi˚s
();

3148 
	`DLIF_upd©e_Æl_dsbts
();

3149 
	`dy«mic_moduÀ_±r_p›
(&
pH™dÀ
->
DLIMP_dïídícy_°ack
);

3158 
lﬂded_moduÀ
 = 
	`dëach_lﬂded_moduÀ
(
dyn_moduÀ
);

3159 if(
lﬂded_moduÀ
 =
NULL
)

3161 
	`dñëe_DLIMP_Dy«mic_ModuÀ
(
h™dÀ
, &
dyn_moduÀ
);

3164 
	`dñëe_DLIMP_Dy«mic_ModuÀ
(
h™dÀ
, &
dyn_moduÀ
);

3169  
lﬂded_moduÀ
->
fûe_h™dÀ
;

3170 
	}
}

3185 
uöt32_t
 
	$DLOAD_gë_dsbt_size
(
DLOAD_HANDLE
 
h™dÀ
, 
öt32_t
 
fûe_h™dÀ
)

3187 
dy«mic_moduÀ_±r_Sèck_Node
 *
±r
;

3188 
LOADER_OBJECT
 *
pH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

3189 
±r
 = 
pH™dÀ
->
DLIMP_dïídícy_°ack
.
t›_±r
;

3190 
±r
 !
NULL
;

3191 
±r
 =Öå->
√xt_±r
)

3193 
DLIMP_Dy«mic_ModuÀ
 *
dmp
 = 
±r
->
vÆue
;

3194 i‡(
dmp
->
lﬂded_moduÀ
->
fûe_h™dÀ
 == file_handle)

3195  
dmp
->
dsbt_size
;

3199 
	}
}

3207 
BOOL
 
	$DLOAD_gë_°©ic_ba£
(
DLOAD_HANDLE
 
h™dÀ
, 
öt32_t
 
fûe_h™dÀ
,

3208 
TARGET_ADDRESS
 *
°©ic_ba£
)

3210 
dy«mic_moduÀ_±r_Sèck_Node
 *
±r
;

3211 
LOADER_OBJECT
 *
pH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

3212 
±r
 = 
pH™dÀ
->
DLIMP_dïídícy_°ack
.
t›_±r
;

3213 
±r
 !
NULL
;

3214 
±r
 =Öå->
√xt_±r
)

3216 
DLIMP_Dy«mic_ModuÀ
 *
dmp
 = 
±r
->
vÆue
;

3217 i‡(
dmp
->
lﬂded_moduÀ
->
fûe_h™dÀ
 == file_handle)

3219 
BOOL
 
°©
 = 
	`DLSYM_lookup_loˇl_symèb
("__TI_STATIC_BASE",

3220 
dmp
->
symèb
, dmp->
symnum
,

3221 (
Elf32_Addr
 *)
°©ic_ba£
);

3222  
°©
;

3226  
FALSE
;

3227 
	}
}

3235 
BOOL
 
	$DLOAD_gë_dsbt_ba£
(
DLOAD_HANDLE
 
h™dÀ
, 
öt32_t
 
fûe_h™dÀ
,

3236 
TARGET_ADDRESS
 *
dsbt_ba£
)

3238 
dy«mic_moduÀ_±r_Sèck_Node
 *
±r
;

3239 
LOADER_OBJECT
 *
pH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

3240 
±r
 = 
pH™dÀ
->
DLIMP_dïídícy_°ack
.
t›_±r
;

3241 
±r
 !
NULL
;

3242 
±r
 =Öå->
√xt_±r
)

3244 
DLIMP_Dy«mic_ModuÀ
 *
dmp
 = 
±r
->
vÆue
;

3245 i‡(
dmp
->
lﬂded_moduÀ
->
fûe_h™dÀ
 == file_handle)

3247 *
dsbt_ba£
 =

3248 (
TARGET_ADDRESS
)
dmp
->
dy¡ab
[dmp->
dsbt_ba£_ègidx
].
d_un
.
d_±r
;

3249  
TRUE
;

3253  
FALSE
;

3254 
	}
}

	@utils/elfload/dload_endian.c

40 
	~"dlﬂd_ídün.h
"

46 
	$DLIMP_gë_ídün
()

48 
öt32_t
 
x
 = 0x1;

50 i‡(*((
öt16_t
*)(&
x
))Ë 
ELFDATA2LSB
;

52  
ELFDATA2MSB
;

53 
	}
}

58 
	$DLIMP_ch™ge_ídün32
(
öt32_t
* 
to_ch™ge
)

60 
öt32_t
 
ãmp
 = 0;

61 
ãmp
 +(*
to_ch™ge
 & 0x000000FF) << 24;

62 
ãmp
 +(*
to_ch™ge
 & 0x0000FF00) << 8;

63 
ãmp
 +(*
to_ch™ge
 & 0x00FF0000) >> 8;

64 
ãmp
 +(*
to_ch™ge
 & 0xFF000000) >> 24;

65 *
to_ch™ge
 = 
ãmp
;

66 
	}
}

71 
	$DLIMP_ch™ge_ídün16
(
öt16_t
* 
to_ch™ge
)

73 
öt16_t
 
ãmp
 = 0;

74 
ãmp
 +(*
to_ch™ge
 & 0x00FF) << 8;

75 
ãmp
 +(*
to_ch™ge
 & 0xFF00) >> 8;

76 *
to_ch™ge
 = 
ãmp
;

77 
	}
}

82 
	$DLIMP_ch™ge_ehdr_ídün
(
Elf32_Ehdr
* 
ehdr
)

84 
	`DLIMP_ch™ge_ídün16
((
öt16_t
*)(&
ehdr
->
e_ty≥
));

85 
	`DLIMP_ch™ge_ídün16
((
öt16_t
*)(&
ehdr
->
e_machöe
));

86 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(&
ehdr
->
e_vîsi⁄
));

87 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(&
ehdr
->
e_íåy
));

88 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(&
ehdr
->
e_phoff
));

89 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(&
ehdr
->
e_shoff
));

90 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(&
ehdr
->
e_Êags
));

91 
	`DLIMP_ch™ge_ídün16
((
öt16_t
*)(&
ehdr
->
e_ehsize
));

92 
	`DLIMP_ch™ge_ídün16
((
öt16_t
*)(&
ehdr
->
e_phítsize
));

93 
	`DLIMP_ch™ge_ídün16
((
öt16_t
*)(&
ehdr
->
e_phnum
));

94 
	`DLIMP_ch™ge_ídün16
((
öt16_t
*)(&
ehdr
->
e_shítsize
));

95 
	`DLIMP_ch™ge_ídün16
((
öt16_t
*)(&
ehdr
->
e_shnum
));

96 
	`DLIMP_ch™ge_ídün16
((
öt16_t
*)(&
ehdr
->
e_sh°∫dx
));

97 
	}
}

102 
	$DLIMP_ch™ge_phdr_ídün
(
Elf32_Phdr
* 
phdr
)

104 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(&
phdr
->
p_ty≥
));

105 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(&
phdr
->
p_off£t
));

106 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(&
phdr
->
p_vaddr
));

107 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(&
phdr
->
p_∑ddr
));

108 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(&
phdr
->
p_fûesz
));

109 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(&
phdr
->
p_memsz
));

110 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(&
phdr
->
p_Êags
));

111 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(&
phdr
->
p_Æign
));

112 
	}
}

117 
	$DLIMP_ch™ge_dy√¡_ídün
(
Elf32_Dyn
* 
dyn
)

119 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(&
dyn
->
d_èg
));

120 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(&
dyn
->
d_un
.
d_vÆ
));

121 
	}
}

126 
	$DLIMP_ch™ge_sym_ídün
(
Elf32_Sym
* 
sym
)

128 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(&
sym
->
°_«me
));

129 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(&
sym
->
°_vÆue
));

130 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(&
sym
->
°_size
));

131 
	`DLIMP_ch™ge_ídün16
((
öt16_t
*)(&
sym
->
°_shndx
));

132 
	}
}

137 
	$DLIMP_ch™ge_ªœ_ídün
(
Elf32_Rña
* 
ø
)

139 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(&
ø
->
r_off£t
));

140 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(&
ø
->
r_öfo
));

141 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(&
ø
->
r_addíd
));

142 
	}
}

147 
	$DLIMP_ch™ge_ªl_ídün
(
Elf32_Rñ
* 
r
)

149 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(&
r
->
r_off£t
));

150 
	`DLIMP_ch™ge_ídün32
((
öt32_t
*)(&
r
->
r_öfo
));

151 
	}
}

	@utils/elfload/dlw_client.c

49 
	~<°dio.h
>

50 
	~<°dlib.h
>

51 
	~<°d¨g.h
>

52 
	~<°rög.h
>

54 
	~<sys/ty≥s.h
>

55 
	~<sys/°©.h
>

56 
	~<uni°d.h
>

57 
	~<dlﬂd_≠i.h
>

59 
	~"../Ωrcfmt.h
"

61 
FILE
 * 
out_fûe
;

62 
èg_addr
[];

63 
èg_size
[];

64 *
èg_«me
[];

65 
num_ègs
;

71 
	$fö£π
(* 
√wD©a
, 
numByãs
, 
FILE
 * 
Â
)

73 
°©
 
°©Buf
;

74 
off_t
 
size
;

75 * 
d©a
;

76 
n
;

79 
	`f£ek
(
Â
, 0, 
SEEK_SET
);

80 
	`f°©
(
	`fûío
(
Â
), &
°©Buf
);

81 
size
 = 
°©Buf
.
°_size
;

83 
d©a
 = 
	`mÆloc
(
size
);

84 
	`‰ód
(
d©a
, 1, 
size
, 
Â
);

87 
	`f£ek
(
Â
, 0, 
SEEK_SET
);

90 
n
 = 
	`fwrôe
(
√wD©a
, 1, 
numByãs
, 
Â
);

91 i‡(!
n
 || 
	`„º‹
(
Â
)) {

92 
	`≥º‹
("first fwrite: ");

96 
n
 = 
	`fwrôe
(
d©a
, 1, 
size
, 
Â
);

97 i‡(!
n
 || 
	`„º‹
(
Â
)) {

98 
	`≥º‹
("second fwrite: ");

101 
	`f£ek
(
Â
, 0, 
SEEK_END
);

103 
	`‰ì
(
d©a
);

105  
size
 + 
numByãs
;

106 
	}
}

108 
	$∑tchup_ªsour˚s
(
Ωroc_fw_ªsour˚
 *
ªs
,

109 
ªs_size
)

111 
i
;

112 
Ωroc_fw_ªsour˚
 *
ªs_íd
;

114 
	`¥ötf
("ªsour˚ size: %d\n", (
Ωroc_fw_ªsour˚
));

116 
ªs_íd
 = (
Ωroc_fw_ªsour˚
 *)(()
ªs
 + 
ªs_size
);

118 
ªs
 < 
ªs_íd
) {

119 
	`¥ötf
("resource: %d, da: 0x%llx,Öa: 0x%llx,Üen: 0x%8x,Çame: %s\n",

120 
ªs
->
ty≥
,Ñes->
da
,Ñes->
∑
,Ñes->
Àn
,Ñes->
«me
);

121 
ªs
->
ty≥
) {

122 
RSC_TRACE
:

123 
	`¥ötf
("found TRACEÑesource,Üooking for correspondingÅag...\n");

125 
i
 = 0; i < 
num_ègs
; i++) {

126 i‡(!
	`°∫cmp
(
èg_«me
[
i
], "trace", 5)) {

127 i‡(
ªs
->
da
 =
	`©oi
(&
èg_«me
[
i
][5])) {

128 
	`¥ötf
("...foundÅag %s\n", 
èg_«me
[
i
]);

129 
	`¥ötf
("patchingáddress:0x%xándÜength 0x%x\n",

130 
èg_addr
[
i
], 
èg_size
[i]);

131 
ªs
->
da
 = 
èg_addr
[
i
];

132 
ªs
->
Àn
 = 
èg_size
[
i
];

138 i‡(
i
 =
num_ègs
) {

139 
	`¥ötf
("...noÅag found, ignoringÑesource\n");

143 
RSC_CRASHDUMP
:

144 
	`¥ötf
("found CRASHDUMPÑesource,Üooking for corresponding "

147 
i
 = 0; i < 
num_ègs
; i++) {

148 i‡(!
	`°∫cmp
(
èg_«me
[
i
], "errbuf", 6)) {

149 i‡(
ªs
->
da
 =
	`©oi
(&
èg_«me
[
i
][6])) {

150 
	`¥ötf
("...foundÅag %s\n", 
èg_«me
[
i
]);

151 
	`¥ötf
("patchingáddress 0x%xándÜength 0x0%x\n",

152 
èg_addr
[
i
], 
èg_size
[i]);

153 
ªs
->
da
 = 
èg_addr
[
i
];

154 
ªs
->
Àn
 = 
èg_size
[
i
];

160 i‡(
i
 =
num_ègs
) {

161 
	`¥ötf
("...noÅag found, ignoringÑesource\n");

165 
RSC_BOOTADDR
:

166 
	`¥ötf
("found ENTRYPOINTÑesource,Üooking for correspondingÅag...\n");

168 
i
 = 0; i < 
num_ègs
; i++) {

169 i‡(!
	`°∫cmp
(
èg_«me
[
i
], "entry", 5)) {

170 i‡(
ªs
->
da
 =
	`©oi
(&
èg_«me
[
i
][5])) {

171 
	`¥ötf
("...foundÅag %s\n", 
èg_«me
[
i
]);

172 
	`¥ötf
("∑tchögáddªs†0x%x\n", 
èg_addr
[
i
]);

173 
ªs
->
da
 = 
èg_addr
[
i
];

179 i‡(
i
 =
num_ègs
) {

180 
	`¥ötf
("...noÅag found, ignoringÑesource\n");

184 
RSC_CARVEOUT
:

185 
RSC_DEVMEM
:

186 
RSC_IRQ
:

187 
RSC_DEVICE
:

188 
	`¥ötf
("found M/I/D/SÑesource,ÇothingÅo do\n");

190 
RSC_SUSPENDADDR
:

191 
	`¥ötf
("found SUSPADDRÑesource,Üooking for correspondingÅag...\n");

193 
i
 = 0; i < 
num_ègs
; i++) {

194 i‡(!
	`°∫cmp
(
èg_«me
[
i
], "susp", 4)) {

195 i‡(
ªs
->
da
 =
	`©oi
(&
èg_«me
[
i
][4])) {

196 
	`¥ötf
("...foundÅag %s\n", 
èg_«me
[
i
]);

197 
	`¥ötf
("∑tchögáddªs†0x%x\n", 
èg_addr
[
i
]);

198 
ªs
->
da
 = 
èg_addr
[
i
];

204 i‡(
i
 =
num_ègs
) {

205 
	`¥ötf
("...noÅag found, ignoringÑesource\n");

209 
	`Ârötf
(
°dîr
, "unknow¿ªsour˚Åy≥ %d\n", 
ªs
->
ty≥
);

212 
ªs
++;

214 
	}
}

243 
BOOL
 
	$DLIF_c›y
(* 
˛õ¡_h™dÀ
, 
DLOAD_MEMORY_REQUEST
* 
èrg_ªq
)

245 
DLOAD_MEMORY_SEGMENT
* 
obj_desc
 = 
èrg_ªq
->
£gmít
;

246 
FILE
 * 
f
 = 
èrg_ªq
->
Â
;

247 
d°_addr
 = 0;

248 
Ωroc_fw_£˘i⁄
 * 
fw£˘
;

249 * 
buf
;

250 * 
fwbuf
;

251 
buf_size
;

252 
fwbuf_size
;

253 
ty≥
;

254 
i
;

256 i‡(
obj_desc
->
objsz_ö_byãs
 == 0) {

257 
	`¥ötf
("skùpögÉm±y se˘i⁄áà%p\n", 
obj_desc
->
èrgë_addªss
);

258  
TRUE
;

261 
d°_addr
 = ()
obj_desc
->
èrgë_addªss
;

264 
buf_size
 = (
obj_desc
->
objsz_ö_byãs
 + 3) & ~0x3;

265 
fwbuf_size
 = 
buf_size
 + 16;

266 
fwbuf
 = 
	`ˇŒoc
(4, 
fwbuf_size
 / 4);

267 
buf
 = 
fwbuf
 + 16;

268 
	`f£ek
(
f
, 
èrg_ªq
->
off£t
, 
SEEK_SET
);

269 
	`‰ód
(
buf
, 
obj_desc
->
objsz_ö_byãs
, 1, 
f
);

271 
ty≥
 = 
FW_DATA
;

272 
i
 = 0; i < 
num_ègs
; i++) {

273 
ty≥
 = 
FW_DATA
;

274 i‡(
d°_addr
 =
èg_addr
[
i
]) {

275 
	`¥ötf
(" matched destinationáddr w/ specifiedÅagáddr\n");

276 i‡(!
	`°rcmp
(
èg_«me
[
i
], "restab")) {

277 
	`¥ötf
(" found 'restab' section\n");

278 
ty≥
 = 
FW_RESOURCE
;

279 
	`∑tchup_ªsour˚s
((
Ωroc_fw_ªsour˚
 *)
buf
, 
buf_size
);

282 i‡(!
	`°rcmp
(
èg_«me
[
i
], "text")) {

283 
	`¥ötf
(" found 'text' section\n");

284 
ty≥
 = 
FW_TEXT
;

287 i‡(!
	`°rcmp
(
èg_«me
[
i
], "data")) {

288 
	`¥ötf
(" found 'data' section\n");

289 
ty≥
 = 
FW_DATA
;

295 
fw£˘
 = (
Ωroc_fw_£˘i⁄
 *)
fwbuf
;

297 
fw£˘
->
ty≥
 =Åype;

298 
fw£˘
->
da
 = 
d°_addr
;

299 
fw£˘
->
Àn
 = 
buf_size
;

300 i‡(
ty≥
 =
FW_RESOURCE
) {

301 
	`fö£π
(
fwbuf
, 
fwbuf_size
, 
out_fûe
);

304 
	`fwrôe
(
fwbuf
, 1, 
fwbuf_size
, 
out_fûe
);

307 
	`‰ì
(
fwbuf
);

310 
	}
}

333 
	$DLIF_f£ek
(
LOADER_FILE_DESC
 *
°ªam
, 
öt32_t
 
off£t
, 
‹igö
)

335  
	`f£ek
(
°ªam
, 
off£t
, 
‹igö
);

336 
	}
}

345 
öt32_t
 
	$DLIF_·ñl
(
LOADER_FILE_DESC
 *
°ªam
)

347  
	`·ñl
(
°ªam
);

348 
	}
}

358 
size_t
 
	$DLIF_‰ód
(*
±r
, 
size_t
 
size
, size_à
nmemb
,

359 
LOADER_FILE_DESC
 *
°ªam
)

361  
	`‰ód
(
±r
, 
size
, 
nmemb
, 
°ªam
);

362 
	}
}

372 
	$DLIF_f˛o£
(
LOADER_FILE_DESC
 *
fd
)

374  
	`f˛o£
(
fd
);

375 
	}
}

396 * 
	$DLIF_mÆloc
(
size_t
 
size
)

398  
	`mÆloc
(
size
);

399 
	}
}

407 
	$DLIF_‰ì
(* 
±r
)

409 
	`‰ì
(
±r
);

410 
	}
}

432 
	$DLIF_lﬂd_dïídít
(* 
˛õ¡_h™dÀ
, c⁄° * 
so_«me
)

434 
	`¥ötf
("%s: u√x≥˘ed cÆl\n", 
__func__
);

436 
	}
}

445 
	$DLIF_u∆ﬂd_dïídít
(* 
˛õ¡_h™dÀ
, 
uöt32_t
 
fûe_h™dÀ
)

447 
	`¥ötf
("%s: u√x≥˘ed cÆl\n", 
__func__
);

448 
	}
}

454 
	$DLIF_w¨nög
(
LOADER_WARNING_TYPE
 
wty≥
, c⁄° *
fmt
, ...)

456 
va_li°
 
≠
;

457 
	`va_°¨t
(
≠
,
fmt
);

458 
	`¥ötf
("<< D L O A D >> WARNING: ");

459 
	`v¥ötf
(
fmt
,
≠
);

460 
	`va_íd
(
≠
);

461 
	}
}

466 
	$DLIF_îr‹
(
LOADER_ERROR_TYPE
 
ëy≥
, c⁄° *
fmt
, ...)

468 
va_li°
 
≠
;

469 
	`va_°¨t
(
≠
,
fmt
);

470 
	`¥ötf
("<< D L O A D >> ERROR: ");

471 
	`v¥ötf
(
fmt
,
≠
);

472 
	`va_íd
(
≠
);

473 
	}
}

478 
	$DLIF_åa˚
(c⁄° *
fmt
, ...)

480 
va_li°
 
≠
;

481 
	`va_°¨t
(
≠
,
fmt
);

482 
	`v¥ötf
(
fmt
,
≠
);

483 
	`va_íd
(
≠
);

484 
	}
}

499 
BOOL
 
	$DLIF_Æloˇã
(* 
˛õ¡_h™dÀ
, 
DLOAD_MEMORY_REQUEST
 *
ªq
)

504 
	}
}

514 
BOOL
 
	$DLIF_ªÀa£
(* 
˛õ¡_h™dÀ
, 
DLOAD_MEMORY_SEGMENT
* 
±r
)

516 
	`¥ötf
("%s: %p, %p\n", 
__func__
, 
˛õ¡_h™dÀ
, 
±r
);

519 
	}
}

534 
BOOL
 
	$DLIF_wrôe
(* 
˛õ¡_h™dÀ
, 
DLOAD_MEMORY_REQUEST
* 
ªq
)

539 
	}
}

547 
BOOL
 
	$DLIF_ªad
(* 
˛õ¡_h™dÀ
, *
±r
, 
size_t
 
size
, size_à
nmemb
,

548 
TARGET_ADDRESS
 
§c
)

550 
	`¥ötf
("%s: %p, %p, %d, %d, %p\n", 
__func__
, 
˛õ¡_h™dÀ
, 
±r
, 
size
, 
nmemb
, 
§c
);

553 
	}
}

563 
öt32_t
 
	$DLIF_execuã
(* 
˛õ¡_h™dÀ
, 
TARGET_ADDRESS
 
exec_addr
)

565 
	`¥ötf
("%s: %p, %p\n", 
__func__
, 
˛õ¡_h™dÀ
, 
exec_addr
);

568 
	}
}

	@utils/elfload/dlw_debug.c

43 
	~<˘y≥.h
>

44 
	~<°d¨g.h
>

45 
	~<°dio.h
>

46 
	~<°dlib.h
>

47 
	~<°rög.h
>

48 
	~"dlﬂd4430.h
"

49 
	~"AºayLi°.h
"

50 
	~"symèb.h
"

51 
	~"dlﬂd_≠i.h
"

52 
	~"utû.h
"

53 
	~"dlw_debug.h
"

54 
	~"dlw_ågmem.h
"

61 
	$TYPE_STACK_IMPLEMENTATION
(
DL_Ho°_ModuÀ_Debug
*, 
dl_debug
)

68 
	$TYPE_QUEUE_IMPLEMENTATION
(
DL_Ho°_ModuÀ_Debug
*, 
múr‹_debug_±r
)

73 #i‡
LOADER_DEBUG


74 
Boﬁ
 
debuggög_⁄
;

80 #i‡
LOADER_DEBUG
 || 
LOADER_PROFILE


81 
Boﬁ
 
¥ofûög_⁄
;

91 
	$DLDBG_add_ho°_ªc‹d
(* 
˛õ¡_h™dÀ
, c⁄° *
moduÀ_«me
)

93 
DLﬂd4430_Obje˘
 *
˛õ¡Obj
 = (DLﬂd4430_Obje˘ *)
˛õ¡_h™dÀ
;

98 
DL_Ho°_ModuÀ_Debug
 *
ho°_dbg
 =

99 (
DL_Ho°_ModuÀ_Debug
 *)
	`DLIF_mÆloc
((DL_Host_Module_Debug));

100 if(!
ho°_dbg
) {

101 #i‡
LOADER_DEBUG


102 if(
debuggög_⁄
)

103 
	`DLIF_îr‹
(
DLET_MISC
,"mÆlo¯Áûedáà%d\n", 
__LINE__
);

105 
	`exô
(1);

112 
ho°_dbg
->
moduÀ_«me
 = (*)
	`DLIF_mÆloc
(
	`°æí
(module_name) + 1);

113 if(
ho°_dbg
->
moduÀ_«me
) {

114 
	`°∫˝y
(
ho°_dbg
->
moduÀ_«me
, moduÀ_«me, 
	`°æí
(module_name));

115 
ho°_dbg
->
moduÀ_«me
[
	`°æí
(module_name)] = '\0';

117 
ho°_dbg
->
num_£gmíts
 = 0;

118 
ho°_dbg
->
£gmít_li°_hód
 =

119 
ho°_dbg
->
£gmít_li°_èû
 = 
NULL
;

127 
	`dl_debug_push
(&
˛õ¡Obj
->
dl_debug_°k
, 
ho°_dbg
);

128 
	}
}

140 
	$DLDBG_add_èrgë_ªc‹d
(* 
˛õ¡_h™dÀ
, 
h™dÀ
)

142 
i
;

143 
DLﬂd4430_Obje˘
 *
˛õ¡Obj
 = (DLﬂd4430_Obje˘ *)
˛õ¡_h™dÀ
;

144 
DL_Ho°_ModuÀ_Debug
 *
ho°_dbg
 = 
	`dl_debug_p›
(&
˛õ¡Obj
->
dl_debug_°k
);

145 
DLOAD_MEMORY_REQUEST
 
èrg_ªq
;

146 
DLOAD_MEMORY_SEGMENT
 
obj_desc
;

147 
DL_Ho°_Segmít
 *
ho°_£g
 = 
NULL
;

148 
DL_T¨gë_ModuÀ_Debug
 *
èrg_dbg
 = 
NULL
;

149 *
èrg_moduÀ_«me
 = 
NULL
;

154 
ho°_dbg
->
h™dÀ
 = handle;

161 
obj_desc
.
memsz_ö_byãs
 = (
DL_T¨gë_ModuÀ_Debug
) +

162 ((
DL_T¨gë_Segmít
Ë* (
ho°_dbg
->
num_£gmíts
 - 1)) +

163 (
	`°æí
(
ho°_dbg
->
moduÀ_«me
) + 1);

168 
èrg_ªq
.
Â
 = 
NULL
;

169 
èrg_ªq
.
Æign
 = 4;

170 
èrg_ªq
.
Êags
 = 
DLOAD_SF_ªloˇèbÀ
;

175 i‡(!
	`DLTMM_mÆloc
(
˛õ¡_h™dÀ
, &
èrg_ªq
, &
obj_desc
))

177 
	`DLIF_îr‹
(
DLET_MEMORY
,

179 
	`exô
(1);

186 
èrg_dbg
 = (
DL_T¨gë_ModuÀ_Debug
 *)
obj_desc
.
èrgë_addªss
;

187 
èrg_dbg
->
toﬁ_vîsi⁄
 = 
INIT_VERSION
;

188 
èrg_dbg
->
vîifiˇti⁄_w‹d
 = 
VERIFICATION
;

189 
èrg_dbg
->
num_£gmíts
 = 
ho°_dbg
->num_segments;

191 
ho°_£g
 = 
ho°_dbg
->
£gmít_li°_hód
, 
i
 = 0;

192 
ho°_£g
; ho°_£g = ho°_£g->
√xt_£gmít
, 
i
++)

194 
èrg_dbg
->
£gmíts
[
i
].
lﬂd_addªss
 = 
ho°_£g
->load_address;

195 
èrg_dbg
->
£gmíts
[
i
].
run_addªss
 = 
ho°_£g
->run_address;

198 i‡(
i
 !
ho°_dbg
->
num_£gmíts
)

200 
	`DLIF_îr‹
(
DLET_MISC
, "DebugÑecord segmentÜist mismatch.\n");

201 
	`exô
(1);

204 
èrg_moduÀ_«me
 = ((*)
obj_desc
.
èrgë_addªss
 +

205 (
DL_T¨gë_ModuÀ_Debug
) +

206 ((
DL_T¨gë_Segmít
) *

207 (
ho°_dbg
->
num_£gmíts
 - 1)));

209 
	`mem˝y
(
èrg_moduÀ_«me
, 
ho°_dbg
->
moduÀ_«me
,

210 
	`°æí
(
ho°_dbg
->
moduÀ_«me
) + 1);

217 
ho°_dbg
->
èrgë_addªss
 = 
obj_desc
.target_address;

218 
ho°_dbg
->
√xt_moduÀ_±r
 = (
uöt32_t
)
NULL
;

219 
ho°_dbg
->
√xt_moduÀ_size
 = 0;

226 i‡(
˛õ¡Obj
->
múr‹_debug_li°
.
size
 == 0)

228 
DL_Debug_Li°_Hódî
 *
dbg_hdr
 = (DL_Debug_Li°_Hódî *)
˛õ¡Obj
->
DLModuÀs_loc
;

229 
dbg_hdr
->
fú°_moduÀ_±r
 = (
uöt32_t
)(
obj_desc
.
èrgë_addªss
);

230 
dbg_hdr
->
fú°_moduÀ_size
 = 
obj_desc
.
memsz_ö_byãs
;

234 
DL_Ho°_ModuÀ_Debug
 *
èû_ho°_dbg
 = 
˛õ¡Obj
->
múr‹_debug_li°
.
back_±r
->
vÆue
;

235 
DL_T¨gë_ModuÀ_Debug
 *
èû_èrg_dbg
 = 
èû_ho°_dbg
->
èrgë_addªss
;

237 
èû_èrg_dbg
->
√xt_moduÀ_±r
 =

238 
èû_ho°_dbg
->
√xt_moduÀ_±r
 = (
uöt32_t
)(
obj_desc
.
èrgë_addªss
);

239 
èû_èrg_dbg
->
√xt_moduÀ_size
 =

240 
èû_ho°_dbg
->
√xt_moduÀ_size
 = 
obj_desc
.
memsz_ö_byãs
;

243 
	`múr‹_debug_±r_íqueue
(&
˛õ¡Obj
->
múr‹_debug_li°
, 
ho°_dbg
);

245 #i‡
LOADER_DEBUG


246 i‡(
debuggög_⁄
Ë
	`DLDBG_dump_múr‹_debug_li°
(
˛õ¡_h™dÀ
);

248 
	}
}

258 
	$DLDBG_rm_èrgë_ªc‹d
(* 
˛õ¡_h™dÀ
, 
h™dÀ
)

260 
DLﬂd4430_Obje˘
 *
˛õ¡Obj
 = (DLﬂd4430_Obje˘ *)
˛õ¡_h™dÀ
;

261 
múr‹_debug_±r_Queue_Node
 *
¥ev_ôr
 = 
NULL
;

262 
múr‹_debug_±r_Queue_Node
 *
ôr
 = 
˛õ¡Obj
->
múr‹_debug_li°
.
‰⁄t_±r
;

263 
DL_Ho°_ModuÀ_Debug
 *
¥ev_ho°_dbg
 = 
NULL
;

264 
DL_Ho°_ModuÀ_Debug
 *
ho°_dbg
 = 
ôr
->
vÆue
;

270 i‡(
h™dÀ
 <= 1) ;

275 ; 
ôr
; iå = iå->
√xt_±r
)

277 
ho°_dbg
 = 
ôr
->
vÆue
;

278 i‡(
ho°_dbg
->
h™dÀ
 == handle) ;

279 
¥ev_ôr
 = 
ôr
;

282 i‡(!
ôr
)

284 
	`DLIF_åa˚
("Couldn'àföd h™dÀ %d o¿debugÜi°\n", 
h™dÀ
);

295 i‡(
¥ev_ôr
)

297 
DL_T¨gë_ModuÀ_Debug
 *
¥ev_èrg_dbg
 = 
NULL
;

299 
¥ev_ho°_dbg
 = 
¥ev_ôr
->
vÆue
;

300 
¥ev_èrg_dbg
 = (
DL_T¨gë_ModuÀ_Debug
 *)
¥ev_ho°_dbg
->
èrgë_addªss
;

302 
¥ev_ho°_dbg
->
√xt_moduÀ_±r
 =

303 
¥ev_èrg_dbg
->
√xt_moduÀ_±r
 = 
ho°_dbg
->next_module_ptr;

304 
¥ev_ho°_dbg
->
√xt_moduÀ_size
 =

305 
¥ev_èrg_dbg
->
√xt_moduÀ_size
 = 
ho°_dbg
->next_module_size;

314 
DL_Debug_Li°_Hódî
 *
dbg_hdr
 = (DL_Debug_Li°_Hódî *)
˛õ¡Obj
->
DLModuÀs_loc
;

315 
dbg_hdr
->
fú°_moduÀ_±r
 = 
ho°_dbg
->
√xt_moduÀ_±r
;

316 
dbg_hdr
->
fú°_moduÀ_size
 = 
ho°_dbg
->
√xt_moduÀ_size
;

323 
	`DLTMM_‰ì
(
˛õ¡_h™dÀ
, (*)
ho°_dbg
->
èrgë_addªss
);

330 
	`múr‹_debug_±r_ªmove
(&
˛õ¡Obj
->
múr‹_debug_li°
, 
ho°_dbg
);

332 #i‡
LOADER_DEBUG


333 i‡(
debuggög_⁄
Ë
	`DLDBG_dump_múr‹_debug_li°
(
˛õ¡_h™dÀ
);

335 
	}
}

341 
	$DLDBG_add_£gmít_ªc‹d
(* 
˛õ¡_h™dÀ
, 
DLOAD_MEMORY_SEGMENT
 *
obj_desc
)

343 
DLﬂd4430_Obje˘
 *
˛õ¡Obj
 = (DLﬂd4430_Obje˘ *)
˛õ¡_h™dÀ
;

348 
DL_Ho°_ModuÀ_Debug
 *
ho°_dbg
 = 
˛õ¡Obj
->
dl_debug_°k
.
t›_±r
->
vÆue
;

353 
DL_Ho°_Segmít
 *
ho°_£g
 =

354 (
DL_Ho°_Segmít
 *)
	`DLIF_mÆloc
((DL_Host_Segment));

355 if(!
ho°_£g
) {

356 #i‡
LOADER_DEBUG


357 if(
debuggög_⁄
)

358 
	`DLIF_îr‹
(
DLET_MISC
,"mÆlo¯Áûedáà%d\n", 
__LINE__
);

360 
	`exô
(1);

366 
ho°_£g
->
lﬂd_addªss
 =

367 
ho°_£g
->
run_addªss
 = (
uöt32_t
)
obj_desc
->
èrgë_addªss
;

368 
ho°_£g
->
√xt_£gmít
 = 
NULL
;

374 i‡(
ho°_dbg
->
num_£gmíts
 == 0)

376 
ho°_dbg
->
£gmít_li°_hód
 =

377 
ho°_dbg
->
£gmít_li°_èû
 = 
ho°_£g
;

381 
ho°_dbg
->
£gmít_li°_èû
->
√xt_£gmít
 = 
ho°_£g
;

382 
ho°_dbg
->
£gmít_li°_èû
 = 
ho°_£g
;

385 
ho°_dbg
->
num_£gmíts
++;

386 
	}
}

393 
	$DLDBG_dump_múr‹_debug_li°
(* 
˛õ¡_h™dÀ
)

395 
DLﬂd4430_Obje˘
 *
˛õ¡Obj
 = (DLﬂd4430_Obje˘ *)
˛õ¡_h™dÀ
;

396 
múr‹_debug_±r_Queue_Node
 *
ôr
 = 
˛õ¡Obj
->
múr‹_debug_li°
.
‰⁄t_±r
;

398 
DL_Debug_Li°_Hódî
 *
dbg_hdr
 = (DL_Debug_Li°_Hódî *)
˛õ¡Obj
->
DLModuÀs_loc
;

399 
	`DLIF_åa˚
("DLL Võw Debug Li° Hódîáà0x%lx\n", ()
dbg_hdr
);

400 
	`DLIF_åa˚
(" first module debugÑecordát: 0x%lx\n",

401 ()
dbg_hdr
->
fú°_moduÀ_±r
);

402 
	`DLIF_åa˚
(" first module debugÑecord size: %d\n",

403 ()
dbg_hdr
->
fú°_moduÀ_size
);

405 
ôr
)

407 
i
;

408 
DL_Ho°_ModuÀ_Debug
 *
ho°_dbg
 = 
ôr
->
vÆue
;

409 
DL_Ho°_Segmít
 *
ho°_£g
 = 
NULL
;

411 
	`DLIF_åa˚
("Module Debug Record for %sát 0x%lx\n",

412 
ho°_dbg
->
moduÀ_«me
,

413 ()
ho°_dbg
->
èrgë_addªss
);

414 
	`DLIF_åa˚
("Çext module debugÑecordát: 0x%lx\n",

415 ()
ho°_dbg
->
√xt_moduÀ_±r
);

416 
	`DLIF_åa˚
("Çext module debugÑecord size: %d\n",

417 ()
ho°_dbg
->
√xt_moduÀ_size
);

419 
	`DLIF_åa˚
(" h™dÀ f‹ %†i†%d\n", 
ho°_dbg
->
moduÀ_«me
,

420 
ho°_dbg
->
h™dÀ
);

421 
	`DLIF_åa˚
(" segmíàli° f‹ %s:\n", 
ho°_dbg
->
moduÀ_«me
);

422 
i
 = 0, 
ho°_£g
 = 
ho°_dbg
->
£gmít_li°_hód
;

423 
ho°_£g
; 
i
++, ho°_£g = ho°_£g->
√xt_£gmít
)

425 
	`DLIF_åa˚
(" segment [%d]Üoadáddress: 0x%lx\n",

426 
i
, ()
ho°_£g
->
lﬂd_addªss
);

427 
	`DLIF_åa˚
(" segment [%d]Ñunáddress: 0x%lx\n",

428 
i
, ()
ho°_£g
->
run_addªss
);

431 
ôr
 = iå->
√xt_±r
;

433 
	}
}

	@utils/elfload/dlw_dsbt.c

42 
	~"Queue.h
"

43 
	~"AºayLi°.h
"

44 
	~"dlﬂd_≠i.h
"

45 
	~<°d¨g.h
>

46 
	~<°dlib.h
>

47 
	~<°rög.h
>

48 
	~"dlw_dsbt.h
"

57 
	$TYPE_QUEUE_IMPLEMENTATION
(
DSBT_Index_Reque°
*, 
dsbt_ödex_ªque°_±r
)

58 
dsbt_ödex_ªque°_±r_Queue
 
DSBT_ödex_ªque°_queue
;

65 
öt32_t
 
DSBT_fú°_avaû_ödex
 = 0;

66 
Aºay_Li°
 
DSBT_ma°î
;

68 #i‡
LOADER_DEBUG


69 
	`dump_ma°î_dsbt
();

96 
BOOL
 
	$DLIF_ªgi°î_dsbt_ödex_ªque°
(
DLOAD_HANDLE
 
h™dÀ
,

97 c⁄° *
ªque°‹_«me
,

98 
öt32_t
 
ªque°‹_fûe_h™dÀ
,

99 
öt32_t
 
ªque°ed_dsbt_ödex
)

101 
DSBT_Index_Reque°
 *
√w_ªque°
 = 
NULL
;

110 i‡(
ªque°ed_dsbt_ödex
 !
DSBT_INDEX_INVALID
)

112 
dsbt_ödex_ªque°_±r_Queue_Node
 *
±r
;

119 i‡(
	`AL_size
(&
DSBT_ma°î
Ë> 
ªque°ed_dsbt_ödex
)

121 
DSBT_E¡ry
 *
˛õ¡_dsbt
 = (DSBT_E¡ry *)(
DSBT_ma°î
.
buf
);

122 i‡(
˛õ¡_dsbt
[
ªque°ed_dsbt_ödex
].
ödex_ªque°
 !
NULL
)

124 
	`DLIF_îr‹
(
DLET_MISC
,

127 
ªque°‹_«me
, 
ªque°ed_dsbt_ödex
,

128 
˛õ¡_dsbt
[
ªque°ed_dsbt_ödex
].
ödex_ªque°
->
«me
);

129  
FALSE
;

133 
±r
 = 
DSBT_ödex_ªque°_queue
.
‰⁄t_±r
;

134 
±r
 !
NULL
;Öå =Öå->
√xt_±r
)

136 
DSBT_Index_Reque°
 *
exi°ög_ªque°
 = 
±r
->
vÆue
;

142 i‡(
ªque°‹_fûe_h™dÀ
 =
exi°ög_ªque°
->
fûe_h™dÀ
)

144 
	`DLIF_îr‹
(
DLET_MISC
,

147 "thêßmêmoduÀ", 
exi°ög_ªque°
->
«me
);

148  
FALSE
;

155 i‡(
ªque°ed_dsbt_ödex
 =
exi°ög_ªque°
->
ªque°ed_ödex
)

157 
	`DLIF_îr‹
(
DLET_MISC
,

160 
ªque°ed_dsbt_ödex
,

161 
ªque°‹_«me
,

162 
exi°ög_ªque°
->
«me
);

163  
FALSE
;

175 
√w_ªque°
 = (
DSBT_Index_Reque°
 *)
	`DLIF_mÆloc
((DSBT_Index_Request));

176 i‡(
NULL
 =
√w_ªque°
) {

177 
	`DLIF_îr‹
(
DLET_MISC
,

179  
FALSE
;

181 
√w_ªque°
->
«me
 = (*)
	`DLIF_mÆloc
(
	`°æí
(
ªque°‹_«me
) + 1);

182 i‡(
NULL
 =
√w_ªque°
->
«me
) {

183 
	`DLIF_‰ì
(
√w_ªque°
);

184 
	`DLIF_îr‹
(
DLET_MISC
,

186  
FALSE
;

188 
	`°r˝y
(
√w_ªque°
->
«me
, 
ªque°‹_«me
);

189 
√w_ªque°
->
fûe_h™dÀ
 = 
ªque°‹_fûe_h™dÀ
;

191 
√w_ªque°
->
dsbt_size
 = 
	`DLOAD_gë_dsbt_size
(
h™dÀ
, 
ªque°‹_fûe_h™dÀ
);

192 i‡(!
	`DLOAD_gë_dsbt_ba£
(
h™dÀ
, 
ªque°‹_fûe_h™dÀ
, &
√w_ªque°
->
dsbt_ba£
))

194 
	`DLIF_îr‹
(
DLET_MISC
,

196 
ªque°‹_«me
);

197 
	`DLIF_‰ì
(
√w_ªque°
->
«me
);

198 
√w_ªque°
->
«me
 = 
NULL
;

199 
	`DLIF_‰ì
(
√w_ªque°
);

200 
√w_ªque°
 = 
NULL
;

201  
FALSE
;

204 i‡(!
	`DLOAD_gë_°©ic_ba£
(
h™dÀ
, 
ªque°‹_fûe_h™dÀ
, &
√w_ªque°
->
°©ic_ba£
))

206 
	`DLIF_îr‹
(
DLET_MISC
,

208 
ªque°‹_«me
);

209 
	`DLIF_‰ì
(
√w_ªque°
->
«me
);

210 
√w_ªque°
->
«me
 = 
NULL
;

211 
	`DLIF_‰ì
(
√w_ªque°
);

212 
√w_ªque°
 = 
NULL
;

213  
FALSE
;

216 
√w_ªque°
->
ªque°ed_ödex
 = 
ªque°ed_dsbt_ödex
;

217 
√w_ªque°
->
assig√d_ödex
 = 
DSBT_INDEX_INVALID
;

219 
	`dsbt_ödex_ªque°_±r_íqueue
(&
DSBT_ödex_ªque°_queue
, 
√w_ªque°
);

221  
TRUE
;

222 
	}
}

231 
	$add_dsbt_íåy
(
DSBT_Index_Reque°
 *
ªque°
)

233 
DSBT_E¡ry
 
√w_íåy
;

234 
√w_íåy
.
ödex_ªque°
 = 
ªque°
;

235 
	`AL_≠≥nd
(&
DSBT_ma°î
, &
√w_íåy
);

236 
	}
}

246 
	$assign_dsbt_íåy
(
DSBT_Index_Reque°
 *
ªque°
)

248 
DSBT_E¡ry
 *
˛õ¡_dsbt
 = 
NULL
;

255 i‡(
ªque°
->
ªque°ed_ödex
 !
DSBT_INDEX_INVALID
)

257 
	`AL_size
(&
DSBT_ma°î
Ë<
ªque°
->
ªque°ed_ödex
)

258 
	`add_dsbt_íåy
(
NULL
);

260 
˛õ¡_dsbt
 = (
DSBT_E¡ry
 *)(
DSBT_ma°î
.
buf
);

261 
˛õ¡_dsbt
[
ªque°
->
ªque°ed_ödex
].
ödex_ªque°
 =Ñequest;

262 
ªque°
->
assig√d_ödex
 =Ñequest->assigned_index;

272 
i
;

273 
˛õ¡_dsbt
 = (
DSBT_E¡ry
 *)(
DSBT_ma°î
.
buf
);

274 
i
 = 
DSBT_fú°_avaû_ödex
; i < 
	`AL_size
(&
DSBT_ma°î
); i++)

276 i‡(
˛õ¡_dsbt
[
i
].
ödex_ªque°
 =
NULL
)

278 
˛õ¡_dsbt
[
i
].
ödex_ªque°
 = 
ªque°
;

282 
DSBT_fú°_avaû_ödex
++;

285 i‡(
i
 =
	`AL_size
(&
DSBT_ma°î
))

286 
	`add_dsbt_íåy
(
ªque°
);

288 
ªque°
->
assig√d_ödex
 = 
i
;

290 
	}
}

313 
	$DLIF_assign_dsbt_ödi˚s
()

320 
dsbt_ödex_ªque°_±r_Queue_Node
 *
±r
 = 
DSBT_ödex_ªque°_queue
.
‰⁄t_±r
;

321 
dsbt_ödex_ªque°_±r_Queue_Node
 *
√xt_±r
 = 
NULL
;

322 
DSBT_Index_Reque°
 *
cuº_ªq
 = 
NULL
;

324 ; 
±r
 !
NULL
;Öå = 
√xt_±r
)

326 
cuº_ªq
 = 
±r
->
vÆue
;

327 
√xt_±r
 = 
±r
->next_ptr;

329 i‡(
cuº_ªq
->
ªque°ed_ödex
 =
DSBT_INDEX_INVALID
) ;

331 
	`assign_dsbt_íåy
(
cuº_ªq
);

332 
	`dsbt_ödex_ªque°_±r_ªmove
(&
DSBT_ödex_ªque°_queue
, 
cuº_ªq
);

340 
cuº_ªq
 = 
	`dsbt_ödex_ªque°_±r_dequeue
(&
DSBT_ödex_ªque°_queue
);

341 
cuº_ªq
 !
NULL
)

343 
	`assign_dsbt_íåy
(
cuº_ªq
);

344 
cuº_ªq
 = 
	`dsbt_ödex_ªque°_±r_dequeue
(&
DSBT_ödex_ªque°_queue
);

347 #i‡
LOADER_DEBUG


348 i‡(
debuggög_⁄
)

350 
	`DLIF_åa˚
("After completedássignment of DSBT indices ...\n");

351 
	`dump_ma°î_dsbt
();

354 
	}
}

366 
öt32_t
 
	$DLIF_gë_dsbt_ödex
(
öt32_t
 
fûe_h™dÀ
)

371 
öt32_t
 
i
;

372 
DSBT_E¡ry
 *
˛õ¡_dsbt
 = (DSBT_E¡ry *)(
DSBT_ma°î
.
buf
);

373 
i
 = 0; i < 
	`AL_size
(&
DSBT_ma°î
); i++)

375 
DSBT_Index_Reque°
 *
cuº_ªq
 = 
˛õ¡_dsbt
[
i
].
ödex_ªque°
;

377 i‡(
cuº_ªq
 =
NULL
) ;

379 i‡(
cuº_ªq
->
fûe_h™dÀ
 == file_handle)

380  
cuº_ªq
->
assig√d_ödex
;

387  
DSBT_INDEX_INVALID
;

388 
	}
}

404 
BOOL
 
	$DLIF_upd©e_Æl_dsbts
()

426 
öt32_t
 
i
;

427 
öt32_t
 
ma°î_dsbt_size
 = 
	`AL_size
(&
DSBT_ma°î
);

428 
DSBT_E¡ry
 *
˛õ¡_dsbt
 = (DSBT_E¡ry *)(
DSBT_ma°î
.
buf
);

429 
DSBT_Index_Reque°
 *
cuº_ªq
 = 
NULL
;

431 #i‡
LOADER_DEBUG


432 i‡(
debuggög_⁄
)

434 
	`DLIF_åa˚
("Starting DLIF_update_all_dsbts() ... \n");

435 
	`DLIF_åa˚
("Sizêo‡ma°î DSBT i†%d\n", 
ma°î_dsbt_size
);

436 
	`dump_ma°î_dsbt
();

445 
i
 = 0; i < 
ma°î_dsbt_size
; i++)

447 
cuº_ªq
 = 
˛õ¡_dsbt
[
i
].
ödex_ªque°
;

455 i‡(
cuº_ªq
 !
NULL
)

464 
uöt32_t
 
cuº_dsbt_size
 = 
cuº_ªq
->
dsbt_size
;

465 i‡(
cuº_dsbt_size
 < 
ma°î_dsbt_size
)

467 
	`DLIF_îr‹
(
DLET_MISC
,

469 "ítúêDSBT", 
cuº_ªq
->
«me
);

470  
FALSE
;

481 
i
 = 0; i < 
ma°î_dsbt_size
; i++)

483 
cuº_ªq
 = 
˛õ¡_dsbt
[
i
].
ödex_ªque°
;

488 i‡(
cuº_ªq
 !
NULL
)

490 
j
;

491 #i‡
LOADER_DEBUG


492 i‡(
debuggög_⁄
)

493 
	`DLIF_åa˚
("Writing master DSBTÅo 0x%08lx for module: %s\n",

494 
cuº_ªq
->
dsbt_ba£
, cuº_ªq->
«me
);

497 
j
 = 0; j < 
ma°î_dsbt_size
; j++)

499 
DSBT_Index_Reque°
 *
j_ªq
 = 
˛õ¡_dsbt
[
j
].
ödex_ªque°
;

501 i‡(
j_ªq
 !
NULL
)

502 *((
TARGET_ADDRESS
 *)(
cuº_ªq
->
dsbt_ba£
Ë+ 
j
) =

503 (
j_ªq
 !
NULL
Ë? j_ªq->
°©ic_ba£
 : 0;

508 #i‡
LOADER_DEBUG


509 i‡(
debuggög_⁄
Ë
	`dump_ma°î_dsbt
();

512  
TRUE
;

513 
	}
}

518 #i‡
LOADER_DEBUG


519 
	$dump_ma°î_dsbt
()

521 
i
;

522 
DSBT_E¡ry
 *
˛õ¡_dsbt
 = (DSBT_E¡ry *)(
DSBT_ma°î
.
buf
);

523 
	`DLIF_åa˚
("Dumping master DSBT ...\n");

524 
i
 = 0; i < 
	`AL_size
(&
DSBT_ma°î
); i++)

526 
DSBT_Index_Reque°
 *
i_ªq
 = 
˛õ¡_dsbt
[
i
].
ödex_ªque°
;

527 i‡(
i_ªq
 !
NULL
)

529 
	`DLIF_åa˚
(" slot %d has dsbt_base: 0x%08lx; static base: 0x%08lx;\n"

531 
i
, 
i_ªq
->
dsbt_ba£
, i_ªq->
°©ic_ba£
, i_ªq->
«me
);

535 
	`DLIF_åa˚
(" slŸ %d i†AVAILABLE\n", 
i
);

538 
	}
}

550 
	$DSBT_ªÀa£_íåy
(
öt32_t
 
fûe_h™dÀ
)

552 
öt32_t
 
i
;

553 
DSBT_E¡ry
 *
˛õ¡_dsbt
 = (DSBT_E¡ry *)(
DSBT_ma°î
.
buf
);

554 
i
 = 0; i < 
	`AL_size
(&
DSBT_ma°î
); i++)

556 
DSBT_Index_Reque°
 *
cuº_ªq
 = 
˛õ¡_dsbt
[
i
].
ödex_ªque°
;

558 i‡(
cuº_ªq
 && (cuº_ªq->
fûe_h™dÀ
 == file_handle))

560 
˛õ¡_dsbt
[
i
].
ödex_ªque°
 = 
NULL
;

561 i‡(
i
 < 
DSBT_fú°_avaû_ödex
) DSBT_first_avail_index = i;

562 
	`DLIF_‰ì
(
cuº_ªq
);

565 
	}
}

	@utils/elfload/dlw_trgmem.c

76 
	~"AºayLi°.h
"

77 
	~"dlﬂd_≠i.h
"

78 
	~"dlﬂd4430.h
"

79 
	~<°d¨g.h
>

80 
	~<°dlib.h
>

81 
	~<°rög.h
>

82 
	~"dlw_ågmem.h
"

87 
åg_möô
(* 
˛õ¡_h™dÀ
, 
uöt32_t
 
dyn_£g
,

88 
uöt32_t
 
size
);

89 
åg_mdeöô
(* 
˛õ¡_h™dÀ
);

90 
uöt32_t
 
åg_Æign
(uöt32_à
‹ig_addr
, 
Æignmít
);

91 
åg_‰ì_pkt
(* 
˛õ¡_h™dÀ
, 
TRG_PACKET
 *);

92 
uöt32_t
 
åg_Æloc_pkt
(
TRG_PACKET
 *, 
size_t
, , uint32_t);

93 
BOOL
 
åg_mÆloc
(* 
˛õ¡_h™dÀ
, 
uöt32_t
 *
ªq_addr
,

94 
size_t
 
size
, 
Æignmít
);

100 
	$åg_möô
(* 
˛õ¡_h™dÀ
, 
uöt32_t
 
dyn_£g
, uöt32_à
size
)

102 
DLﬂd4430_Obje˘
 *
˛õ¡Obj
 = (DLﬂd4430_Obje˘ *)
˛õ¡_h™dÀ
;

104 
˛õ¡Obj
->
åg_mem_hód
 = (
TRG_PACKET
 *)
	`DLIF_mÆloc
((TRG_PACKET));

105 i‡(
˛õ¡Obj
->
åg_mem_hód
) {

106 
˛õ¡Obj
->
åg_mem_hód
->
∑ckë_addr
 = 
dyn_£g
;

107 
˛õ¡Obj
->
åg_mem_hód
->
∑ckë_size
 = 
size
;

108 
˛õ¡Obj
->
åg_mem_hód
->
¥ev_∑ckë
 = 
NULL
;

109 
˛õ¡Obj
->
åg_mem_hód
->
√xt_∑ckë
 = 
NULL
;

110 
˛õ¡Obj
->
åg_mem_hód
->
u£d_∑ckë
 = 
FALSE
;

112 
	}
}

118 
	$åg_mdeöô
(* 
˛õ¡_h™dÀ
)

120 
DLﬂd4430_Obje˘
 *
˛õ¡Obj
 = (DLﬂd4430_Obje˘ *)
˛õ¡_h™dÀ
;

122 
	`DLIF_‰ì
(
˛õ¡Obj
->
åg_mem_hód
);

123 
	}
}

129 
uöt32_t
 
	$åg_Æign
(
uöt32_t
 
‹ig_addr
, 
Æignmít
)

131 i‡(
Æignmít
 <1Ë 
‹ig_addr
;

132  ((
‹ig_addr
 + (
Æignmít
 - 1)) & ~(alignment - 1));

133 
	}
}

139 
	$åg_‰ì_pkt
(* 
˛õ¡_h™dÀ
, 
TRG_PACKET
 *
±r
)

141 
DLﬂd4430_Obje˘
 *
˛õ¡Obj
 = (DLﬂd4430_Obje˘ *)
˛õ¡_h™dÀ
;

143 i‡(
±r
)

145 
TRG_PACKET
 *
¥ev_pkt
 = 
±r
->
¥ev_∑ckë
;

146 
TRG_PACKET
 *
√xt_pkt
 = 
±r
->
√xt_∑ckë
;

148 i‡(
¥ev_pkt
 && !¥ev_pkt->
u£d_∑ckë
)

150 
±r
->
∑ckë_addr
 = 
¥ev_pkt
->packet_addr;

151 
±r
->
∑ckë_size
 +
¥ev_pkt
->packet_size;

152 
±r
->
¥ev_∑ckë
 = 
¥ev_pkt
->prev_packet;

153 i‡(
¥ev_pkt
->
¥ev_∑ckë
)

154 
¥ev_pkt
->
¥ev_∑ckë
->
√xt_∑ckë
 = 
±r
;

155 
	`DLIF_‰ì
(
¥ev_pkt
);

158 i‡(
√xt_pkt
 && !√xt_pkt->
u£d_∑ckë
)

160 
±r
->
∑ckë_size
 +
√xt_pkt
->packet_size;

161 
±r
->
√xt_∑ckë
 = 
√xt_pkt
->next_packet;

162 i‡(
√xt_pkt
->
√xt_∑ckë
)

163 
√xt_pkt
->
√xt_∑ckë
->
¥ev_∑ckë
 = 
±r
;

164 
	`DLIF_‰ì
(
√xt_pkt
);

167 i‡(!
±r
->
¥ev_∑ckë
Ë
˛õ¡Obj
->
åg_mem_hód
 =Ötr;

169 
±r
->
u£d_∑ckë
 = 
FALSE
;

171 
	}
}

178 
uöt32_t
 
	$åg_Æloc_pkt
(
TRG_PACKET
 *
±r
, 
size_t
 
size
, 
Æignmít
,

179 
uöt32_t
 
ªq_addr
)

181 
uöt32_t
 
Æign_addr
;

182 
uöt32_t
 
Æign_∑d
;

187 
TRG_PACKET
 *
u£d_pkt
 = 
±r
;

188 
size_t
 
‹ig_sz
 = 0;

189 
TRG_PACKET
 *
‰ì_pkt
 = 
NULL
;

197 i‡(
ªq_addr
 > 
u£d_pkt
->
∑ckë_addr
)

199 
‰ì_pkt
 = (
TRG_PACKET
 *)
	`DLIF_mÆloc
((TRG_PACKET));

200 if(!
‰ì_pkt
) {

203 
‰ì_pkt
->
√xt_∑ckë
 = 
u£d_pkt
;

204 
‰ì_pkt
->
¥ev_∑ckë
 = 
u£d_pkt
->prev_packet;

205 
u£d_pkt
->
¥ev_∑ckë
 = 
‰ì_pkt
;

207 
‰ì_pkt
->
∑ckë_size
 = 
ªq_addr
 - 
u£d_pkt
->
∑ckë_addr
;

208 
‰ì_pkt
->
∑ckë_addr
 = 
u£d_pkt
->packet_addr;

209 
‰ì_pkt
->
u£d_∑ckë
 = 
FALSE
;

211 
u£d_pkt
->
∑ckë_addr
 = 
ªq_addr
;

219 
Æign_addr
 = 
	`åg_Æign
(
u£d_pkt
->
∑ckë_addr
, 
Æignmít
);

220 
Æign_∑d
 = 
Æign_addr
 - 
u£d_pkt
->
∑ckë_addr
;

226 i‡(
Æign_∑d
)

234 i‡(!
‰ì_pkt
)

236 
‰ì_pkt
 = (
TRG_PACKET
 *)
	`DLIF_mÆloc
((TRG_PACKET));

237 if(!
‰ì_pkt
) {

240 
‰ì_pkt
->
√xt_∑ckë
 = 
u£d_pkt
;

241 
‰ì_pkt
->
¥ev_∑ckë
 = 
u£d_pkt
->prev_packet;

242 
u£d_pkt
->
¥ev_∑ckë
 = 
‰ì_pkt
;

243 
‰ì_pkt
->
∑ckë_addr
 = 
u£d_pkt
->packet_addr;

244 
‰ì_pkt
->
∑ckë_size
 = 0;

247 
‰ì_pkt
->
∑ckë_size
 +
Æign_∑d
;

248 
u£d_pkt
->
∑ckë_size
 -
Æign_∑d
;

249 
u£d_pkt
->
∑ckë_addr
 = 
Æign_addr
;

258 
‹ig_sz
 = 
u£d_pkt
->
∑ckë_size
;

259 
u£d_pkt
->
∑ckë_size
 = 
size
;

260 
u£d_pkt
->
u£d_∑ckë
 = 
TRUE
;

267 i‡(
‹ig_sz
 > 
size
)

269 
‰ì_pkt
 = (
TRG_PACKET
 *)
	`DLIF_mÆloc
((TRG_PACKET));

270 if(!
‰ì_pkt
) {

273 
‰ì_pkt
->
√xt_∑ckë
 = 
u£d_pkt
->next_packet;

274 
‰ì_pkt
->
¥ev_∑ckë
 = 
u£d_pkt
;

275 
u£d_pkt
->
√xt_∑ckë
 = 
‰ì_pkt
;

277 
‰ì_pkt
->
∑ckë_size
 = 
‹ig_sz
 - 
size
;

279 
‰ì_pkt
->
∑ckë_addr
 = 
u£d_pkt
->∑ckë_add∏+ 
size
;

281 
‰ì_pkt
->
u£d_∑ckë
 = 
FALSE
;

284  (
u£d_pkt
->
∑ckë_addr
);

285 
	}
}

292 
BOOL
 
	$åg_mÆloc
(* 
˛õ¡_h™dÀ
, 
uöt32_t
 *
ªq_addr
, 
size_t
 
size
,

293 
Æignmít
)

295 
DLﬂd4430_Obje˘
 *
˛õ¡Obj
 = (DLﬂd4430_Obje˘ *)
˛õ¡_h™dÀ
;

297 
TRG_PACKET
 *
cuºít
 = 
NULL
;

298 
TRG_PACKET
 *
be°_fô
 = 
NULL
;

300 i‡(
size
 <0Ë 
FALSE
;

307 i‡(*
ªq_addr
 =(
uöt32_t
)-1)

312 
cuºít
 = 
˛õ¡Obj
->
åg_mem_hód
;

313 
cuºít
;

314 
cuºít
 = cuºít->
√xt_∑ckë
)

319 
uöt32_t
 
Æign_addr
 = 
	`åg_Æign
(
cuºít
->
∑ckë_addr
, 
Æignmít
);

320 
uöt32_t
 
Æign_∑d
 = 
Æign_addr
 - 
cuºít
->
∑ckë_addr
;

325 i‡(
cuºít
->
u£d_∑ckë
) ;

330 i‡((
cuºít
->
∑ckë_size
 > 
Æign_∑d
) &&

331 ((
cuºít
->
∑ckë_size
 - 
Æign_∑d
Ë>
size
))

333 i‡(
be°_fô
 && (
cuºít
->
∑ckë_size
 >= best_fit->packet_size))

335 
be°_fô
 = 
cuºít
;

339 i‡(!
be°_fô
Ë 
FALSE
;

341 *
ªq_addr
 = 
	`åg_Æloc_pkt
(
be°_fô
, 
size
, 
Æignmít
,

342 
be°_fô
->
∑ckë_addr
);

344  
TRUE
;

357 
cuºít
 = 
˛õ¡Obj
->
åg_mem_hód
;

358 
cuºít
;

359 
cuºít
 = cuºít->
√xt_∑ckë
)

366 
uöt32_t
 
Æign_addr
 = 
	`åg_Æign
(*
ªq_addr
, 
Æignmít
);

367 i‡(
Æign_addr
 !*
ªq_addr
)

369 
	`DLIF_îr‹
(
DLET_TRGMEM
, "requestedáddress isÇotáligned\n");

370  
FALSE
;

376 i‡(*
ªq_addr
 < 
cuºít
->
∑ckë_addr
 ||

377 ((
cuºít
->
∑ckë_addr
 + cuºít->
∑ckë_size
Ë<*
ªq_addr
))

383 i‡((
cuºít
->
∑ckë_size
Ë>
size
)

385 
uöt32_t
 
Æloc_addr
 = 
	`åg_Æloc_pkt
(
cuºít
, 
size
, 
Æignmít
,

386 *
ªq_addr
);

387 i‡(
Æloc_addr
 !*
ªq_addr
)

389 
	`DLIF_îr‹
(
DLET_TRGMEM
, "Problem withÅrg_alloc_pkt\n");

390 
	`exô
(1);

393  
TRUE
;

400  
FALSE
;

401 
	}
}

407 
BOOL
 
	$DLTMM_öô
(* 
˛õ¡_h™dÀ
, 
uöt32_t
 
dynMemAddr
, uöt32_à
size
)

409 
DLﬂd4430_Obje˘
 *
˛õ¡Obj
 = (DLﬂd4430_Obje˘ *)
˛õ¡_h™dÀ
;

411 i‡(
dynMemAddr
 == 0)

412  
FALSE
;

414 i‡(!
˛õ¡Obj
->
åg_möô
)

416 
	`åg_möô
(
˛õ¡_h™dÀ
, 
dynMemAddr
, 
size
);

417 
˛õ¡Obj
->
åg_möô
 = 
TRUE
;

420  
TRUE
;

421 
	}
}

427 
BOOL
 
	$DLTMM_deöô
(* 
˛õ¡_h™dÀ
)

429 
DLﬂd4430_Obje˘
 *
˛õ¡Obj
 = (DLﬂd4430_Obje˘ *)
˛õ¡_h™dÀ
;

431 i‡(
˛õ¡Obj
->
åg_möô
)

433 
	`åg_mdeöô
(
˛õ¡_h™dÀ
);

434 
˛õ¡Obj
->
åg_möô
 = 
FALSE
;

437  
TRUE
;

438 
	}
}

446 
BOOL
 
	$DLTMM_mÆloc
(* 
˛õ¡_h™dÀ
,

447 
DLOAD_MEMORY_REQUEST
 *
èrg_ªq
,

448 
DLOAD_MEMORY_SEGMENT
 *
obj_desc
)

454 
Æignmít
 = (
èrg_ªq
->
Æign
) ?Åarg_req->align : 1;

455 
uöt32_t
 
ªq_addr
 = (
èrg_ªq
->
Êags
 & 
DLOAD_SF_ªloˇèbÀ
) ?

456 (
uöt32_t
)-1 : (uöt32_t)
obj_desc
->
èrgë_addªss
;

461 i‡(
	`åg_mÆloc
(
˛õ¡_h™dÀ
,

462 &
ªq_addr
,

463 
obj_desc
->
memsz_ö_byãs
,

464 
Æignmít
))

466 
obj_desc
->
èrgë_addªss
 = 
èrg_ªq
->
ho°_addªss
 = (*)
ªq_addr
;

467  
TRUE
;

473  
FALSE
;

474 
	}
}

480 
	$DLTMM_‰ì
(* 
˛õ¡_h™dÀ
, 
TARGET_ADDRESS
 
±r
)

482 
DLﬂd4430_Obje˘
 *
˛õ¡Obj
 = (DLﬂd4430_Obje˘ *)
˛õ¡_h™dÀ
;

484 
uöt32_t
 
pkt_addr
 = (uöt32_t)
±r
;

485 
TRG_PACKET
 *
¥ev
 = 
NULL
;

486 
TRG_PACKET
 *
cuºít
 = 
NULL
;

492 
cuºít
 = 
˛õ¡Obj
->
åg_mem_hód
;

493 
cuºít
;

494 
cuºít
 = cuºít->
√xt_∑ckë
)

499 i‡(!
cuºít
->
u£d_∑ckë
) ;

504 i‡(
cuºít
->
∑ckë_addr
 <
pkt_addr
Ë
¥ev
 = current;

508 i‡(
¥ev
Ë
	`åg_‰ì_pkt
(
˛õ¡_h™dÀ
,Örev);

512 
	`DLIF_îr‹
(
DLET_TRGMEM
,

514 "addªss, 0x%lx\n", 
pkt_addr
);

515 
	`exô
(1);

517 
	}
}

522 
	$DLTMM_fwrôe_åg_mem
(
FILE
 *
Â
)

525 
	}
}

530 
	$DLTMM_‰ód_åg_mem
(
FILE
 *
Â
)

533 
	}
}

538 
	$DLTMM_dump_åg_mem
(
uöt32_t
 
off£t
, uöt32_à
nbyãs
,

539 
FILE
* 
Â
)

542 
uöt8_t
* 
±r
 = 
åg_mem_poﬁ
 + 
off£t
;

544 i‡(!
Â
)

546 
	`DLIF_îr‹
(
DLET_TRGMEM
, "NULL fileÖointer givenÅo dump_trgmem\n");

553 i‡((
±r
 + 
nbyãs
Ë> (
åg_mem_poﬁ
 + 
åg_mem_poﬁ_sz
 ))

555 
	`DLIF_îr‹
(
DLET_TRGMEM
, "InvalidÑange givenÅo dump_trgmem\n");

559 
	`fwrôe
(
±r
, 1, 
nbyãs
, 
Â
);

561 
	}
}

	@utils/elfload/elf32.c

63 
	~"ñf32.h
"

69 c⁄° 
EDYN_TAG
 
	gEDYN_TAG_DB
[] =

74  
DT_NULL
,

75  
EDYN_UNTYPE_IGNORED
,

76  
EDYN_TAGREQ_MANDATORY
,

77  
EDYN_TAGREQ_MANDATORY


83  
DT_NEEDED
,

84  
EDYN_UNTYPE_VAL
,

85  
EDYN_TAGREQ_OPTIONAL
,

86  
EDYN_TAGREQ_OPTIONAL


92  
DT_PLTRELSZ
,

93  
EDYN_UNTYPE_VAL
,

94  
EDYN_TAGREQ_OPTIONAL
,

95  
EDYN_TAGREQ_OPTIONAL


101  
DT_PLTGOT
,

102  
EDYN_UNTYPE_PTR
,

103  
EDYN_TAGREQ_OPTIONAL
,

104  
EDYN_TAGREQ_OPTIONAL


110  
DT_HASH
,

111  
EDYN_UNTYPE_PTR
,

112  
EDYN_TAGREQ_MANDATORY
,

113  
EDYN_TAGREQ_MANDATORY


119  
DT_STRTAB
,

120  
EDYN_UNTYPE_PTR
,

121  
EDYN_TAGREQ_MANDATORY
,

122  
EDYN_TAGREQ_MANDATORY


128  
DT_SYMTAB
,

129  
EDYN_UNTYPE_PTR
,

130  
EDYN_TAGREQ_MANDATORY
,

131  
EDYN_TAGREQ_MANDATORY


137  
DT_RELA
,

138  
EDYN_UNTYPE_PTR
,

139  
EDYN_TAGREQ_MANDATORY
,

140  
EDYN_TAGREQ_OPTIONAL


146  
DT_RELASZ
,

147  
EDYN_UNTYPE_VAL
,

148  
EDYN_TAGREQ_MANDATORY
,

149  
EDYN_TAGREQ_OPTIONAL


155  
DT_RELAENT
,

156  
EDYN_UNTYPE_VAL
,

157  
EDYN_TAGREQ_MANDATORY
,

158  
EDYN_TAGREQ_OPTIONAL


164  
DT_STRSZ
,

165  
EDYN_UNTYPE_VAL
,

166  
EDYN_TAGREQ_MANDATORY
,

167  
EDYN_TAGREQ_MANDATORY


173  
DT_SYMENT
,

174  
EDYN_UNTYPE_VAL
,

175  
EDYN_TAGREQ_MANDATORY
,

176  
EDYN_TAGREQ_MANDATORY


182  
DT_INIT
,

183  
EDYN_UNTYPE_PTR
,

184  
EDYN_TAGREQ_OPTIONAL
,

185  
EDYN_TAGREQ_OPTIONAL


191  
DT_FINI
,

192  
EDYN_UNTYPE_PTR
,

193  
EDYN_TAGREQ_OPTIONAL
,

194  
EDYN_TAGREQ_OPTIONAL


200  
DT_SONAME
,

201  
EDYN_UNTYPE_VAL
,

202  
EDYN_TAGREQ_IGNORED
,

203  
EDYN_TAGREQ_OPTIONAL


209  
DT_RPATH
,

210  
EDYN_UNTYPE_VAL
,

211  
EDYN_TAGREQ_OPTIONAL
,

212  
EDYN_TAGREQ_IGNORED


218  
DT_SYMBOLIC
,

219  
EDYN_UNTYPE_IGNORED
,

220  
EDYN_TAGREQ_IGNORED
,

221  
EDYN_TAGREQ_OPTIONAL


227  
DT_REL
,

228  
EDYN_UNTYPE_PTR
,

229  
EDYN_TAGREQ_MANDATORY
,

230  
EDYN_TAGREQ_OPTIONAL


236  
DT_RELSZ
,

237  
EDYN_UNTYPE_VAL
,

238  
EDYN_TAGREQ_MANDATORY
,

239  
EDYN_TAGREQ_OPTIONAL


245  
DT_RELENT
,

246  
EDYN_UNTYPE_VAL
,

247  
EDYN_TAGREQ_MANDATORY
,

248  
EDYN_TAGREQ_OPTIONAL


254  
DT_PLTREL
,

255  
EDYN_UNTYPE_VAL
,

256  
EDYN_TAGREQ_OPTIONAL
,

257  
EDYN_TAGREQ_OPTIONAL


263  
DT_DEBUG
,

264  
EDYN_UNTYPE_PTR
,

265  
EDYN_TAGREQ_OPTIONAL
,

266  
EDYN_TAGREQ_IGNORED


272  
DT_TEXTREL
,

273  
EDYN_UNTYPE_IGNORED
,

274  
EDYN_TAGREQ_OPTIONAL
,

275  
EDYN_TAGREQ_OPTIONAL


281  
DT_JMPREL
,

282  
EDYN_UNTYPE_PTR
,

283  
EDYN_TAGREQ_OPTIONAL
,

284  
EDYN_TAGREQ_OPTIONAL


290  
DT_BIND_NOW
,

291  
EDYN_UNTYPE_IGNORED
,

292  
EDYN_TAGREQ_OPTIONAL
,

293  
EDYN_TAGREQ_OPTIONAL


299  
DT_INIT_ARRAY
,

300  
EDYN_UNTYPE_PTR
,

301  
EDYN_TAGREQ_OPTIONAL
,

302  
EDYN_TAGREQ_OPTIONAL


308  
DT_FINI_ARRAY
,

309  
EDYN_UNTYPE_PTR
,

310  
EDYN_TAGREQ_OPTIONAL
,

311  
EDYN_TAGREQ_OPTIONAL


317  
DT_INIT_ARRAYSZ
,

318  
EDYN_UNTYPE_VAL
,

319  
EDYN_TAGREQ_OPTIONAL
,

320  
EDYN_TAGREQ_OPTIONAL


326  
DT_FINI_ARRAYSZ
,

327  
EDYN_UNTYPE_VAL
,

328  
EDYN_TAGREQ_OPTIONAL
,

329  
EDYN_TAGREQ_OPTIONAL


335  
DT_RUNPATH
,

336  
EDYN_UNTYPE_VAL
,

337  
EDYN_TAGREQ_OPTIONAL
,

338  
EDYN_TAGREQ_OPTIONAL


344  
DT_FLAGS
,

345  
EDYN_UNTYPE_VAL
,

346  
EDYN_TAGREQ_OPTIONAL
,

347  
EDYN_TAGREQ_OPTIONAL


353  
DT_ENCODING
,

354  
EDYN_UNTYPE_UNSPECIFIED
,

355  
EDYN_TAGREQ_UNSPECIFIED
,

356  
EDYN_TAGREQ_UNSPECIFIED


362  
DT_PREINIT_ARRAY
,

363  
EDYN_UNTYPE_PTR
,

364  
EDYN_TAGREQ_OPTIONAL
,

365  
EDYN_TAGREQ_IGNORED


371  
DT_PREINIT_ARRAYSZ
,

372  
EDYN_UNTYPE_VAL
,

373  
EDYN_TAGREQ_OPTIONAL
,

374  
EDYN_TAGREQ_IGNORED


381  
EDYN_UNTYPE_UNSPECIFIED
,

382  
EDYN_TAGREQ_OPTIONAL
,

383  
EDYN_TAGREQ_IGNORED


390 c⁄° 
ESCN
 
	gESCN_DB
[] =

394  
ESCN_BSS_«me
,

395  
SHT_NOBITS
,

397  
SHF_ALLOC
 + 
SHF_WRITE


402  
ESCN_COMMENT_«me
,

403  
SHT_PROGBITS
,

410  
ESCN_DATA_«me
,

411  
SHT_PROGBITS
,

413  
SHF_ALLOC
 + 
SHF_WRITE


418  
ESCN_DATA1_«me
,

419  
SHT_PROGBITS
,

421  
SHF_ALLOC
 + 
SHF_WRITE


426  
ESCN_DEBUG_«me
,

427  
SHT_PROGBITS
,

434  
ESCN_DYNAMIC_«me
,

435  
SHT_DYNAMIC
,

436  (
Elf32_Dyn
),

437  
SHF_ALLOC


442  
ESCN_DYNSTR_«me
,

443  
SHT_STRTAB
,

445  
SHF_ALLOC
 + 
SHF_STRINGS


450  
ESCN_DYNSYM_«me
,

451  
SHT_DYNSYM
,

452  (
Elf32_Sym
),

453  
SHF_ALLOC


458  
ESCN_FINI_«me
,

459  
SHT_PROGBITS
,

461  
SHF_ALLOC
 + 
SHF_EXECINSTR


466  
ESCN_FINI_ARRAY_«me
,

467  
SHT_FINI_ARRAY
,

469  
SHF_ALLOC
 + 
SHF_WRITE


474  
ESCN_GOT_«me
,

475  
SHT_PROGBITS
,

482  
ESCN_HASH_«me
,

483  
SHT_HASH
,

485  
SHF_ALLOC


490  
ESCN_INIT_«me
,

491  
SHT_PROGBITS
,

493  
SHF_ALLOC
 + 
SHF_EXECINSTR


498  
ESCN_INIT_ARRAY_«me
,

499  
SHT_INIT_ARRAY
,

501  
SHF_ALLOC
 + 
SHF_WRITE


506  
ESCN_INTERP_«me
,

507  
SHT_PROGBITS
,

514  
ESCN_LINE_«me
,

515  
SHT_PROGBITS
,

522  
ESCN_NOTE_«me
,

523  
SHT_NOTE
,

530  
ESCN_PLT_«me
,

531  
SHT_PROGBITS
,

538  
ESCN_PREINIT_ARRAY_«me
,

539  
SHT_PREINIT_ARRAY
,

541  
SHF_ALLOC
 + 
SHF_WRITE


546  
ESCN_REL_«me
,

547  
SHT_REL
,

548  (
Elf32_Rñ
),

554  
ESCN_RELA_«me
,

555  
SHT_RELA
,

556  (
Elf32_Rña
),

562  
ESCN_RODATA_«me
,

563  
SHT_PROGBITS
,

565  
SHF_ALLOC


570  
ESCN_RODATA1_«me
,

571  
SHT_PROGBITS
,

573  
SHF_ALLOC


578  
ESCN_SHSTRTAB_«me
,

579  
SHT_STRTAB
,

581  
SHF_STRINGS


586  
ESCN_STRTAB_«me
,

587  
SHT_STRTAB
,

589  
SHF_STRINGS


594  
ESCN_SYMTAB_«me
,

595  
SHT_SYMTAB
,

596  (
Elf32_Sym
),

602  
ESCN_SYMTAB_SHNDX_«me
,

603  
SHT_SYMTAB_SHNDX
,

604  (
Elf32_W‹d
),

610  
ESCN_TBSS_«me
,

611  
SHT_NOBITS
,

613  
SHF_ALLOC
 + 
SHF_WRITE
 + 
SHF_TLS


618  
ESCN_TDATA_«me
,

619  
SHT_PROGBITS
,

621  
SHF_ALLOC
 + 
SHF_WRITE
 + 
SHF_TLS


626  
ESCN_TDATA1_«me
,

627  
SHT_PROGBITS
,

629  
SHF_ALLOC
 + 
SHF_WRITE
 + 
SHF_TLS


634  
ESCN_TEXT_«me
,

635  
SHT_PROGBITS
,

637  
SHF_ALLOC
 + 
SHF_EXECINSTR


642  
ESCN_ATTRIBUTES_«me
,

643  
SHT_ATTRIBUTES
,

	@utils/elfload/genbase.c

33 
	~<°dio.h
>

34 
	~<°dlib.h
>

35 
	~<uni°d.h
>

37 
	~<dlﬂd.h
>

41 
FILE
 * 
	gout_fûe
;

43 
	#MAXTAGS
 128

	)

44 
	gèg_addr
[
MAXTAGS
];

45 
	gèg_size
[
MAXTAGS
];

46 *
	gèg_«me
[
MAXTAGS
];

47 
	gnum_ègs
;

49 
	$maö
(
¨gc
, * 
¨gv
[])

51 
DLOAD_HANDLE
 
lﬂdî
;

52 
FILE
 * 
ö_fûe
;

53 
i
, 
j
, 
k
;

55 i‡(
¨gc
 < 3) {

56 
	`Ârötf
(
°dîr
, "Ußge: %†öput-fûêouçut-fûe\n", 
¨gv
[0]);

57 
	`exô
(1);

60 i‡((
ö_fûe
 = 
	`f›í
(
¨gv
[1], "rb")Ë=
NULL
) {

61 
	`Ârötf
(
°dîr
, "%s: couldÇŸ o≥¿fûê%†f‹Ñódög\n", 
¨gv
[0],

62 
¨gv
[1]);

63 
	`exô
(2);

66 i‡((
out_fûe
 = 
	`f›í
(
¨gv
[2], "w+b")Ë=
NULL
) {

67 
	`Ârötf
(
°dîr
, "%s: couldÇŸ o≥¿fûê%†f‹ wrôög\n", 
¨gv
[0],

68 
¨gv
[2]);

69 
	`exô
(3);

72 
num_ègs
 = 0;

74 
j
 = 0, 
i
 = 3; i < 
¨gc
; i++, j++) {

75 
num_ègs
++;

76 
k
 = 0;

77 
èg_«me
[
j
] = 
¨gv
[
i
];

78 
¨gv
[
i
][
k
] != ':') {

79 
k
++;

81 
¨gv
[
i
][
k
] = '\0';

82 
èg_addr
[
j
] = 
	`°πﬁl
(&
¨gv
[
i
][
k
+1], 
NULL
, 16);

84 
¨gv
[
i
][
k
] != ':') {

85 
k
++;

87 
èg_size
[
j
] = 
	`°πﬁl
(&
¨gv
[
i
][
k
+1], 
NULL
, 16);

89 
	`¥ötf
("foundÅag %d:Çamê'%s'ádd∏0x%x sizê%d\n", 
j
, 
èg_«me
[j],

90 
èg_addr
[
j
], 
èg_size
[j]);

93 
lﬂdî
 = 
	`DLOAD_¸óã
(
NULL
);

94 
	`DLOAD_lﬂd
(
lﬂdî
, 
ö_fûe
, 0, 
NULL
);

95 
	`DLOAD_de°roy
(
lﬂdî
);

97 
	`f˛o£
(
out_fûe
);

98 
	`f˛o£
(
ö_fûe
);

101 
	}
}

	@utils/elfload/include/ArrayList.h

62 #i‚de‡
ARRAYLIST_H


63 
	#ARRAYLIST_H


	)

65 
	~<öây≥s.h
>

72 *
	mbuf
;

73 
öt32_t
 
	mty≥_size
;

74 
öt32_t
 
	msize
;

75 
öt32_t
 
	mbuf„r_size
;

76 } 
	tAºay_Li°
;

87 
AL_öôülize
(
Aºay_Li°
* 
obj
, 
öt32_t
 
ty≥_size
, i¡32_à
num_ñem
);

88 
AL_≠≥nd
(
Aºay_Li°
* 
obj
, * 
to_≠≥nd
);

89 
öt32_t
 
AL_size
(
Aºay_Li°
* 
obj
);

90 
AL_de°roy
(
Aºay_Li°
* 
obj
);

	@utils/elfload/include/Queue.h

71 #i‚de‡
QUEUE_H


72 
	#QUEUE_H


	)

74 
	~<öây≥s.h
>

75 
	~"dlﬂd_≠i.h
"

81 
	#TYPE_QUEUE_DEFINITION
(
t
, 
t_«me
) \

82 
t_«me
##
_Queue_Node_
 \

84 
t
 
vÆue
; \

85 
t_«me
##
_Queue_Node_
* 
√xt_±r
; \

87 
t_«me
##
	t_Queue_Node_
 
	tt_«me
##
	t_Queue_Node
; \

91 
t_«me
##
_Queue_Node
* 
‰⁄t_±r
; \

92 
t_«me
##
_Queue_Node
* 
back_±r
; \

93 
öt32_t
 
size
; \

94 } 
	tt_«me
##
	t_Queue
; \

96 
t_«me
##
	`_öôülize_queue
—_«me##
_Queue
* 
queue
); \

97 
t_«me
##
	`_íqueue
—_«me##
_Queue
* 
queue
, 
t
 
to_íqueue
); \

98 
t
 
t_«me
##
	`_dequeue
—_«me##
_Queue
* 
queue
); \

99 
t_«me
##
	`_ªmove
—_«me##
_Queue
* 
queue
, 
t
 
to_ªmove
);

	)

112 
	#TYPE_QUEUE_IMPLEMENTATION
(
t
, 
t_«me
) \

113 
t_«me
##
	`_öôülize_queue
 (t_«me##
_Queue
* 
queue
) \

115 
queue
->
‰⁄t_±r
 = queue->
back_±r
 = 
NULL
; \

116 
queue
->
size
 = 0; \

118 
t_«me
##
	`_íqueue
—_«me##
_Queue
* 
queue
, 
t
 
to_íqueue
) \

120 
queue
->
size
++; \

122 if(!
queue
->
back_±r
) \

123 
queue
->
back_±r
 = queue->
‰⁄t_±r
 = \

124 (
t_«me
##
_Queue_Node
*) \

125 (
	`DLIF_mÆloc
((
t_«me
##
_Queue_Node
))); \

128 
queue
->
back_±r
->
√xt_±r
 = \

129 (
t_«me
##
_Queue_Node
*)(
	`DLIF_mÆloc
( \

130 (
t_«me
##
_Queue_Node
))); \

131 
queue
->
back_±r
 = queue->back_±r->
√xt_±r
; \

134 i‡(
NULL
 !
queue
->
back_±r
) { \

135 
queue
->
back_±r
->
vÆue
 = 
to_íqueue
; \

136 
queue
->
back_±r
->
√xt_±r
 = 
NULL
; \

140 
t
 
t_«me
##
	`_dequeue
—_«me##
_Queue
* 
queue
) \

142 
t
 
to_ªt
; \

143 
t_«me
##
_Queue_Node
* 
√xt_±r
 = 
NULL
; \

145 i‡(!
queue
->
size
Ë ((
t
)(
NULL
)); \

147 
√xt_±r
 = 
queue
->
‰⁄t_±r
->next_ptr; \

148 
queue
->
size
--; \

149 
to_ªt
 = 
queue
->
‰⁄t_±r
->
vÆue
; \

150 
	`DLIF_‰ì
((*)(
queue
->
‰⁄t_±r
)); \

152 if(!
queue
->
size
) \

153 
queue
->
‰⁄t_±r
 = queue->
back_±r
 = 
NULL
; \

155 
queue
->
‰⁄t_±r
 = 
√xt_±r
; \

157  
to_ªt
; \

160 
t_«me
##
	`_ªmove
—_«me##
_Queue
* 
queue
, 
t
 
to_ªmove
) \

162 
t_«me
##
_Queue_Node
* 
¥ev_±r
 = 
NULL
; \

163 
t_«me
##
_Queue_Node
* 
cuº_±r
 = 
queue
->
‰⁄t_±r
; \

164 
t_«me
##
_Queue_Node
* 
√xt_±r
 = 
NULL
; \

166 ; 
cuº_±r
; cuº_±∏
√xt_±r
) \

168 
√xt_±r
 = 
cuº_±r
->next_ptr; \

169 i‡(
cuº_±r
->
vÆue
 =
to_ªmove
) ; \

170 
¥ev_±r
 = 
cuº_±r
; \

173 i‡(
cuº_±r
) \

175 i‡(
¥ev_±r
Ë¥ev_±r->
√xt_±r
 =Çext_ptr; \

176 
queue
->
size
--; \

177 
	`DLIF_‰ì
((*)(
cuº_±r
)); \

180 i‡(!
queue
->
size
) \

181 
queue
->
‰⁄t_±r
 = queue->
back_±r
 = 
NULL
; \

184 i‡(!
¥ev_±r
Ë
queue
->
‰⁄t_±r
 = 
√xt_±r
; \

185 i‡(!
√xt_±r
Ë
queue
->
back_±r
 = 
¥ev_±r
; \

187 }

	)

	@utils/elfload/include/Stack.h

68 #i‚de‡
STACK_H


69 
	#STACK_H


	)

71 
	~<öây≥s.h
>

72 
	~"dlﬂd_≠i.h
"

78 
	#TYPE_STACK_DEFINITION
(
t
, 
t_«me
) \

79 
t_«me
##
_Sèck_Node_
 \

81 
t
 
vÆue
; \

82 
t_«me
##
_Sèck_Node_
* 
√xt_±r
; \

84 
t_«me
##
	t_Sèck_Node_
 
	tt_«me
##
	t_Sèck_Node
; \

88 
t_«me
##
_Sèck_Node
* 
t›_±r
; \

89 
t_«me
##
_Sèck_Node
* 
bŸtom_±r
; \

90 
size
; \

91 } 
	tt_«me
##
	t_Sèck
; \

93 
t_«me
##
	`_öôülize_°ack
—_«me##
_Sèck
* 
°ack
); \

94 
t_«me
##
	`_push
—_«me##
_Sèck
* 
°ack
, 
t
 
to_push
); \

95 
t
 
t_«me
##
	`_p›
—_«me##
_Sèck
* 
°ack
);

	)

106 
	#TYPE_STACK_IMPLEMENTATION
(
t
, 
t_«me
) \

107 
t_«me
##
	`_öôülize_°ack
 (t_«me##
_Sèck
* 
°ack
) \

109 
°ack
->
t›_±r
 = sèck->
bŸtom_±r
 = 
NULL
; \

110 
°ack
->
size
 = 0; \

112 
t_«me
##
	`_push
—_«me##
_Sèck
* 
°ack
, 
t
 
to_push
) \

114 
°ack
->
size
++; \

116 if(!
°ack
->
t›_±r
) \

118 
°ack
->
bŸtom_±r
 = sèck->
t›_±r
 = \

119 (
t_«me
##
_Sèck_Node
*)(
	`DLIF_mÆloc
((t_name##_Stack_Node))); \

120 i‡(
NULL
 =
°ack
->
t›_±r
) \

122 
°ack
->
t›_±r
->
√xt_±r
 = 
NULL
; \

126 
t_«me
##
_Sèck_Node
* 
√xt_±r
 = 
°ack
->
t›_±r
; \

127 
°ack
->
t›_±r
 = \

128 (
t_«me
##
_Sèck_Node
*)(
	`DLIF_mÆloc
((t_name##_Stack_Node))); \

129 i‡(
NULL
 =
°ack
->
t›_±r
) \

131 
°ack
->
t›_±r
->
√xt_±r
 =Çext_ptr; \

134 
°ack
->
t›_±r
->
vÆue
 = 
to_push
; \

137 
t
 
t_«me
##
	`_p›
—_«me##
_Sèck
* 
°ack
) \

139 
t
 
to_ªt
; \

140 
t_«me
##
_Sèck_Node
* 
√xt_±r
 = 
°ack
->
t›_±r
->next_ptr; \

142 
°ack
->
size
--; \

143 
to_ªt
 = 
°ack
->
t›_±r
->
vÆue
; \

144 
	`DLIF_‰ì
((*)(
°ack
->
t›_±r
)); \

146 if(!
°ack
->
size
) \

147 
°ack
->
t›_±r
 = sèck->
bŸtom_±r
 = 
NULL
; \

149 
°ack
->
t›_±r
 = 
√xt_±r
; \

151  
to_ªt
; \

152 }

	)

	@utils/elfload/include/Std.h

43 #i‡!
deföed
(
STD_H
)

44 
	#STD_H


	)

46 #ifde‡
SYSLINK_BUILDOS_LINUX


47 
	~<°d_löux.h
>

49 
	~<uni°d.h
>

50 
	~<°dboﬁ.h
>

52 #i‡
deföed
 (
__˝lu•lus
)

56 
	tCh¨
;

57 
	tUCh¨
;

58 
	tSh‹t
;

59 
	tUSh‹t
;

60 
	tI¡
;

61 
	tUI¡
;

62 
	tL⁄g
;

63 
	tUL⁄g
;

64 
	tFlﬂt
;

65 
	tDoubÀ
;

66 
	tLDoubÀ
;

67 
	tVoid
;

70 
boﬁ
 
	tBoﬁ
;

71 * 
	tPå
;

72 * 
	tH™dÀ
;

73 * 
	tSåög
;

76 * 
	tIArg
;

77 * 
	tUArg
;

78 
	tI¡8
;

79 
	tI¡16
;

80 
	tI¡32
;

82 
	tUI¡8
;

83 
	tUI¡16
;

84 
	tUI¡32
;

85 
	tSizeT
;

86 
	tBôs8
;

87 
	tBôs16
;

88 
UI¡32
 
	tBôs32
;

91 *
	tPVOID
;

92 
PVOID
 
	tHANDLE
;

94 
	#TRUE
 1

	)

95 
	#FALSE
 0

	)

96 
	#FAIL
 -1

	)

99 #i‡
deföed
 (
__˝lu•lus
)

	@utils/elfload/include/arm_dynamic.h

39 #i‚de‡
DLOAD_ARM_H


40 
	#DLOAD_ARM_H


	)

42 
	~"dlﬂd.h
"

44 
BOOL
 
DLDYN_¨m_¥o˚ss_dy«mic_èg
(
DLIMP_Dy«mic_ModuÀ
* 
dyn_moduÀ
, 
i
);

45 
BOOL
 
DLDYN_¨m_ªloˇã_dy«mic_èg_öfo
(
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
,

46 
öt32_t
 
i
);

47 
BOOL
 
DLDYN_¨m_¥o˚ss_eioßbi
(
DLIMP_Dy«mic_ModuÀ
* 
dyn_moduÀ
);

	@utils/elfload/include/arm_elf32.h

45 #i‚de‡
ARM_ELF32_H


46 
	#ARM_ELF32_H


	)

48 
	~"ñf32.h
"

55 
	mEF_ARM_EABIMASK
 = 0xFF000000,

56 
	mEF_ARM_BE8
 = 0x00800000

64 
	mELFOSABI_ARM_AEABI
 = 64

72 
	mSHT_ARM_EXIDX
 = 0x70000001,

73 
	mSHT_ARM_PREEMPTMAP
 = 0x70000002,

74 
	mSHT_ARM_ATTRIBUTES
 = 0x70000003,

75 
	mSHT_ARM_DEBUGOVERLAY
 = 0x70000004,

76 
	mSHT_ARM_OVERLAYSECTION
 = 0x70000005

84 
	mPT_ARM_ARCHEXT
 = 0x70000000,

85 
	mPT_ARM_EXIDX
 = 0x70000001

93 
	mPT_ARM_ARCHEXT_FMTMSK
 =0xFF000000,

94 
	mPT_ARM_ARCHEXT_PROFMASK
 = 0x00FF0000,

95 
	mPT_ARM_ARCHEXT_ARCHMSK
 = 0x000000FF

103 
	mPT_ARM_ARCHEXT_FMT_OS
 = 0x0

111 
	mPT_ARM_ARCHEXT_PROF_NONE
 = 0x0,

112 
	mPT_ARM_ARCHEXT_PROF_ARM
 = 0x00410000,

113 
	mPT_ARM_ARCHEXT_PROF_RT
 = 0x00520000,

114 
	mPT_ARM_ARCHEXT_PROF_MC
 = 0x004D0000

122 
	mPT_ARM_ARCHEXT_ARCH_UNKN
 = 0x0,

123 
	mPT_ARM_ARCHEXT_ARCHv4
 = 0x1,

124 
	mPT_ARM_ARCHEXT_ARCHv4T
 = 0x2,

125 
	mPT_ARM_ARCHEXT_ARCHv5T
 = 0x3,

126 
	mPT_ARM_ARCHEXT_ARCHv5TE
 = 0x4,

127 
	mPT_ARM_ARCHEXT_ARCHv5TEJ
 = 0x5,

128 
	mPT_ARM_ARCHEXT_ARCHv6
 = 0x6,

129 
	mPT_ARM_ARCHEXT_ARCHv6KZ
 = 0x7,

130 
	mPT_ARM_ARCHEXT_ARCHv6T2
 = 0x8,

131 
	mPT_ARM_ARCHEXT_ARCHv6K
 = 0x9,

132 
	mPT_ARM_ARCHEXT_ARCHv7
 = 0xA

141 
	mDT_ARM_RESERVED1
 = 0x70000000,

142 
	mDT_ARM_SYMTABSZ
 = 0x70000001,

143 
	mDT_ARM_PREEMPTMAP
 = 0x70000002,

144 
	mDT_ARM_RESERVED2
 = 0x70000003

152 
	mR_ARM_NONE
 = 0,

153 
	mR_ARM_PC24
 = 1,

154 
	mR_ARM_ABS32
 = 2,

155 
	mR_ARM_REL32
 = 3,

156 
	mR_ARM_LDR_PC_G0
 = 4,

157 
	mR_ARM_ABS16
 = 5,

158 
	mR_ARM_ABS12
 = 6,

159 
	mR_ARM_THM_ABS5
 = 7,

160 
	mR_ARM_ABS8
 = 8,

161 
	mR_ARM_SBREL32
 = 9,

162 
	mR_ARM_THM_CALL
 = 10,

163 
	mR_ARM_THM_PC8
 = 11,

164 
	mR_ARM_BREL_ADJ
 = 12,

165 
	mR_ARM_SWI24
 = 13,

166 
	mR_ARM_THM_SWI8
 = 14,

167 
	mR_ARM_XPC25
 = 15,

168 
	mR_ARM_THM_XPC22
 = 16,

169 
	mR_ARM_TLS_DTPMOD32
 = 17,

170 
	mR_ARM_TLS_DTPOFF32
 = 18,

171 
	mR_ARM_TLS_TPOFF32
 = 19,

172 
	mR_ARM_COPY
 = 20,

173 
	mR_ARM_GLOB_DAT
 = 21,

174 
	mR_ARM_JUMP_SLOT
 = 22,

175 
	mR_ARM_RELATIVE
 = 23,

176 
	mR_ARM_GOTOFF32
 = 24,

177 
	mR_ARM_BASE_PREL
 = 25,

178 
	mR_ARM_GOT_BREL
 = 26,

179 
	mR_ARM_PLT32
 = 27,

180 
	mR_ARM_CALL
 = 28,

181 
	mR_ARM_JUMP24
 = 29,

182 
	mR_ARM_THM_JUMP24
 = 30,

183 
	mR_ARM_BASE_ABS
 = 31,

184 
	mR_ARM_ALU_PCREL_7_0
 = 32,

185 
	mR_ARM_ALU_PCREL_15_8
 = 33,

186 
	mR_ARM_ALU_PCREL_23_15
 = 34,

187 
	mR_ARM_LDR_SBREL_11_0_NC
 = 35,

188 
	mR_ARM_ALU_SBREL_19_12_NC
 = 36,

189 
	mR_ARM_ALU_SBREL_27_20_CK
 = 37,

190 
	mR_ARM_TARGET1
 = 38,

191 
	mR_ARM_SBREL31
 = 39,

192 
	mR_ARM_V4BX
 = 40,

193 
	mR_ARM_TARGET2
 = 41,

194 
	mR_ARM_PREL31
 = 42,

195 
	mR_ARM_MOVW_ABS_NC
 = 43,

196 
	mR_ARM_MOVT_ABS
 = 44,

197 
	mR_ARM_MOVW_PREL_NC
 = 45,

198 
	mR_ARM_MOVT_PREL
 = 46,

199 
	mR_ARM_THM_MOVW_ABS_NC
 = 47,

200 
	mR_ARM_THM_MOVT_ABS
 = 48,

201 
	mR_ARM_THM_MOVW_PREL_NC
 = 49,

202 
	mR_ARM_THM_MOVT_PREL
 = 50,

203 
	mR_ARM_THM_JUMP19
 = 51,

204 
	mR_ARM_THM_JUMP6
 = 52,

205 
	mR_ARM_THM_ALU_PREL_11_0
 = 53,

206 
	mR_ARM_THM_PC12
 = 54,

207 
	mR_ARM_ABS32_NOI
 = 55,

208 
	mR_ARM_REL32_NOI
 = 56,

209 
	mR_ARM_ALU_PC_G0_NC
 = 57,

210 
	mR_ARM_ALU_PC_G0
 = 58,

211 
	mR_ARM_ALU_PC_G1_NC
 = 59,

212 
	mR_ARM_ALU_PC_G1
 = 60,

213 
	mR_ARM_ALU_PC_G2
 = 61,

214 
	mR_ARM_LDR_PC_G1
 = 62,

215 
	mR_ARM_LDR_PC_G2
 = 63,

216 
	mR_ARM_LDRS_PC_G0
 = 64,

217 
	mR_ARM_LDRS_PC_G1
 = 65,

218 
	mR_ARM_LDRS_PC_G2
 = 66,

219 
	mR_ARM_LDC_PC_G0
 = 67,

220 
	mR_ARM_LDC_PC_G1
 = 68,

221 
	mR_ARM_LDC_PC_G2
 = 69,

222 
	mR_ARM_ALU_SB_G0_NC
 = 70,

223 
	mR_ARM_ALU_SB_G0
 = 71,

224 
	mR_ARM_ALU_SB_G1_NC
 = 72,

225 
	mR_ARM_ALU_SB_G1
 = 73,

226 
	mR_ARM_ALU_SB_G2
 = 74,

227 
	mR_ARM_LDR_SB_G0
 = 75,

228 
	mR_ARM_LDR_SB_G1
 = 76,

229 
	mR_ARM_LDR_SB_G2
 = 77,

230 
	mR_ARM_LDRS_SB_G0
 = 78,

231 
	mR_ARM_LDRS_SB_G1
 = 79,

232 
	mR_ARM_LDRS_SB_G2
 = 80,

233 
	mR_ARM_LDC_SB_G0
 = 81,

234 
	mR_ARM_LDC_SB_G1
 = 82,

235 
	mR_ARM_LDC_SB_G2
 = 83,

236 
	mR_ARM_MOVW_BREL_NC
 = 84,

237 
	mR_ARM_MOVT_BREL
 = 85,

238 
	mR_ARM_MOVW_BREL
 = 86,

239 
	mR_ARM_THM_MOVW_BREL_NC
 = 87,

240 
	mR_ARM_THM_MOVT_BREL
 = 88,

241 
	mR_ARM_THM_MOVW_BREL
 = 89,

242 
	mR_ARM_PLT32_ABS
 = 94,

243 
	mR_ARM_GOT_ABS
 = 95,

244 
	mR_ARM_GOT_PREL
 = 96,

245 
	mR_ARM_GOT_BREL12
 = 97,

246 
	mR_ARM_GOTOFF12
 = 98,

247 
	mR_ARM_GOTRELAX
 = 99,

248 
	mR_ARM_GNU_VTENTRY
 = 100,

249 
	mR_ARM_GNU_VTINHERIT
 = 101,

250 
	mR_ARM_THM_JUMP11
 = 102,

251 
	mR_ARM_THM_JUMP8
 = 103,

252 
	mR_ARM_TLS_GD32
 = 104,

253 
	mR_ARM_TLS_LDM32
 = 105,

254 
	mR_ARM_TLS_LDO32
 = 106,

255 
	mR_ARM_TLS_IE32
 = 107,

256 
	mR_ARM_TLS_LE32
 = 108,

257 
	mR_ARM_TLS_LDO12
 = 109,

258 
	mR_ARM_TLS_LE12
 = 110,

259 
	mR_ARM_TLS_IE12GP
 = 111,

260 
	mR_ARM_PRIVATE_0
 = 112,

261 
	mR_ARM_PRIVATE_1
 = 113,

262 
	mR_ARM_PRIVATE_2
 = 114,

263 
	mR_ARM_PRIVATE_3
 = 115,

264 
	mR_ARM_PRIVATE_4
 = 116,

265 
	mR_ARM_PRIVATE_5
 = 117,

266 
	mR_ARM_PRIVATE_6
 = 118,

267 
	mR_ARM_PRIVATE_7
 = 119,

268 
	mR_ARM_PRIVATE_8
 = 120,

269 
	mR_ARM_PRIVATE_9
 = 121,

270 
	mR_ARM_PRIVATE_10
 = 122,

271 
	mR_ARM_PRIVATE_11
 = 123,

272 
	mR_ARM_PRIVATE_12
 = 124,

273 
	mR_ARM_PRIVATE_13
 = 125,

274 
	mR_ARM_PRIVATE_14
 = 126,

275 
	mR_ARM_PRIVATE_15
 = 127,

276 
	mR_ARM_ME_TOO
 = 128,

277 
	mR_ARM_THM_TLS_DESCSEQ16
 = 129,

278 
	mR_ARM_THM_TLS_DESCSEQ32
 = 130

279 }
	tARM_RELOC_TYPE
;

	@utils/elfload/include/c60_dynamic.h

38 #i‚de‡
DLOAD_C60_H


39 
	#DLOAD_C60_H


	)

41 
	~"dlﬂd.h
"

43 
BOOL
 
DLDYN_c60_¥o˚ss_dy«mic_èg
(
DLIMP_Dy«mic_ModuÀ
* 
dyn_moduÀ
, 
i
);

44 
BOOL
 
DLDYN_c60_¥o˚ss_eioßbi
(
DLIMP_Dy«mic_ModuÀ
* 
dyn_moduÀ
);

45 
BOOL
 
DLDYN_c60_ªloˇã_dy«mic_èg_öfo
(
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
,

46 
öt32_t
 
i
);

	@utils/elfload/include/c60_elf32.h

38 #i‚de‡
C60_ELF32_H


39 
	#C60_ELF32_H


	)

41 
	~"ñf32.h
"

48 
	mELFOSABI_C6000_ELFABI
 = 64,

49 
	mELFOSABI_C6000_LINUX
 = 65

57 
	mEF_C6000_REL
 = 0x01

67 
	mPT_C6000_PHATTRS
 = 0x70000000

80 
	mSHT_C6000_UNWIND
 = 0x70000001,

81 
	mSHT_C6000_PREEMPTMAP
 = 0x70000002,

83 
	mSHT_C6000_ATTRIBUTES
 = 0x70000003,

92 
	mSHT_TI_ICODE
 = 0x7F000000,

93 
	mSHT_TI_XREF
 = 0x7F000001,

94 
	mSHT_TI_HANDLER
 = 0x7F000002,

95 
	mSHT_TI_INITINFO
 = 0x7F000003,

96 
	mSHT_TI_PHATTRS
 = 0x7F000004

112 
	mDT_C6000_GSYM_OFFSET
 = 0x6000000D,

113 
	mDT_C6000_GSTR_OFFSET
 = 0x6000000F,

119 
	mDT_C6000_DSBT_BASE
 = 0x70000000,

120 
	mDT_C6000_DSBT_SIZE
 = 0x70000001,

121 
	mDT_C6000_PREEMPTMAP
 = 0x70000002,

122 
	mDT_C6000_DSBT_INDEX
 = 0x70000003

130 
	mR_C6000_NONE
 = 0,

131 
	mR_C6000_ABS32
 = 1,

132 
	mR_C6000_ABS16
 = 2,

133 
	mR_C6000_ABS8
 = 3,

134 
	mR_C6000_PCR_S21
 = 4,

135 
	mR_C6000_PCR_S12
 = 5,

136 
	mR_C6000_PCR_S10
 = 6,

137 
	mR_C6000_PCR_S7
 = 7,

138 
	mR_C6000_ABS_S16
 = 8,

139 
	mR_C6000_ABS_L16
 = 9,

140 
	mR_C6000_ABS_H16
 = 10,

141 
	mR_C6000_SBR_U15_B
 = 11,

142 
	mR_C6000_SBR_U15_H
 = 12,

143 
	mR_C6000_SBR_U15_W
 = 13,

144 
	mR_C6000_SBR_S16
 = 14,

145 
	mR_C6000_SBR_L16_B
 = 15,

146 
	mR_C6000_SBR_L16_H
 = 16,

147 
	mR_C6000_SBR_L16_W
 = 17,

148 
	mR_C6000_SBR_H16_B
 = 18,

149 
	mR_C6000_SBR_H16_H
 = 19,

150 
	mR_C6000_SBR_H16_W
 = 20,

151 
	mR_C6000_SBR_GOT_U15_W
 = 21,

152 
	mR_C6000_SBR_GOT_L16_W
 = 22,

153 
	mR_C6000_SBR_GOT_H16_W
 = 23,

154 
	mR_C6000_DSBT_INDEX
 = 24,

155 
	mR_C6000_PREL31
 = 25,

156 
	mR_C6000_COPY
 = 26

157 }
	tC60_RELOC_TYPE
;

	@utils/elfload/include/dload.h

39 #i‚de‡
DLOAD_H


40 
	#DLOAD_H


	)

42 
	~"AºayLi°.h
"

43 
	~"Queue.h
"

44 
	~"Sèck.h
"

45 
	~"ñf32.h
"

46 
	~"dlﬂd_≠i.h
"

47 
	~"utû.h
"

48 
	~"Std.h
"

63 
Elf32_Phdr
 
	mphdr
;

64 
Elf32_Addr
 
	möput_vaddr
;

65 
BOOL
 
	mmodifõd
;

66 
öt32_t
 
	mªloc_off£t
;

67 
DLOAD_MEMORY_SEGMENT
 *
	mobj_desc
;

68 } 
	tDLIMP_Lﬂded_Segmít
;

85 *
	m«me
;

86 
öt32_t
 
	mfûe_h™dÀ
;

87 
öt32_t
 
	mu£_cou¡
;

88 
Elf32_Addr
 
	míåy_poöt
;

89 
Elf32_Sym
 *
	mgsymèb
;

90 
Elf32_W‹d
 
	mgsymnum
;

91 *
	mg°πab
;

92 
Elf32_W‹d
 
	mg°rsz
;

93 
Aºay_Li°
 
	mlﬂded_£gmíts
;

94 
Aºay_Li°
 
	mdïídícõs
;

95 
BOOL
 
	mdúe˘_dïídít_⁄ly
;

97 
Elf32_Addr
 
	mföi
;

98 
Elf32_Addr
 
	mföi_¨øy
;

99 
öt32_t
 
	mföi_¨øysz
;

101 } 
	tDLIMP_Lﬂded_ModuÀ
;

109 
	$TYPE_QUEUE_DEFINITION
(
DLIMP_Lﬂded_ModuÀ
*, 
lﬂded_moduÀ_±r
)

136 *
«me
;

137 
LOADER_FILE_DESC
 *
fd
;

138 
Elf32_Ehdr
 
fhdr
;

139 
Elf32_Phdr
 *
phdr
;

140 
Elf32_W‹d
 
phnum
;

141 * 
°πab
;

142 
Elf32_W‹d
 
°rsz
;

143 
Elf32_Dyn
 *
dy¡ab
;

147 
Elf32_Sym
 *
symèb
;

148 
Elf32_W‹d
 
symnum
;

149 
Elf32_W‹d
 
gsymèb_off£t
;

151 
Elf32_W‹d
 
g°πab_off£t
;

154 
uöt8_t
 *
c_¨gs
;

155 
öt32_t
 
¨gc
;

156 **
¨gv
;

157 
DLIMP_Lﬂded_ModuÀ
 *
lﬂded_moduÀ
;

158 
öt32_t
 
wr⁄g_ídün
;

159 
BOOL
 
dúe˘_dïídít_⁄ly
;

160 
BOOL
 
ªloˇèbÀ
;

163 
BOOL
 
ªloˇã_íåy_poöt
;

166 
öt32_t
 
dsbt_ödex
;

167 
uöt32_t
 
dsbt_size
;

168 
öt32_t
 
dsbt_ba£_ègidx
;

170 
öt32_t
 
¥eöô_¨øy_idx
;

171 
öt32_t
 
¥eöô_¨øysz
;

172 
öt32_t
 
öô_idx
;

173 
öt32_t
 
öô_¨øy_idx
;

174 
öt32_t
 
öô_¨øysz
;

176 } 
	tDLIMP_Dy«mic_ModuÀ
;

188 
	$TYPE_STACK_DEFINITION
(
DLIMP_Dy«mic_ModuÀ
*, 
dy«mic_moduÀ_±r
)

199 
Aºay_Li°
 
DLIMP_moduÀ_dïídícy_li°
;

205 
lﬂded_moduÀ_±r_Queue
 
DLIMP_lﬂded_obje˘s
;

213 
dy«mic_moduÀ_±r_Sèck
 
DLIMP_dïídícy_°ack
;

222 
öt32_t
 
fûe_h™dÀ
;

227 
DLOAD_TARGET_MACHINE
;

232 * 
˛õ¡_h™dÀ
;

233 } 
	tLOADER_OBJECT
;

241 
ölöe
 
BOOL
 
	$is_dsbt_moduÀ
(
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
)

243  (
dyn_moduÀ
->
dsbt_size
 != 0);

244 
	}
}

251 
ölöe
 
BOOL
 
	$is_¨m_moduÀ
(
Elf32_Ehdr
* 
fhdr
)

253  
fhdr
->
e_machöe
 =
EM_ARM
;

254 
	}
}

261 
ölöe
 
BOOL
 
	$is_c60_moduÀ
(
Elf32_Ehdr
* 
fhdr
)

263  
fhdr
->
e_machöe
 =
EM_TI_C6000
;

264 
	}
}

270 
DLOAD_TARGET_MACHINE
;

272 
uöt32_t
 
DLIMP_gë_fú°_dy¡ag
(
èg
, 
Elf32_Dyn
* 
dyn_èbÀ
);

277 #i‡
deföed
(
ARM_TARGET
Ë&& deföed(
C60_TARGET
)

278 
	#DLOAD_DEFAULT_TARGET_MACHINE
 (
EM_NONE
)

	)

279 #ñi‡
deföed
(
ARM_TARGET
)

280 
	#DLOAD_DEFAULT_TARGET_MACHINE
 (
EM_ARM
)

	)

281 #ñi‡
deföed
(
C60_TARGET
)

282 
	#DLOAD_DEFAULT_TARGET_MACHINE
 (
EM_TI_C6000
)

	)

301 
BOOL
 
DLIMP_upd©e_dy¡ag_£˘i⁄_addªss
(

302 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
,

303 
öt32_t
 
i
);

308 #i‚de‡
__TI_COMPILER_VERSION__


309 
	#LOADER_DEBUG
 1

	)

311 
	#LOADER_DEBUG
 0

	)

314 #unde‡
LOADER_DEBUG


315 
	#LOADER_DEBUG
 0

	)

316 
	#LOADER_PROFILE
 0

	)

318 #i‡
LOADER_DEBUG


319 
Boﬁ
 
debuggög_⁄
;

322 #i‡
LOADER_DEBUG
 || 
LOADER_PROFILE


323 
Boﬁ
 
¥ofûög_⁄
;

	@utils/elfload/include/dload4430.h

39 #i‚de‡
DLOAD4430_H


40 
	#DLOAD4430_H


	)

42 
	~"AºayLi°.h
"

43 
	~"Queue.h
"

44 
	~"Sèck.h
"

45 
	~"ñf32.h
"

46 
	~"dlﬂd_≠i.h
"

47 
	~"dlw_debug.h
"

48 
	~"dlw_ågmem.h
"

49 
	~"utû.h
"

50 
	~"Std.h
"

56 
	#DLOAD_MODULEID
 (
UI¡16
Ë0xÁde

	)

67 
	#DLOAD_STATUSCODEBASE
 (
DLOAD_MODULEID
 << 12u)

	)

73 
	#DLOAD_MAKE_FAILURE
(
x
Ë((
I¡
)( 0x80000000 \

74 | (
DLOAD_STATUSCODEBASE
 + (
x
))))

	)

80 
	#DLOAD_MAKE_SUCCESS
(
x
Ë(
DLOAD_STATUSCODEBASE
 + (x))

	)

86 
	#DLOAD_E_INVALIDARG
 
	`DLOAD_MAKE_FAILURE
(1)

	)

92 
	#DLOAD_E_MEMORY
 
	`DLOAD_MAKE_FAILURE
(2)

	)

98 
	#DLOAD_E_FAIL
 
	`DLOAD_MAKE_FAILURE
(3)

	)

104 
	#DLOAD_E_INVALIDSTATE
 
	`DLOAD_MAKE_FAILURE
(4)

	)

110 
	#DLOAD_E_HANDLE
 
	`DLOAD_MAKE_FAILURE
(5)

	)

116 
	#DLOAD_E_OSFAILURE
 
	`DLOAD_MAKE_FAILURE
(6)

	)

122 
	#DLOAD_E_ACCESSDENIED
 
	`DLOAD_MAKE_FAILURE
(7)

	)

128 
	#DLOAD_E_TRANSLATE
 
	`DLOAD_MAKE_FAILURE
(8)

	)

134 
	#DLOAD_SUCCESS
 
	`DLOAD_MAKE_SUCCESS
(0)

	)

140 
	#DLOAD_S_ALREADYSETUP
 
	`DLOAD_MAKE_SUCCESS
(1)

	)

146 
	#DLOAD_S_SETUP
 
	`DLOAD_MAKE_SUCCESS
(2)

	)

152 
	#DLOAD_S_OPENHANDLE
 
	`DLOAD_MAKE_SUCCESS
(3)

	)

158 
	#DLOAD_S_ALREADYEXISTS
 
	`DLOAD_MAKE_SUCCESS
(4)

	)

163 
	sDLﬂd4430_Obje˘_èg
 {

164 
UI¡32
 
	m›íRefCou¡
;

167 
Boﬁ
 
	m¸óãd
;

169 
UI¡16
 
	m¥ocId
;

172 
UI¡32
 
	mfûeId
;

175 * 
	mdynLﬂdMem
;

176 
UI¡32
 
	mdynLﬂdMemSize
;

178 
TRG_PACKET
 *
	måg_mem_hód
;

179 
BOOL
 
	måg_möô
;

181 
BOOL
 
	mDLL_debug
;

183 
TARGET_ADDRESS
 
	mDLModuÀs_loc
;

185 
múr‹_debug_±r_Queue
 
	mmúr‹_debug_li°
;

186 
dl_debug_Sèck
 
	mdl_debug_°k
;

188 
DLOAD_HANDLE
 
	mlﬂdîH™dÀ
;

190 } 
	tDLﬂd4430_Obje˘
;

196 
DLﬂd4430_Obje˘
 * 
	tDLﬂd4430_H™dÀ
;

201 
	sDLﬂd_C⁄fig
 {

202 
UI¡32
 
	mª£rved
;

204 } 
	tDLﬂd_C⁄fig
;

208 
	mDLOAD_MPU
 = 0,

209 
	mDLOAD_TESLA
 = 1,

210 
	mDLOAD_SYSM3
 = 2,

211 
	mDLOAD_APPM3
 = 3,

212 
	mDLOAD_END
 = 4

213 } 
	tDLﬂd_ProcId
;

215 
	#DLOAD_INVALIDFILEID
 = 0xFFFFFFFF;

	)

220 
	sDLﬂd_P¨ams_èg
 {

221 
UI¡32
 
	mª£rved
;

223 } 
	tDLﬂd_P¨ams
 ;

232 
Void
 
DLﬂd4430_gëC⁄fig
 (
DLﬂd_C⁄fig
 * 
cfg
);

235 
I¡
 
DLﬂd4430_£tup
 (
DLﬂd_C⁄fig
 * 
cfg
);

238 
I¡
 
DLﬂd4430_de°roy
 (
Void
);

241 
DLﬂd4430_H™dÀ
 
DLﬂd4430_¸óã
 (
UI¡16
 
¥ocId
, c⁄° 
DLﬂd_P¨ams
 * 
∑øms
);

244 
I¡
 
DLﬂd4430_dñëe
 (
DLﬂd4430_H™dÀ
 * 
h™dÀPå
);

247 
I¡


248 
DLﬂd4430_lﬂd
 (
DLﬂd4430_H™dÀ
 
h™dÀ
,

249 
Såög
 
imageP©h
,

250 
UI¡32
 
¨gc
,

251 
Såög
 * 
¨gv
,

252 
UI¡32
 * 
íåy_poöt
,

253 
UI¡32
 * 
fûeId
);

256 
I¡


257 
DLﬂd4430_u∆ﬂd
 (
DLﬂd4430_H™dÀ
 
h™dÀ
, 
UI¡32
 
fûeId
);

260 
I¡


261 
DLﬂd4430_gëE¡ryNamesInfo
 (
DLﬂd4430_H™dÀ
 
h™dÀ
,

262 
UI¡32
 
fûeId
,

263 
I¡32
 * 
íåy_±_˙t
,

264 
I¡32
 * 
íåy_±_max_«me_Àn
);

267 
I¡


268 
DLﬂd4430_gëE¡ryNames
 (
DLﬂd4430_H™dÀ
 
h™dÀ
,

269 
UI¡32
 
fûeId
,

270 
I¡32
 * 
íåy_±_˙t
,

271 
Ch¨
 *** 
íåy_±_«mes
);

274 
I¡


275 
DLﬂd4430_gëSymbﬁAddªss
 (
DLﬂd4430_H™dÀ
 
h™dÀ
,

276 
UI¡32
 
fûeId
,

277 
Såög
 
symbﬁName
,

278 
UI¡32
 * 
symVÆue
);

	@utils/elfload/include/dload_api.h

45 #i‚de‡
DLOAD_API_H


46 
	#DLOAD_API_H


	)

48 
	~<öây≥s.h
>

49 
	~<°dio.h
>

50 
	~"utû.h
"

60 
FILE
 
	tLOADER_FILE_DESC
;

62 c⁄° 
	gLOADER_SEEK_SET
 = 
SEEK_SET
;

63 c⁄° 
	gLOADER_SEEK_CUR
 = 
SEEK_CUR
;

64 c⁄° 
	gLOADER_SEEK_END
 = 
SEEK_END
;

69 * 
	tTARGET_ADDRESS
;

74 * 
	tDLOAD_HANDLE
;

87 
DLOAD_HANDLE
 
DLOAD_¸óã
(* 
˛õ¡_h™dÀ
);

95 
DLOAD_de°roy
(
DLOAD_HANDLE
 
h™dÀ
);

104 
DLOAD_öôülize
(
DLOAD_HANDLE
 
h™dÀ
);

113 
DLOAD_föÆize
(
DLOAD_HANDLE
 
h™dÀ
);

123 
BOOL
 
DLOAD_lﬂd_symbﬁs
(
DLOAD_HANDLE
 
h™dÀ
, 
LOADER_FILE_DESC
* 
Â
);

135 
DLOAD_lﬂd
(
DLOAD_HANDLE
 
h™dÀ
, 
LOADER_FILE_DESC
* 
Â
, 
¨gc
,

136 ** 
¨gv
);

146 
BOOL
 
DLOAD_u∆ﬂd
(
DLOAD_HANDLE
 
h™dÀ
, 
uöt32_t
 
p£ud›id
);

155 
BOOL
 
DLOAD_gë_íåy_«mes_öfo
(
DLOAD_HANDLE
 
h™dÀ
,

156 
uöt32_t
 
fûe_h™dÀ
,

157 
öt32_t
 *
íåy_±_˙t
,

158 
öt32_t
 *
íåy_±_max_«me_Àn
);

168 
BOOL
 
DLOAD_gë_íåy_«mes
(
DLOAD_HANDLE
 
h™dÀ
, 
uöt32_t
 
fûe_h™dÀ
,

169 
öt32_t
* 
íåy_±_˙t
, *** 
íåy_±_«mes
);

179 
BOOL
 
DLOAD_quîy_symbﬁ
(
DLOAD_HANDLE
 
h™dÀ
, 
uöt32_t
 
fûe_h™dÀ
,

180 c⁄° *
sym_«me
, 
TARGET_ADDRESS
 *
sym_vÆ
);

191 
BOOL
 
DLOAD_gë_íåy_poöt
(
DLOAD_HANDLE
 
h™dÀ
, 
uöt32_t
 
fûe_h™dÀ
,

192 
TARGET_ADDRESS
 *
sym_vÆ
);

219 
DLIF_f£ek
(
LOADER_FILE_DESC
 *
°ªam
, 
öt32_t
 
off£t
, 
‹igö
);

228 
öt32_t
 
DLIF_·ñl
(
LOADER_FILE_DESC
 *
°ªam
);

238 
size_t
 
DLIF_‰ód
(*
±r
, size_à
size
, size_à
nmemb
,

239 
LOADER_FILE_DESC
 *
°ªam
);

249 
DLIF_f˛o£
(
LOADER_FILE_DESC
 *
fd
);

270 * 
DLIF_mÆloc
(
size_t
 
size
);

278 
DLIF_‰ì
(* 
±r
);

299 
uöt32_t
 
	tDLOAD_SEGMENT_FLAGS
;

300 c⁄° 
	gDLOAD_SF_execuèbÀ
 = 0x1;

301 c⁄° 
	gDLOAD_SF_ªloˇèbÀ
 = 0x2;

307 
	sDLOAD_MEMORY_SEGMENT


309 
uöt32_t
 
	mèrgë_∑ge
;

310 
TARGET_ADDRESS
 
	mèrgë_addªss
;

311 
uöt32_t
 
	mobjsz_ö_byãs
;

312 
uöt32_t
 
	mmemsz_ö_byãs
;

313 
DLOAD_SEGMENT_FLAGS
 
	mÊags
;

321 
	sDLOAD_MEMORY_REQUEST


323 
LOADER_FILE_DESC
 *
	mÂ
;

324 
DLOAD_MEMORY_SEGMENT
 *
	m£gmít
;

325 *
	mho°_addªss
;

326 
BOOL
 
	mis_lﬂded
;

328 
uöt32_t
 
	moff£t
;

330 
uöt32_t
 
	mÊù_ídün
;

331 
DLOAD_SEGMENT_FLAGS
 
	mÊags
;

332 
uöt32_t
 
	mÆign
;

343 
DLIF_m≠TabÀ
(* 
˛õ¡_h™dÀ
);

351 
DLIF_unM≠TabÀ
(* 
˛õ¡_h™dÀ
);

362 
BOOL
 
DLIF_öôMem
(* 
˛õ¡_h™dÀ
, 
uöt32_t
 
dynMemAddr
, uöt32_à
size
);

371 
BOOL
 
DLIF_deöôMem
(* 
˛õ¡_h™dÀ
);

386 
BOOL
 
DLIF_Æloˇã
(* 
˛õ¡_h™dÀ
, 
DLOAD_MEMORY_REQUEST
 *
ªq
);

396 
BOOL
 
DLIF_ªÀa£
(* 
˛õ¡_h™dÀ
, 
DLOAD_MEMORY_SEGMENT
* 
±r
);

425 
BOOL
 
DLIF_c›y
(* 
˛õ¡_h™dÀ
, 
DLOAD_MEMORY_REQUEST
* 
ªq
);

440 
BOOL
 
DLIF_wrôe
(* 
˛õ¡_h™dÀ
, 
DLOAD_MEMORY_REQUEST
* 
ªq
);

448 
BOOL
 
DLIF_ªad
(* 
˛õ¡_h™dÀ
, *
±r
, 
size_t
 
size
, size_à
nmemb
,

449 
TARGET_ADDRESS
 
§c
);

459 
öt32_t
 
DLIF_execuã
(* 
˛õ¡_h™dÀ
, 
TARGET_ADDRESS
 
exec_addr
);

484 
DLIF_lﬂd_dïídít
(* 
˛õ¡_h™dÀ
, c⁄° * 
so_«me
);

494 
DLIF_u∆ﬂd_dïídít
(* 
˛õ¡_h™dÀ
, 
uöt32_t
 
fûe_h™dÀ
);

510 
	mDLWT_MISC
 = 0,

511 
	mDLWT_FILE


512 } 
	tLOADER_WARNING_TYPE
;

521 
DLIF_w¨nög
(
LOADER_WARNING_TYPE
 
wty≥
, c⁄° *
fmt
, ...);

527 
	mDLET_MISC
 = 0,

528 
	mDLET_FILE
,

529 
	mDLET_SYMBOL
,

530 
	mDLET_RELOC
,

531 
	mDLET_MEMORY
,

532 
	mDLET_TRGMEM
,

533 
	mDLET_DEBUG


534 } 
	tLOADER_ERROR_TYPE
;

543 
DLIF_îr‹
(
LOADER_ERROR_TYPE
 
ëy≥
, c⁄° *
fmt
, ...);

551 
DLIF_åa˚
(c⁄° *
fmt
, ...);

556 
	#DSBT_INDEX_INVALID
 -1

	)

557 
	#DSBT_DSBT_BASE_INVALID
 0

	)

558 
	#DSBT_STATIC_BASE_INVALID
 0

	)

573 
uöt32_t
 
DLOAD_gë_dsbt_size
(
DLOAD_HANDLE
 
h™dÀ
, 
öt32_t
 
fûe_h™dÀ
);

584 
BOOL
 
DLOAD_gë_dsbt_ba£
(
DLOAD_HANDLE
 
h™dÀ
, 
öt32_t
 
fûe_h™dÀ
,

585 
TARGET_ADDRESS
 *
dsbt_ba£
);

596 
BOOL
 
DLOAD_gë_°©ic_ba£
(
DLOAD_HANDLE
 
h™dÀ
, 
öt32_t
 
fûe_h™dÀ
,

597 
TARGET_ADDRESS
 *
°©ic_ba£
);

615 
BOOL
 
DLIF_ªgi°î_dsbt_ödex_ªque°
(
DLOAD_HANDLE
 
h™dÀ
,

616 c⁄° * 
ªque°‹_«me
,

617 
öt32_t
 
ªque°‹_fûe_h™dÀ
,

618 
öt32_t
 
ªque°ed_dsbt_ödex
);

629 
DLIF_assign_dsbt_ödi˚s
();

642 
öt32_t
 
DLIF_gë_dsbt_ödex
(öt32_à
fûe_h™dÀ
);

655 
BOOL
 
DLIF_upd©e_Æl_dsbts
();

	@utils/elfload/include/dload_endian.h

39 #i‚de‡
DLOAD_ENDIAN_H


40 
	#DLOAD_ENDIAN_H


	)

42 
	~"ñf32.h
"

48 
DLIMP_gë_ídün
();

49 
DLIMP_ch™ge_ídün32
(
öt32_t
* 
to_ch™ge
);

50 
DLIMP_ch™ge_ídün16
(
öt16_t
* 
to_ch™ge
);

51 
DLIMP_ch™ge_ehdr_ídün
(
Elf32_Ehdr
* 
to_ch™ge
);

52 
DLIMP_ch™ge_phdr_ídün
(
Elf32_Phdr
* 
to_ch™ge
);

53 
DLIMP_ch™ge_dy√¡_ídün
(
Elf32_Dyn
* 
to_ch™ge
);

54 
DLIMP_ch™ge_sym_ídün
(
Elf32_Sym
* 
to_ch™ge
);

55 
DLIMP_ch™ge_ªœ_ídün
(
Elf32_Rña
* 
to_ch™ge
);

56 
DLIMP_ch™ge_ªl_ídün
(
Elf32_Rñ
* 
to_ch™ge
);

	@utils/elfload/include/dlw_debug.h

39 #i‚de‡
DLW_DEBUG_H


40 
	#DLW_DEBUG_H


	)

42 
	~"dlﬂd_≠i.h
"

43 
	~"Queue.h
"

44 
	~"Sèck.h
"

53 
	#INIT_VERSION
 2

	)

54 
	#VERIFICATION
 0x79

	)

62 
uöt32_t
 
	mfú°_moduÀ_±r
;

63 
uöt16_t
 
	mfú°_moduÀ_size
;

64 
uöt16_t
 
	mupd©e_Êag
;

65 } 
	tDL_Debug_Li°_Hódî
;

71 
uöt32_t
 
	mlﬂd_addªss
;

72 
uöt32_t
 
	mrun_addªss
;

73 } 
	tDL_T¨gë_Segmít
;

75 
	s_DL_Ho°_Segmít
 {

76 
uöt32_t
 
	mlﬂd_addªss
;

77 
uöt32_t
 
	mrun_addªss
;

78 
_DL_Ho°_Segmít
 *
	m√xt_£gmít
;

79 } 
	tDL_Ho°_Segmít
;

91 
	mh™dÀ
;

92 *
	mmoduÀ_«me
;

93 
TARGET_ADDRESS
 
	mèrgë_addªss
;

94 
uöt32_t
 
	m√xt_moduÀ_±r
;

95 
uöt16_t
 
	m√xt_moduÀ_size
;

96 
	mnum_£gmíts
;

97 
DL_Ho°_Segmít
 *
	m£gmít_li°_hód
;

98 
DL_Ho°_Segmít
 *
	m£gmít_li°_èû
;

99 } 
	tDL_Ho°_ModuÀ_Debug
;

102 
uöt32_t
 
	m√xt_moduÀ_±r
;

103 
uöt16_t
 
	m√xt_moduÀ_size
;

104 
uöt16_t
 
	mtoﬁ_vîsi⁄
;

105 
uöt16_t
 
	mvîifiˇti⁄_w‹d
;

106 
uöt16_t
 
	mnum_£gmíts
;

107 
uöt32_t
 
	mtime°amp
;

108 
DL_T¨gë_Segmít
 
	m£gmíts
[1];

109 } 
	tDL_T¨gë_ModuÀ_Debug
;

127 
	$TYPE_STACK_DEFINITION
(
DL_Ho°_ModuÀ_Debug
*, 
dl_debug
)

134 
	$TYPE_QUEUE_DEFINITION
(
DL_Ho°_ModuÀ_Debug
*, 
múr‹_debug_±r
)

139 
	`DLDBG_add_ho°_ªc‹d
(* 
˛õ¡_h™dÀ
,

140 c⁄° *
moduÀ_«me
);

141 
	`DLDBG_add_èrgë_ªc‹d
(* 
˛õ¡_h™dÀ
,

142 
h™dÀ
);

143 
	`DLDBG_rm_èrgë_ªc‹d
(* 
˛õ¡_h™dÀ
,

144 
h™dÀ
);

145 
	`DLDBG_add_£gmít_ªc‹d
(* 
˛õ¡_h™dÀ
,

146 
DLOAD_MEMORY_SEGMENT
 *
obj_desc
);

147 
	`DLDBG_dump_múr‹_debug_li°
(* 
˛õ¡_h™dÀ
);

	@utils/elfload/include/dlw_dsbt.h

40 #i‚de‡
DLW_DSBT_H


41 
	#DLW_DSBT_H


	)

43 
	~"Queue.h
"

44 
	~"dlﬂd_≠i.h
"

53 *
	m«me
;

54 
öt32_t
 
	mfûe_h™dÀ
;

55 
uöt32_t
 
	mdsbt_size
;

56 
TARGET_ADDRESS
 
	mdsbt_ba£
;

57 
TARGET_ADDRESS
 
	m°©ic_ba£
;

58 
öt32_t
 
	mªque°ed_ödex
;

59 
öt32_t
 
	massig√d_ödex
;

60 } 
	tDSBT_Index_Reque°
;

69 
DSBT_Index_Reque°
 *
	mödex_ªque°
;

70 } 
	tDSBT_E¡ry
;

78 
	$TYPE_QUEUE_DEFINITION
(
DSBT_Index_Reque°
*, 
dsbt_ödex_ªque°_±r
)

79 
dsbt_ödex_ªque°_±r_Queue
 
DSBT_ödex_ªque°_queue
;

84 
Aºay_Li°
 
DSBT_ma°î
;

94 
	`DSBT_ªÀa£_íåy
(
öt32_t
 
fûe_h™dÀ
);

	@utils/elfload/include/dlw_trgmem.h

40 #i‚de‡
DLW_TRGMEM_H


41 
	#DLW_TRGMEM_H


	)

43 
	~"dlﬂd_≠i.h
"

48 
	#MIN_BLOCK
 4

	)

58 
	s_åg_∑ckë


61 
uöt32_t
 
	m∑ckë_addr
;

62 
uöt32_t
 
	m∑ckë_size
;

63 
_åg_∑ckë
 *
	m¥ev_∑ckë
;

64 
_åg_∑ckë
 *
	m√xt_∑ckë
;

65 
BOOL
 
	mu£d_∑ckë
;

66 } 
	tTRG_PACKET
;

71 
BOOL
 
DLTMM_öô
(* 
˛õ¡_h™dÀ
, 
uöt32_t
 
dynMemAddr
, uöt32_à
size
);

72 
BOOL
 
DLTMM_deöô
(* 
˛õ¡_h™dÀ
);

73 
BOOL
 
DLTMM_mÆloc
(* 
˛õ¡_h™dÀ
,

74 
DLOAD_MEMORY_REQUEST
 *
èrg_ªq
,

75 
DLOAD_MEMORY_SEGMENT
 *
obj_desc
);

76 
DLTMM_‰ì
(* 
˛õ¡_h™dÀ
, 
TARGET_ADDRESS
 
±r
);

78 
DLTMM_fwrôe_åg_mem
(
FILE
 *
Â
);

79 
DLTMM_‰ód_åg_mem
(
FILE
 *
Â
);

80 
DLTMM_dump_åg_mem
(
uöt32_t
 
off£t
, uöt32_à
nbyãs
,

81 
FILE
* 
Â
);

	@utils/elfload/include/elf32.h

57 #i‚de‡
ELF32_H


58 
	#ELF32_H


	)

60 
	~<öây≥s.h
>

65 
uöt32_t
 
	tElf32_Addr
;

66 
uöt16_t
 
	tElf32_HÆf
;

67 
uöt32_t
 
	tElf32_Off
;

68 
öt32_t
 
	tElf32_Sw‹d
;

69 
uöt32_t
 
	tElf32_W‹d
;

82 
	mEI_MAG0
 = 0,

83 
	mEI_MAG1
 = 1,

84 
	mEI_MAG2
 = 2,

85 
	mEI_MAG3
 = 3,

86 
	mEI_CLASS
 = 4,

87 
	mEI_DATA
 = 5,

88 
	mEI_VERSION
 = 6,

89 
	mEI_OSABI
 = 7,

90 
	mEI_ABIVERSION
 = 8,

91 
	mEI_PAD
 = 9,

92 
	mEI_NIDENT
 = 16

99 
	sElf32_Ehdr


101 
uöt8_t
 
	me_idít
[
EI_NIDENT
];

102 
Elf32_HÆf
 
	me_ty≥
;

103 
Elf32_HÆf
 
	me_machöe
;

104 
Elf32_W‹d
 
	me_vîsi⁄
;

105 
Elf32_Addr
 
	me_íåy
;

106 
Elf32_Off
 
	me_phoff
;

107 
Elf32_Off
 
	me_shoff
;

108 
Elf32_W‹d
 
	me_Êags
;

109 
Elf32_HÆf
 
	me_ehsize
;

110 
Elf32_HÆf
 
	me_phítsize
;

111 
Elf32_HÆf
 
	me_phnum
;

112 
Elf32_HÆf
 
	me_shítsize
;

113 
Elf32_HÆf
 
	me_shnum
;

114 
Elf32_HÆf
 
	me_sh°∫dx
;

123 
	mET_NONE
 = 0,

124 
	mET_REL
 = 1,

125 
	mET_EXEC
 = 2,

126 
	mET_DYN
 = 3,

127 
	mET_CORE
 = 4,

128 
	mET_LOOS
 = 0xfe00,

129 
	mET_HIPS
 = 0xfeff,

130 
	mET_LOPROC
 = 0xff00,

131 
	mET_HIPROC
 = 0xffff

140 
	mEM_NONE
 = 0,

141 
	mEM_M32
 = 1,

142 
	mEM_SPARC
 = 2,

143 
	mEM_386
 = 3,

144 
	mEM_68K
 = 4,

145 
	mEM_88K
 = 5,

146 
	mEM_860
 = 7,

147 
	mEM_MIPS
 = 8,

148 
	mEM_S370
 = 9,

149 
	mEM_MIPS_RS3_LE
 = 10,

150 
	mEM_PARISC
 = 15,

151 
	mEM_VPP500
 = 17,

152 
	mEM_SPARC32PLUS
 = 18,

153 
	mEM_960
 = 19,

154 
	mEM_PPC
 = 20,

155 
	mEM_PPC64
 = 21,

156 
	mEM_S390
 = 22,

157 
	mEM_V800
 = 36,

158 
	mEM_FR20
 = 37,

159 
	mEM_RH32
 = 38,

160 
	mEM_RCE
 = 39,

161 
	mEM_ARM
 = 40,

162 
	mEM_ALPHA
 = 41,

163 
	mEM_SH
 = 42,

164 
	mEM_SPARCV9
 = 43,

165 
	mEM_TRICORE
 = 44,

166 
	mEM_ARC
 = 45,

167 
	mEM_H8_300
 = 46,

168 
	mEM_H8_300H
 = 47,

169 
	mEM_H8S
 = 48,

170 
	mEM_H8_500
 = 49,

171 
	mEM_IA_64
 = 50,

172 
	mEM_MIPS_X
 = 51,

173 
	mEM_COLDFIRE
 = 52,

174 
	mEM_68HC12
 = 53,

175 
	mEM_MMA
 = 54,

176 
	mEM_PCP
 = 55,

177 
	mEM_NCPU
 = 56,

178 
	mEM_NDR1
 = 57,

179 
	mEM_STARCORE
 = 58,

180 
	mEM_ME16
 = 59,

181 
	mEM_ST100
 = 60,

182 
	mEM_TINYJ
 = 61,

183 
	mEM_X86_64
 = 62,

184 
	mEM_PDSP
 = 63,

185 
	mEM_PDP10
 = 64,

186 
	mEM_PDP11
 = 65,

187 
	mEM_FX66
 = 66,

188 
	mEM_ST9PLUS
 = 67,

189 
	mEM_ST7
 = 68,

190 
	mEM_68HC16
 = 69,

191 
	mEM_68HC11
 = 70,

192 
	mEM_68HC08
 = 71,

193 
	mEM_68HC05
 = 72,

194 
	mEM_SVX
 = 73,

195 
	mEM_ST19
 = 74,

196 
	mEM_VAX
 = 75,

197 
	mEM_CRIS
 = 76,

198 
	mEM_JAVELIN
 = 77,

199 
	mEM_FIREPATH
 = 78,

200 
	mEM_ZSP
 = 79,

201 
	mEM_MMIX
 = 80,

202 
	mEM_HUANY
 = 81,

203 
	mEM_PRISM
 = 82,

204 
	mEM_AVR
 = 83,

205 
	mEM_FR30
 = 84,

206 
	mEM_D10V
 = 85,

207 
	mEM_D30V
 = 86,

208 
	mEM_V850
 = 87,

209 
	mEM_M32R
 = 88,

210 
	mEM_MN10300
 = 89,

211 
	mEM_MN10200
 = 90,

212 
	mEM_PJ
 = 91,

213 
	mEM_OPENRISC
 = 92,

214 
	mEM_ARC_A5
 = 93,

215 
	mEM_XTENSA
 = 94,

216 
	mEM_VIDEOCORE
 = 95,

217 
	mEM_TMM_GPP
 = 96,

218 
	mEM_NS32K
 = 97,

219 
	mEM_TPC
 = 98,

220 
	mEM_SNP1K
 = 99,

221 
	mEM_ST200
 = 100,

222 
	mEM_IP2K
 = 101,

223 
	mEM_MAX
 = 102,

224 
	mEM_CR
 = 103,

225 
	mEM_F2MC16
 = 104,

226 
	mEM_MSP430
 = 105,

227 
	mEM_BLACKFIN
 = 106,

228 
	mEM_SE_C33
 = 107,

229 
	mEM_SEP
 = 108,

230 
	mEM_ARCA
 = 109,

231 
	mEM_UNICORE
 = 110,

243 
	mEM_TI_C6000
 = 140,

244 
	mEM_TI_UNUSED02
 = 141,

245 
	mEM_TI_UNUSED03
 = 142,

246 
	mEM_TI_UNUSED04
 = 143,

247 
	mEM_TI_UNUSED05
 = 144,

248 
	mEM_TI_UNUSED06
 = 145,

249 
	mEM_TI_UNUSED07
 = 146,

250 
	mEM_TI_UNUSED08
 = 147,

251 
	mEM_TI_UNUSED09
 = 148,

252 
	mEM_TI_UNUSED10
 = 149,

253 
	mEM_TI_UNUSED11
 = 150,

254 
	mEM_TI_UNUSED12
 = 151,

255 
	mEM_TI_UNUSED13
 = 152,

256 
	mEM_TI_UNUSED14
 = 153,

257 
	mEM_TI_UNUSED15
 = 154,

258 
	mEM_TI_UNUSED16
 = 155,

259 
	mEM_TI_UNUSED17
 = 156,

260 
	mEM_TI_UNUSED18
 = 157,

261 
	mEM_TI_UNUSED19
 = 158,

262 
	mEM_TI_UNUSED20
 = 159

271 
	mEV_NONE
 = 0,

272 
	mEV_CURRENT
 = 1

288 
	mELFMAG0
 = 0x7f,

289 
	mELFMAG1
 = 'E',

290 
	mELFMAG2
 = 'L',

291 
	mELFMAG3
 = 'F'

297 
	mELFCLASSNONE
 = 0,

298 
	mELFCLASS32
 = 1,

299 
	mELFCLASS64
 = 2

305 
	mELFDATANONE
 = 0,

306 
	mELFDATA2LSB
 = 1,

307 
	mELFDATA2MSB
 = 2

313 
	mELFOSABI_NONE
 = 0,

314 
	mELFOSABI_HPUX
 = 1,

315 
	mELFOSABI_NETBSD
 = 2,

316 
	mELFOSABI_LINUX
 = 3,

317 
	mELFOSABI_SOLARIS
 = 6,

318 
	mELFOSABI_AIX
 = 7,

319 
	mELFOSABI_IRIX
 = 8,

320 
	mELFOSABI_FREEBSD
 = 9,

321 
	mELFOSABI_TRU64
 = 10,

322 
	mELFOSABI_MODESTO
 = 11,

323 
	mELFOSABI_OPENBSD
 = 12,

324 
	mELFOSABI_OPENVMS
 = 13,

325 
	mELFOSABI_NSK
 = 14,

326 
	mELFOSABI_AROS
 = 15

337 
	sElf32_Phdr


339 
Elf32_W‹d
 
	mp_ty≥
;

340 
Elf32_Off
 
	mp_off£t
;

341 
Elf32_Addr
 
	mp_vaddr
;

342 
Elf32_Addr
 
	mp_∑ddr
;

343 
Elf32_W‹d
 
	mp_fûesz
;

344 
Elf32_W‹d
 
	mp_memsz
;

345 
Elf32_W‹d
 
	mp_Êags
;

346 
Elf32_W‹d
 
	mp_Æign
;

354 
	mPT_NULL
 = 0,

355 
	mPT_LOAD
 = 1,

356 
	mPT_DYNAMIC
 = 2,

357 
	mPT_INTERP
 = 3,

358 
	mPT_NOTE
 = 4,

359 
	mPT_SHLIB
 = 5,

360 
	mPT_PHDR
 = 6,

361 
	mPT_TLS
 = 7,

362 
	mPT_LOOS
 = 0x60000000,

363 
	mPT_HIOS
 = 0x6fffffff,

364 
	mPT_LOPROC
 = 0x70000000,

365 
	mPT_HIPROC
 = 0x7fffffff

373 
	mPF_X
 = 0x1,

374 
	mPF_W
 = 0x2,

375 
	mPF_R
 = 0x4,

376 
	mPF_MASKOS
 = 0x0ff00000,

377 
	mPF_MASKPROC
 = 0xf0000000

388 
	sElf32_Shdr


390 
Elf32_W‹d
 
	msh_«me
;

391 
Elf32_W‹d
 
	msh_ty≥
;

392 
Elf32_W‹d
 
	msh_Êags
;

393 
Elf32_Addr
 
	msh_addr
;

394 
Elf32_Off
 
	msh_off£t
;

395 
Elf32_W‹d
 
	msh_size
;

396 
Elf32_W‹d
 
	msh_lök
;

397 
Elf32_W‹d
 
	msh_öfo
;

398 
Elf32_W‹d
 
	msh_addølign
;

399 
Elf32_W‹d
 
	msh_ítsize
;

407 
	mSHN_UNDEF
 = 0,

408 
	mSHN_LORESERVE
 = 0xff00,

409 
	mSHN_LOPROC
 = 0xff00,

410 
	mSHN_HIPROC
 = 0xff1f,

411 
	mSHN_LOOS
 = 0xff20,

412 
	mSHN_HIOS
 = 0xff3f,

413 
	mSHN_ABS
 = 0xfff1,

414 
	mSHN_COMMON
 = 0xfff2,

415 
	mSHN_XINDEX
 = 0xffff,

416 
	mSHN_HIRESERVE
 = 0xffff

424 
	mSHT_NULL
 = 0,

425 
	mSHT_PROGBITS
 = 1,

426 
	mSHT_SYMTAB
 = 2,

427 
	mSHT_STRTAB
 = 3,

428 
	mSHT_RELA
 = 4,

429 
	mSHT_HASH
 = 5,

430 
	mSHT_DYNAMIC
 = 6,

431 
	mSHT_NOTE
 = 7,

432 
	mSHT_NOBITS
 = 8,

433 
	mSHT_REL
 = 9,

434 
	mSHT_SHLIB
 = 10,

435 
	mSHT_DYNSYM
 = 11,

436 
	mSHT_INIT_ARRAY
 = 14,

437 
	mSHT_FINI_ARRAY
 = 15,

438 
	mSHT_PREINIT_ARRAY
 = 16,

439 
	mSHT_GROUP
 = 17,

440 
	mSHT_SYMTAB_SHNDX
 = 18,

441 
	mSHT_LOOS
 = 0x60000000,

442 
	mSHT_HIOS
 = 0x6fffffff,

443 
	mSHT_LOPROC
 = 0x70000000,

444 
	mSHT_HIPROC
 = 0x7fffffff,

445 
	mSHT_LOUSER
 = 0x80000000,

446 
	mSHT_HIUSER
 = 0xffffffff

454 
	mSHF_WRITE
 = 0x1,

455 
	mSHF_ALLOC
 = 0x2,

456 
	mSHF_EXECINSTR
 = 0x4,

457 
	mSHF_MERGE
 = 0x10,

458 
	mSHF_STRINGS
 = 0x20,

459 
	mSHF_INFO_LINK
 = 0x40,

460 
	mSHF_LINK_ORDER
 = 0x80,

461 
	mSHF_OS_NONCONFORMING
 = 0x100,

462 
	mSHF_GROUP
 = 0x200,

463 
	mSHF_TLS
 = 0x400,

464 
	mSHF_MASKOS
 = 0x0ff00000,

465 
	mSHF_MASKPROC
 = 0xf0000000

473 
	mGRP_COMDAT
 = 0x1,

474 
	mGRP_MASKOS
 = 0x0ff00000,

475 
	mGRP_MASKPROC
 = 0xf0000000

487 
	sElf32_Sym


489 
Elf32_W‹d
 
	m°_«me
;

490 
Elf32_Addr
 
	m°_vÆue
;

491 
Elf32_W‹d
 
	m°_size
;

492 
uöt8_t
 
	m°_öfo
;

493 
uöt8_t
 
	m°_Ÿhî
;

494 
Elf32_HÆf
 
	m°_shndx
;

502 
	mSTN_UNDEF
 = 0

508 
ölöe
 
uöt8_t
 
	$ELF32_ST_BIND
(
uöt8_t
 
i
Ë{  (ò>> 4); 
	}
}

509 
ölöe
 
uöt8_t
 
	$ELF32_ST_TYPE
(
uöt8_t
 
i
Ë{  (ò& 0xf); 
	}
}

510 
ölöe
 
uöt8_t
 
	$ELF32_ST_INFO
(
uöt8_t
 
b
, uöt8_à
t
)

511 {  ((
b
 << 4Ë+ (
t
 & 0xf)); 
	}
}

512 
ölöe
 
uöt8_t
 
	$ELF32_ST_VISIBILITY
(
uöt8_t
 
o
Ë{  (ÿ& 0x3); 
	}
}

520 
	mSTB_LOCAL
 = 0,

521 
	mSTB_GLOBAL
 = 1,

522 
	mSTB_WEAK
 = 2,

523 
	mSTB_LOOS
 = 10,

524 
	mSTB_HIOS
 = 12,

525 
	mSTB_LOPROC
 = 13,

526 
	mSTB_HIPROC
 = 15

534 
	mSTT_NOTYPE
 = 0,

535 
	mSTT_OBJECT
 = 1,

536 
	mSTT_FUNC
 = 2,

537 
	mSTT_SECTION
 = 3,

538 
	mSTT_FILE
 = 4,

539 
	mSTT_COMMON
 = 5,

540 
	mSTT_TLS
 = 6,

541 
	mSTT_LOOS
 = 10,

542 
	mSTT_HIOS
 = 12,

543 
	mSTT_LOPROC
 = 13,

544 
	mSTT_HIPROC
 = 15

552 
	mSTV_DEFAULT
 = 0,

553 
	mSTV_INTERNAL
 = 1,

554 
	mSTV_HIDDEN
 = 2,

555 
	mSTV_PROTECTED
 = 3

566 
	sElf32_Rñ


568 
Elf32_Addr
 
	mr_off£t
;

569 
Elf32_W‹d
 
	mr_öfo
;

572 
	sElf32_Rña


574 
Elf32_Addr
 
	mr_off£t
;

575 
Elf32_W‹d
 
	mr_öfo
;

576 
Elf32_Sw‹d
 
	mr_addíd
;

582 
ölöe
 
uöt32_t
 
	$ELF32_R_SYM
(
uöt32_t
 
i
Ë{  (ò>> 8); 
	}
}

583 
ölöe
 
uöt8_t
 
	$ELF32_R_TYPE
(
uöt32_t
 
i
Ë{  (ò& 0xFF); 
	}
}

584 
ölöe
 
uöt32_t
 
	$ELF32_R_INFO
(
uöt32_t
 
s
, 
uöt8_t
 
t
)

585 {  ((
s
 << 8Ë+ 
t
); 
	}
}

592 
	sElf32_Dyn


594 
Elf32_Sw‹d
 
	md_èg
;

597 
Elf32_W‹d
 
	md_vÆ
;

598 
Elf32_Addr
 
	md_±r
;

599 } 
	md_un
;

606 
	mDT_NULL
 = 0,

607 
	mDT_NEEDED
 = 1,

608 
	mDT_PLTRELSZ
 = 2,

609 
	mDT_PLTGOT
 = 3,

610 
	mDT_HASH
 = 4,

611 
	mDT_STRTAB
 = 5,

612 
	mDT_SYMTAB
 = 6,

613 
	mDT_RELA
 = 7,

614 
	mDT_RELASZ
 = 8,

615 
	mDT_RELAENT
 = 9,

616 
	mDT_STRSZ
 = 10,

617 
	mDT_SYMENT
 = 11,

618 
	mDT_INIT
 = 12,

619 
	mDT_FINI
 = 13,

620 
	mDT_SONAME
 = 14,

621 
	mDT_RPATH
 = 15,

622 
	mDT_SYMBOLIC
 = 16,

623 
	mDT_REL
 = 17,

624 
	mDT_RELSZ
 = 18,

625 
	mDT_RELENT
 = 19,

626 
	mDT_PLTREL
 = 20,

627 
	mDT_DEBUG
 = 21,

628 
	mDT_TEXTREL
 = 22,

629 
	mDT_JMPREL
 = 23,

630 
	mDT_BIND_NOW
 = 24,

631 
	mDT_INIT_ARRAY
 = 25,

632 
	mDT_FINI_ARRAY
 = 26,

633 
	mDT_INIT_ARRAYSZ
 = 27,

634 
	mDT_FINI_ARRAYSZ
 = 28,

635 
	mDT_RUNPATH
 = 29,

636 
	mDT_FLAGS
 = 30,

637 
	mDT_ENCODING
 = 32,

638 
	mDT_PREINIT_ARRAY
 = 32,

639 
	mDT_PREINIT_ARRAYSZ
 = 33,

640 
	mDT_LOOS
 = 0x60000000,

641 
	mDT_HIOS
 = 0x6ffff000,

642 
	mDT_LOPROC
 = 0x70000000,

643 
	mDT_HIPROC
 = 0x7fffffff

652 
	mDF_ORIGIN
 = 0x01,

653 
	mDF_SYMBOLIC
 = 0x02,

654 
	mDF_TEXTREL
 = 0x04,

655 
	mDF_BIND_NOW
 = 0x08,

656 
	mDF_STATIC_TLS
 = 0x10,

657 
	mDF_DIRECT_DEPENDENT
 = 0x20,

658 
	mDF_WORLD
 = 0x40

670 
	mEDYN_UNTYPE_IGNORED
,

671 
	mEDYN_UNTYPE_VAL
,

672 
	mEDYN_UNTYPE_PTR
,

673 
	mEDYN_UNTYPE_UNSPECIFIED


681 
	mEDYN_TAGREQ_IGNORED
,

682 
	mEDYN_TAGREQ_MANDATORY
,

683 
	mEDYN_TAGREQ_OPTIONAL
,

684 
	mEDYN_TAGREQ_UNSPECIFIED


690 
	sEDYN_TAG


692 c⁄° * 
	md_èg_«me
;

693 
Elf32_Sw‹d
 
	md_èg_vÆue
;

694 
Elf32_W‹d
 
	md_u¡y≥
;

695 
Elf32_W‹d
 
	md_exec_ªq
;

696 
Elf32_W‹d
 
	md_sh¨ed_ªq
;

699 c⁄° 
EDYN_TAG
 
EDYN_TAG_DB
[];

708 
	#ESCN_BSS_«me
 ".bss"

	)

709 
	#ESCN_COMMENT_«me
 ".commít"

	)

710 
	#ESCN_DATA1_«me
 ".d©a1"

	)

711 
	#ESCN_DATA_«me
 ".d©a"

	)

712 
	#ESCN_DEBUG_«me
 ".debug"

	)

713 
	#ESCN_DYNAMIC_«me
 ".dy«mic"

	)

714 
	#ESCN_DYNSTR_«me
 ".dyn°r"

	)

715 
	#ESCN_DYNSYM_«me
 ".dynsym"

	)

716 
	#ESCN_FINI_ARRAY_«me
 ".föi_¨øy"

	)

717 
	#ESCN_FINI_«me
 ".föi"

	)

718 
	#ESCN_GOT_«me
 ".gŸ"

	)

719 
	#ESCN_HASH_«me
 ".hash"

	)

720 
	#ESCN_INIT_ARRAY_«me
 ".öô_¨øy"

	)

721 
	#ESCN_INIT_«me
 ".öô"

	)

722 
	#ESCN_INTERP_«me
 ".öãΩ"

	)

723 
	#ESCN_LINE_«me
 ".löe"

	)

724 
	#ESCN_NOTE_«me
 ".nŸe"

	)

725 
	#ESCN_PLT_«me
 ".∂t"

	)

726 
	#ESCN_PREINIT_ARRAY_«me
 ".¥eöô_¨øy"

	)

727 
	#ESCN_RELA_«me
 ".ªœ"

	)

728 
	#ESCN_REL_«me
 ".ªl"

	)

729 
	#ESCN_RODATA1_«me
 ".rod©a1"

	)

730 
	#ESCN_RODATA_«me
 ".rod©a"

	)

731 
	#ESCN_SHSTRTAB_«me
 ".sh°πab"

	)

732 
	#ESCN_STRTAB_«me
 ".°πab"

	)

733 
	#ESCN_SYMTAB_SHNDX_«me
 ".symèb_shndx"

	)

734 
	#ESCN_SYMTAB_«me
 ".symèb"

	)

735 
	#ESCN_TBSS_«me
 ".tbss"

	)

736 
	#ESCN_TDATA1_«me
 ".td©a1"

	)

737 
	#ESCN_TDATA_«me
 ".td©a"

	)

738 
	#ESCN_TEXT_«me
 ".ãxt"

	)

739 
	#ESCN_ATTRIBUTES_«me
 "__TI_buûd_©åibuãs"

	)

740 
	#ESCN_ICODE_«me
 "__TI_ICODE"

	)

741 
	#ESCN_XREF_«me
 "__TI_XREF"

	)

746 
	sESCN


748 c⁄° *
	m«me
;

749 
Elf32_W‹d
 
	msh_ty≥
;

750 
Elf32_W‹d
 
	msh_ítsize
;

751 
Elf32_W‹d
 
	msh_Êags
;

754 c⁄° 
ESCN
 
ESCN_DB
[];

	@utils/elfload/include/relocate.h

41 #i‚de‡
RELOCATE_H


42 
	#RELOCATE_H


	)

44 
	~<öây≥s.h
>

45 
	~"ñf32.h
"

46 
	~"dlﬂd.h
"

47 
	~"dlﬂd_≠i.h
"

52 #i‡
LOADER_DEBUG
 || 
LOADER_PROFILE


53 
	~<time.h
>

54 
DLREL_ªloˇti⁄s
;

55 
time_t
 
DLREL_tŸÆ_ªloc_time
;

62 
DLREL_ªloˇã
(
DLOAD_HANDLE
 
h™dÀ
, 
LOADER_FILE_DESC
 *
ñf_fûe
,

63 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
);

65 
DLREL_ªloˇã_c60
(
DLOAD_HANDLE
 
h™dÀ
, 
LOADER_FILE_DESC
 *
fd
,

66 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
);

	@utils/elfload/include/std_linux.h

42 #i‡!
deföed
(
STD_LINUX_H
)

43 
	#STD_LINUX_H


	)

45 
	~<°dio.h
>

	@utils/elfload/include/symtab.h

40 #i‚de‡
SYMTAB_H


41 
	#SYMTAB_H


	)

43 
	~"AºayLi°.h
"

44 
	~"dlﬂd.h
"

50 
öt32_t
 
DLIMP_≠∂iˇti⁄_h™dÀ
;

55 
BOOL
 
DLSYM_ˇn⁄iˇl_lookup
(
DLOAD_HANDLE
 
h™dÀ
,

56 
öt32_t
 
sym_ödex
,

57 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
,

58 
Elf32_Addr
 *
sym_vÆue
);

60 
BOOL
 
DLSYM_globÆ_lookup
(
DLOAD_HANDLE
 
h™dÀ
,

61 c⁄° *
sym_«me
,

62 
DLIMP_Lﬂded_ModuÀ
 *
≥¡ry
,

63 
Elf32_Addr
 *
sym_vÆue
);

65 
BOOL
 
DLSYM_lookup_loˇl_symèb
(c⁄° *
sym_«me
,

66 
Elf32_Sym
 *
symèb
,

67 
Elf32_W‹d
 
symnum
,

68 
Elf32_Addr
 *
sym_vÆue
);

70 
DLSYM_c›y_globÆs
(
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
);

72 
BOOL
 
DLSYM_lookup_globÆ_symèb
(c⁄° *
sym_«me
, 
Elf32_Sym
 *
symèb
,

73 
Elf32_W‹d
 
symnum
, 
Elf32_Addr
 *
sym_vÆue
);

	@utils/elfload/include/util.h

41 #i‚de‡
UTIL_H


42 
	#UTIL_H


	)

44 
	~<˘y≥.h
>

50 
	#MIN
(
x
,
y
Ë(((xË> (y)Ë? (yË: (x))

	)

51 
	#MAX
(
x
,
y
Ë(((xË>(y)Ë? (xË: (y))

	)

56 
	tBOOL
;

57 
	#TRUE
 1

	)

58 
	#FALSE
 0

	)

	@utils/elfload/symtab.c

43 
	~"ñf32.h
"

44 
	~"AºayLi°.h
"

49 
	~"Queue.h
"

50 
	$TYPE_QUEUE_DEFINITION
(
öt32_t
, 
I¡32
)

51 
	$TYPE_QUEUE_IMPLEMENTATION
(
öt32_t
, 
I¡32
)

53 
	~"symèb.h
"

54 
	~"dlﬂd_≠i.h
"

55 
	~<°dio.h
>

56 
	~<°dlib.h
>

57 
	~<°rög.h
>

62 
öt32_t
 
DLIMP_≠∂iˇti⁄_h™dÀ
 = 0;

68 
	$DLSYM_c›y_globÆs
(
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
)

70 
Elf32_W‹d
 
i
, 
globÆ_ödex
, 
globÆ_symnum
;

71 
DLIMP_Lﬂded_ModuÀ
 *
moduÀ
 = 
dyn_moduÀ
->
lﬂded_moduÀ
;

73 #i‡
LOADER_DEBUG


74 i‡(
debuggög_⁄
)

75 
	`DLIF_åa˚
("DLSYM_copy_globals:\n");

84 
globÆ_ödex
 = 
dyn_moduÀ
->
gsymèb_off£t
 / (
Elf32_Sym
);

85 
globÆ_symnum
 = 
dyn_moduÀ
->
symnum
 - 
globÆ_ödex
;

91 i‡(
moduÀ
->
gsymèb
)

92 
	`DLIF_‰ì
(
moduÀ
->
gsymèb
);

93 
moduÀ
->
gsymèb
 = 
	`DLIF_mÆloc
((
Elf32_Sym
Ë* 
globÆ_symnum
);

94 
moduÀ
->
gsymnum
 = 
globÆ_symnum
;

96 i‡(
moduÀ
->
gsymèb
)

97 
	`mem˝y
(
moduÀ
->
gsymèb
,

98 &
dyn_moduÀ
->
symèb
[
globÆ_ödex
],

99 (
Elf32_Sym
Ë* 
globÆ_symnum
);

104 i‡(
moduÀ
->
g°πab
)

105 
	`DLIF_‰ì
(
moduÀ
->
g°πab
);

107 
moduÀ
->
g°rsz
 = 
dyn_moduÀ
->
°rsz
 - dyn_moduÀ->
g°πab_off£t
;

108 
moduÀ
->
g°πab
 = 
	`DLIF_mÆloc
(moduÀ->
g°rsz
);

110 i‡(
moduÀ
->
g°πab
)

111 
	`mem˝y
(
moduÀ
->
g°πab
,

112 
dyn_moduÀ
->
°πab
 + dyn_moduÀ->
g°πab_off£t
,

113 
moduÀ
->
g°rsz
);

122 
i
 = 0; i < 
globÆ_symnum
; i++)

125 
Elf32_W‹d
 
ﬁd_off£t
 = 
dyn_moduÀ
->
symèb
[
i
 + 
globÆ_ödex
].
°_«me
 -

126 (
Elf32_Addr
Ë
dyn_moduÀ
->
°πab
;

127 
Elf32_W‹d
 
√w_off£t
 = 
ﬁd_off£t
 - 
dyn_moduÀ
->
g°πab_off£t
;

128 if(
moduÀ
->
gsymèb
) {

129 
Elf32_Sym
 *
sym
 = &((Elf32_Sym*)(
moduÀ
->
gsymèb
))[
i
];

130 
sym
->
°_«me
 = 
√w_off£t
 + (
Elf32_Addr
)
moduÀ
->
g°πab
;

132 #i‡
LOADER_DEBUG


133 i‡(
debuggög_⁄
Ë
	`DLIF_åa˚
("Copying symbol: %s\n", (*)

134 
dyn_moduÀ
->
symèb
[
i
 + 
globÆ_ödex
].
°_«me
);

137 
	}
}

143 
BOOL
 
	$bªadth_fú°_lookup
(
DLOAD_HANDLE
 
ph™dÀ
,

144 c⁄° * 
sym_«me
,

145 
h™dÀ
,

146 
Elf32_Addr
 *
sym_vÆue
)

152 
I¡32_Queue
 
fûe_h™dÀ_queue
;

153 
	`I¡32_öôülize_queue
(&
fûe_h™dÀ_queue
);

154 
	`I¡32_íqueue
(&
fûe_h™dÀ_queue
, 
h™dÀ
);

155 
LOADER_OBJECT
 *
dH™dÀ
 = (LOADER_OBJECT *)
ph™dÀ
;

160 
fûe_h™dÀ_queue
.
size
)

162 
i
;

168 
lﬂded_moduÀ_±r_Queue_Node
* 
mod_node
 =

169 
dH™dÀ
->
DLIMP_lﬂded_obje˘s
.
‰⁄t_±r
;

170 * 
dïídícõs
 = (*)(
mod_node
->
vÆue
->dïídícõs.
buf
);

176 
h™dÀ
 = 
	`I¡32_dequeue
(&
fûe_h™dÀ_queue
);

181 
mod_node
->
vÆue
->
fûe_h™dÀ
 !
h™dÀ
) mod_node++;

187 i‡(
	`DLSYM_lookup_globÆ_symèb
(
sym_«me
,

188 
mod_node
->
vÆue
->
gsymèb
,

189 
mod_node
->
vÆue
->
gsymnum
,

190 
sym_vÆue
))

191  
TRUE
;

197 
i
 = 0; i < 
mod_node
->
vÆue
->
dïídícõs
.
size
; i++)

198 
	`I¡32_íqueue
(&
fûe_h™dÀ_queue
, 
dïídícõs
[
i
]);

204  
FALSE
;

205 
	}
}

211 
BOOL
 
	$DLSYM_globÆ_lookup
(
DLOAD_HANDLE
 
h™dÀ
,

212 c⁄° *
sym_«me
,

213 
DLIMP_Lﬂded_ModuÀ
 *
lﬂded_moduÀ
,

214 
Elf32_Addr
 *
sym_vÆue
)

216 
i
 = 0;

217 
lﬂded_moduÀ_±r_Queue_Node
* 
node
;

218 
LOADER_OBJECT
 *
dH™dÀ
 = (LOADER_OBJECT *)
h™dÀ
;

220 #i‡
LOADER_DEBUG


221 i‡(
debuggög_⁄
)

222 
	`DLIF_åa˚
("DLSYM_globÆ_lookup: %s\n", 
sym_«me
);

231 i‡(
lﬂded_moduÀ
->
dúe˘_dïídít_⁄ly
)

233 * 
chûd_h™dÀ
 = (*)(
lﬂded_moduÀ
->
dïídícõs
.
buf
);

240 
i
 = 0; i < 
lﬂded_moduÀ
->
dïídícõs
.
size
; i++)

242 
node
 = 
dH™dÀ
->
DLIMP_lﬂded_obje˘s
.
‰⁄t_±r
;

243 
node
->
vÆue
->
fûe_h™dÀ
 !
chûd_h™dÀ
[
i
];

244 
node
Úode->
√xt_±r
);

249 i‡(
	`DLSYM_lookup_globÆ_symèb
(
sym_«me
,

250 
node
->
vÆue
->
gsymèb
,

251 
node
->
vÆue
->
gsymnum
,

252 
sym_vÆue
))

253  
TRUE
;

265 i‡(
	`bªadth_fú°_lookup
(
h™dÀ
, 
sym_«me
, 
DLIMP_≠∂iˇti⁄_h™dÀ
,

266 
sym_vÆue
))

267  
TRUE
;

273 
	`DLIF_îr‹
(
DLET_SYMBOL
, "CouldÇŸÑesﬁvêsymbﬁ %s!\n", 
sym_«me
);

275  
FALSE
;

276 
	}
}

284 
BOOL
 
	$DLSYM_lookup_symèb
(c⁄° *
sym_«me
, 
Elf32_Sym
 *
symèb
,

285 
Elf32_W‹d
 
symnum
, 
Elf32_Addr
 *
sym_vÆue
,

286 
BOOL
 
ªquúe_loˇl_bödög
)

288 
Elf32_Addr
 
sym_idx
;

289 
sym_idx
 = 0; sym_idx < 
symnum
; sym_idx++)

291 #i‡
LOADER_DEBUG


292 i‡(
debuggög_⁄
)

293 
	`DLIF_åa˚
("DLSYM_lookup_symtab %s\n",

294 (*)
symèb
[
sym_idx
].
°_«me
);

297 i‡((
symèb
[
sym_idx
].
°_shndx
 !
SHN_UNDEF
) &&

298 ((
ªquúe_loˇl_bödög
 &&

299 (
	`ELF32_ST_BIND
(
symèb
[
sym_idx
].
°_öfo
Ë=
STB_LOCAL
)) ||

300 (!
ªquúe_loˇl_bödög
 &&

301 (
	`ELF32_ST_BIND
(
symèb
[
sym_idx
].
°_öfo
Ë!
STB_LOCAL
))) &&

302 !
	`°rcmp
(
sym_«me
,(*)(
symèb
[
sym_idx
].
°_«me
)))

304 i‡(
sym_vÆue
Ë*sym_vÆuê
symèb
[
sym_idx
].
°_vÆue
;

305  
TRUE
;

309 i‡(
sym_vÆue
) *sym_value = 0;

310  
FALSE
;

311 
	}
}

319 
BOOL
 
	$DLSYM_lookup_globÆ_symèb
(c⁄° *
sym_«me
, 
Elf32_Sym
 *
symèb
,

320 
Elf32_W‹d
 
symnum
, 
Elf32_Addr
 *
sym_vÆue
)

322  
	`DLSYM_lookup_symèb
(
sym_«me
, 
symèb
, 
symnum
, 
sym_vÆue
, 
FALSE
);

323 
	}
}

331 
BOOL
 
	$DLSYM_lookup_loˇl_symèb
(c⁄° *
sym_«me
, 
Elf32_Sym
 *
symèb
,

332 
Elf32_W‹d
 
symnum
, 
Elf32_Addr
 *
sym_vÆue
)

334  
	`DLSYM_lookup_symèb
(
sym_«me
, 
symèb
, 
symnum
, 
sym_vÆue
, 
TRUE
);

335 
	}
}

345 
BOOL
 
	$DLSYM_ˇn⁄iˇl_lookup
(
DLOAD_HANDLE
 
h™dÀ
,

346 
sym_ödex
,

347 
DLIMP_Dy«mic_ModuÀ
 *
dyn_moduÀ
,

348 
Elf32_Addr
 *
sym_vÆue
)

353 
Elf32_Sym
 *
sym
 = &
dyn_moduÀ
->
symèb
[
sym_ödex
];

354 
öt32_t
 
°_böd
 = 
	`ELF32_ST_BIND
(
sym
->
°_öfo
);

355 
öt32_t
 
°_vis
 = 
	`ELF32_ST_VISIBILITY
(
sym
->
°_Ÿhî
);

356 
BOOL
 
is_def
 = (
sym
->
°_shndx
 !
SHN_UNDEF
 &&

357 (
sym
->
°_shndx
 < 
SHN_LORESERVE
 ||

358 
sym
->
°_shndx
 =
SHN_XINDEX
));

359 c⁄° *
sym_«me
 = (*)
sym
->
°_«me
;

361 #i‡
LOADER_DEBUG


362 i‡(
debuggög_⁄
)

363 
	`DLIF_åa˚
("DLSYM_ˇn⁄iˇl_lookup: %d, %s\n", 
sym_ödex
, 
sym_«me
);

370 i‡(
°_böd
 =
STB_LOCAL
 || 
°_vis
 !
STV_DEFAULT
)

377 i‡(!
is_def
)

379 
	`DLIF_îr‹
(
DLET_SYMBOL
,

381 "ö moduÀ %s!\n", 
sym_«me
, 
dyn_moduÀ
->
«me
);

382  
FALSE
;

386 i‡(
sym_vÆue
Ë*sym_vÆuê
sym
->
°_vÆue
;

387  
TRUE
;

396  
	`DLSYM_globÆ_lookup
(
h™dÀ
, 
sym_«me
, 
dyn_moduÀ
->
lﬂded_moduÀ
,

397 
sym_vÆue
);

399 
	}
}

	@utils/genextbin.c

43 
	~<°dio.h
>

44 
	~<°dlib.h
>

45 
	~<uni°d.h
>

46 
	~<sys/°©.h
>

47 
	~<°rög.h
>

49 
	~"Ωrcfmt.h
"

50 
	~"mmudefs.h
"

52 
	#RPROC_MAX_MEM_ENTRIES
 20

	)

54 
	#RPROC_MAX_FW_SECTIONS
 30

	)

56 
	#RPROC_L1_ENTRIES
 4096

	)

58 
	#DEBUG_TOC_FILE
 "sign_toc.log"

	)

59 
	#DEBUG_MMU_FILE
 "mmu_âb_dump.log"

	)

61 
	#FW_MMU_BASE_PA
 0xB4200000

	)

62 
	#FW_SIGNATURE_BASE_PA
 (
FW_MMU_BASE_PA
 + 0x80000)

	)

64 
	#VERSION
 "1.05"

	)

66 
check_image
(* 
d©a
, 
size
);

68 
¥o˚ss_image
(
FILE
 *
ioÂ
, * 
d©a
, 
size
);

71 
u64
 
	mva
;

72 
u64
 
	m∑
;

73 
u32
 
	mÀn
;

74 } 
	tva_∑_íåy
;

77 
u32
 
	m£˘_id
;

78 
u32
 
	moff£t
;

79 
u32
 
	m£˘_∑
;

80 
u32
 
	m£˘_Àn
;

81 } 
	tfw_toc_íåy
;

83 
va_∑_íåy
 
	gva_∑_èbÀ
[
RPROC_MAX_MEM_ENTRIES
];

84 
u32
 
	gmmu_l1_èbÀ
[
RPROC_L1_ENTRIES
];

86 
	$¥öt_hñp
()

88 
	`Ârötf
(
°dîr
, "\nInvalidárguments!\n"

98 
	`exô
(1);

99 
	}
}

104 
	$maö
(
¨gc
, * 
¨gv
[])

106 
FILE
 * 
iÂ
;

107 
FILE
 * 
oÂ
;

108 
°©
 
°
;

109 * 
öfûe
;

110 * 
outfûe
;

111 * 
d©a
;

112 
size
;

113 
°©us
 = 0;

114 
i
, 
o
;

115 *
bö_fûes
[] = {
NULL
, NULL};

116 
num_fûes
 = (
bö_fûes
) / (bin_files[0]);

118 
	`¥ötf
("#######################################\n");

119 
	`¥ötf
(" GENEXTBIN : %† \n", 
VERSION
);

120 
	`¥ötf
("#######################################\n");

123 (
o
 = 
	`gë›t
 (
¨gc
, 
¨gv
, ":i:o:")) != -1) {

124 
o
) {

126 
bö_fûes
[0] = 
›èrg
;

129 
bö_fûes
[1] = 
›èrg
;

132 
°©us
 = -1;

133 
	`¥ötf
("O±i⁄ -%¯ªquúe†™ o≥ønd\n", 
›t›t
);

136 
°©us
 = -1;

137 
	`¥ötf
("Uƒecognized o±i⁄: -%c\n", 
›t›t
);

142 
i
 = 0; 
›töd
 < 
¨gc
; optind++) {

143 
i
 < 
num_fûes
 && 
bö_fûes
[i]) i++;

144 i‡(
i
 =
num_fûes
) {

145 
	`¥öt_hñp
();

147 
bö_fûes
[
i
++] = 
¨gv
[
›töd
];

150 i‡(
°©us
 || !
bö_fûes
[0] ||

151 (
bö_fûes
[1] && (!
	`°rcmp
(bin_files[0], bin_files[1])))) {

152 
	`¥öt_hñp
();

155 
	`¥ötf
("Input Binary = %s, Output Binary = %s\n",

156 
bö_fûes
[0], bin_files[1]);

157 
öfûe
 = 
bö_fûes
[0];

158 i‡((
iÂ
 = 
	`f›í
(
öfûe
, "a+b")Ë=
NULL
) {

159 
	`Ârötf
(
°dîr
, "%s: couldÇŸ o≥n: %s\n", 
¨gv
[0], 
öfûe
);

160 
	`exô
(2);

163 
	`f°©
(
	`fûío
(
iÂ
), &
°
);

164 
size
 = 
°
.
°_size
;

165 i‡(!
size
) {

166 
	`Ârötf
(
°dîr
, "%s: %†sizêi†övÆid.\n", 
¨gv
[0], 
öfûe
);

167 
	`f˛o£
(
iÂ
);

168 
	`exô
(3);

171 
outfûe
 = 
bö_fûes
[1];

172 i‡(
outfûe
 && ((
oÂ
 = 
	`f›í
(outfûe, "w+b")Ë=
NULL
)) {

173 
	`Ârötf
(
°dîr
, "%s: couldÇŸ o≥n: %s\n", 
¨gv
[0], 
outfûe
);

174 
	`f˛o£
(
iÂ
);

175 
	`exô
(2);

178 
	`¥ötf
("Pª∑rög bö¨y: %†o‡size: 0x%x\n", 
öfûe
, 
size
);

179 
d©a
 = 
	`mÆloc
(
size
);

180 
	`‰ód
(
d©a
, 1, 
size
, 
iÂ
);

182 
°©us
 = 
	`check_image
(
d©a
, 
size
);

183 i‡(
°©us
 == 0) {

184 i‡(
outfûe
) {

185 
	`fwrôe
(
d©a
, 1, 
size
, 
oÂ
);

188 
oÂ
 = 
iÂ
;

190 
°©us
 = 
	`¥o˚ss_image
(
oÂ
, 
d©a
, 
size
);

193 
	`‰ì
(
d©a
);

194 i‡(
outfûe
) {

195 
	`f˛o£
(
oÂ
);

197 
	`f˛o£
(
iÂ
);

199  
°©us
;

200 
	}
}

205 
	$add_mem_íåy
(
Ωroc_fw_ªsour˚
 *
rsc
)

207 
va_∑_íåy
 *
me
 = 
va_∑_èbÀ
;

208 
i
 = 0;

209 
ªt
 = 0;

211 
me
->
va
 || me->
∑
 || me->
Àn
) {

212 
me
 += 1;

213 
i
++;

214 i‡(
i
 =
RPROC_MAX_MEM_ENTRIES
) {

215 
	`¥ötf
(" No more space in VA->PA Table\n");

216 
ªt
 = -1;

221 i‡(!
ªt
) {

222 
me
->
va
 = 
rsc
->
da
;

223 
me
->
∑
 = 
rsc
->pa;

224 
me
->
Àn
 = 
rsc
->len;

225 
	`¥ötf
(" AddedÉntry %d: va 0x%.8llxÖa 0x%.8llxÜen 0x%.8x\n",

226 
i
, 
me
->
va
, me->
∑
, me->
Àn
);

229  
ªt
;

230 
	}
}

235 
	$va_to_∑
(
u64
 
va
, u64 *
∑
)

237 
i
;

238 
u64
 
off£t
;

240 
i
 = 0; 
va_∑_èbÀ
[i].
Àn
; i++) {

241 c⁄° 
va_∑_íåy
 *
me
 = &
va_∑_èbÀ
[
i
];

243 i‡(
va
 >
me
->v®&& v®< (me->v®+ me->
Àn
)) {

244 
off£t
 = 
va
 - 
me
->va;

245 
	`¥ötf
(" %s: m©ched memÉ¡ryÇo. %d\n", 
__func__
, 
i
);

246 *
∑
 = 
me
->∑ + 
off£t
;

252 
	}
}

257 
	$dump_âb
()

259 
FILE
 * 
Â
;

260 
i
 = 0;

262 i‡((
Â
 = 
	`f›í
(
DEBUG_MMU_FILE
, "w+b")Ë=
NULL
) {

263 
	`Ârötf
(
°dîr
, "couldÇŸ o≥n: "
DEBUG_MMU_FILE
"\n");

267 
	`Ârötf
(
Â
, " VA PA \n");

268 
i
 = 0; i < 
RPROC_L1_ENTRIES
; i++) {

269 
	`Ârötf
(
Â
, "0x%.8x 0x%.8x\n", 
i
 << 20, 
mmu_l1_èbÀ
[i]);

272 
	`f˛o£
(
Â
);

273 
	}
}

280 
	$¸óã_âb
()

282 
i
, 
j
;

283 
va_∑_íåy
 *
me
 = 
va_∑_èbÀ
;

284 
u32
 
va
, 
∑
;

285 
u32
 
va_∑
;

286 
u32
 
size
;

287 
u32
 
mmu_sizes
[4] = {
SZ_16M
, 
SZ_1M
, 
SZ_64K
, 
SZ_4K
};

288 
u32
 
ödex
;

290 
me
->
∑
 && me->
Àn
) {

291 
size
 = 
me
->
Àn
;

292 
va
 = 
me
->va;

293 
∑
 = 
me
->pa;

295 
	`¥ötf
("Preparing MMUÉntry for va = 0x%xÖa = 0x%xÜen = 0x%x\n",

296 
va
, 
∑
, 
size
);

297 
size
) {

298 
va_∑
 = 
va
 | 
∑
;

299 
i
 = 0; i < 4; i++) {

300 i‡((
size
 >
mmu_sizes
[
i
]) &&

301 ((
va_∑
 & (
mmu_sizes
[
i
] - 1)) == 0)) {

306 i‡(
i
 =
MMU_L1_SSECTION
) {

307 
	`¥ötf
(" ProgrammingÑegionás 16MÉntry: 0x%x for 0x%x\n",

308 
va
, 
∑
);

309 
ödex
 = ((
va
 & 
MMU_L1_SECTION_MASK
) >> 20);

310 
j
 = 0; j < 16; j++) {

311 
mmu_l1_èbÀ
[
ödex
 + 
j
] = (
∑
 & 
MMU_L1_SSECTION_MASK
) |

312 
MMU_L1_SSECTION_FLAGS
;

315 i‡(
i
 =
MMU_L1_SECTION
) {

316 
	`¥ötf
(" ProgrammingÑegionás 1MÉntry: 0x%x for 0x%x\n",

317 
va
, 
∑
);

318 
ödex
 = ((
va
 & 
MMU_L1_SECTION_MASK
) >> 20);

319 
mmu_l1_èbÀ
[
ödex
] = (
∑
 & 
MMU_L1_SECTION_MASK
) |

320 
MMU_L1_SECTION_FLAGS
;

322 i‡(
i
 =
MMU_L2_LPAGE
 || i =
MMU_L2_SPAGE
) {

323 
	`¥ötf
(" Invalid memoryÉntry. AllÉntries shouldÉither be "

327 
size
 -
mmu_sizes
[
i
];

328 
va
 +
mmu_sizes
[
i
];

329 
∑
 +
mmu_sizes
[
i
];

332 
me
 += 1;

335 
	`dump_âb
();

336 
	}
}

341 
	$¥o˚ss_ªsour˚s
(
Ωroc_fw_£˘i⁄
 * 
s
)

343 
Ωroc_fw_ªsour˚
 * 
ªs
 = (Ωroc_fw_ªsour˚ * )
s
->
c⁄ã¡
;

344 
i
;

346 
	`¥ötf
("processingÑesourceÅable...Üen: 0x%x\n",

347 (
Ωroc_fw_ªsour˚
));

348 
i
 = 0; i < 
s
->
Àn
 / (
Ωroc_fw_ªsour˚
); i++) {

349 
	`¥ötf
("resource: %d, da: 0x%.8llx,Öa: 0x%.8llx,Üen: 0x%.8x,Çame: %s\n",

350 
ªs
[
i
].
ty≥
,Ñes[i].
da
,Ñes[i].
∑
,Ñes[i].
Àn
,Ñes[i].
«me
);

351 
ªs
[
i
].
ty≥
) {

352 
RSC_DEVMEM
:

353 
RSC_CARVEOUT
:

354 i‡(
ªs
[
i
].
∑
) {

355 
	`add_mem_íåy
(&
ªs
[
i
]);

358 
	`¥ötf
(" Entry with undefined PA (to beássigned!)\n");

362 
	`¥ötf
(" NothingÅo do forÅhisÑesource\n");

366 
	`¥ötf
("resourceÅableÖrocessed...\n");

367 
	}
}

372 
	$check_image
(* 
d©a
, 
size
)

374 
Ωroc_fw_hódî
 *
hdr
;

375 
Ωroc_fw_£˘i⁄
 *
s
;

376 
f_off£t
 = 0;

378 
	`¥ötf
("\nChecking header....");

379 
hdr
 = (
Ωroc_fw_hódî
 *)
d©a
;

382 i‡(
	`memcmp
(
hdr
->
magic
, 
RPROC_FW_MAGIC
, (hdr->magic))) {

383 
	`Ârötf
(
°dîr
, "övÆid magi¯numbî: %.4s\n", 
hdr
->
magic
);

386 
	`¥ötf
("done.\n");

388 
	`¥ötf
("Checking sections....");

390 
s
 = (
Ωroc_fw_£˘i⁄
 *)(
hdr
->
hódî
 + hdr->
hódî_Àn
);

391 
f_off£t
 +(
u8
 *)
s
 - (u8 *)
d©a
;

393 (
u8
 *)
s
 < (u8 *)(
d©a
 + 
size
)) {

394 
f_off£t
 +(
u8
 *)
s
->
c⁄ã¡
 - (u8 *)s;

395 i‡(
s
->
ty≥
 =
FW_MMU
 || s->ty≥ =
FW_SIGNATURE
) {

396 
	`¥ötf
("binary isálreadyÖrocessed!!\n");

400 
f_off£t
 +
s
->
Àn
;

401 
s
 = ((*)s->
c⁄ã¡
Ë+ s->
Àn
;

403 
	`¥ötf
("done.\n");

406 
	}
}

411 
	$¥o˚ss_image
(
FILE
 * 
ioÂ
, * 
d©a
, 
size
)

413 
Ωroc_fw_hódî
 *
hdr
;

414 
Ωroc_fw_£˘i⁄
 *
s
;

415 
f_off£t
 = 0;

416 
£˘no
 = 0;

417 
u64
 
∑
;

418 
fw_toc_íåy
 
fw_toc_èbÀ
[
RPROC_MAX_FW_SECTIONS
];

419 
u32
 
toc_èbÀ_Àngth
 = 0;

420 
u32
 
toc_off£t
 = 0;

421 
Ωroc_fw_£˘i⁄
 
fw_√w_£˘i⁄
;

422 
FILE
 *
dÂ
;

424 i‡((
dÂ
 = 
	`f›í
(
DEBUG_TOC_FILE
, "w+b")Ë=
NULL
) {

425 
	`Ârötf
(
°dîr
, "couldÇŸ o≥n: "
DEBUG_TOC_FILE
"\n");

429 
	`mem£t
(
mmu_l1_èbÀ
, 0, (mmu_l1_table));

430 
	`mem£t
(
fw_toc_èbÀ
, 0, (fw_toc_table));

432 
	`¥ötf
("\nProcessing header...\n");

433 
hdr
 = (
Ωroc_fw_hódî
 *)
d©a
;

436 i‡(
	`memcmp
(
hdr
->
magic
, 
RPROC_FW_MAGIC
, (hdr->magic))) {

437 
	`Ârötf
(
°dîr
, "övÆid magi¯numbî: %.4s\n", 
hdr
->
magic
);

442 
	`¥ötf
("magi¯numbî %.4s\n", 
hdr
->
magic
);

443 
	`¥ötf
("hódî vîsi⁄ %d\n", 
hdr
->
vîsi⁄
);

444 
	`¥ötf
("hódî sizê%d\n", 
hdr
->
hódî_Àn
);

445 
	`¥ötf
("hódî d©a\n%s\n", 
hdr
->
hódî
);

448 
s
 = (
Ωroc_fw_£˘i⁄
 *)(
hdr
->
hódî
 + hdr->
hódî_Àn
);

450 
	`¥ötf
("Processing sections....\n");

451 
f_off£t
 +(
u8
 *)
s
 - (u8 *)
d©a
;

452 (
u8
 *)
s
 < (u8 *)(
d©a
 + 
size
)) {

453 
f_off£t
 +(
u8
 *)
s
->
c⁄ã¡
 - (u8 *)s;

454 
	`¥ötf
("section: %d, offset:0x%xáddress: 0x%llx, size: 0x%x\n",

455 
s
->
ty≥
, 
f_off£t
, s->
da
, s->
Àn
);

456 i‡(
s
->
ty≥
 =
FW_RESOURCE
) {

457 
	`¥o˚ss_ªsour˚s
(
s
);

460 i‡(!
	`va_to_∑
(
s
->
da
, &
∑
)) {

461 
fw_toc_èbÀ
[
£˘no
].
£˘_id
 = sectno + 1;

462 
fw_toc_èbÀ
[
£˘no
].
off£t
 = 
f_off£t
;

463 
fw_toc_èbÀ
[
£˘no
].
£˘_∑
 = (
u32
)
∑
;

464 
fw_toc_èbÀ
[
£˘no
].
£˘_Àn
 = 
s
->
Àn
;

465 
toc_èbÀ_Àngth
 +(
fw_toc_íåy
);

466 
	`Ârötf
(
dÂ
, "0x%.8x 0x%.8x 0x%.8x 0x%.8x\n", ++
£˘no
, 
f_off£t
,

467 (
u32
)
∑
, 
s
->
Àn
);

470 
	`¥ötf
(" IgnoringÅhis section forÇow! PAÅo beássigned!!\n");

473 
f_off£t
 +
s
->
Àn
;

474 
s
 = ((*)s->
c⁄ã¡
Ë+ s->
Àn
;

476 
	`¥ötf
("sectionsÖrocessed...\n");

478 
	`¥ötf
("\nCuºíàposôi⁄ o‡fûe†0x%lx 0x%lx\n", 
	`·ñl
(
ioÂ
),

479 
	`·ñl
(
dÂ
));

480 
	`¥ötf
("TOCÑeguœ∏£˘i⁄†sizê0x%x\n", 
toc_èbÀ_Àngth
);

483 
	`¸óã_âb
();

484 
fw_√w_£˘i⁄
.
ty≥
 = 
FW_MMU
;

486 
fw_√w_£˘i⁄
.
da
 = 
FW_MMU_BASE_PA
;

487 
fw_√w_£˘i⁄
.
Àn
 = (
mmu_l1_èbÀ
);

488 
	`fwrôe
(&
fw_√w_£˘i⁄
, 1, 16, 
ioÂ
);

489 
f_off£t
 += 16;

490 
	`fwrôe
(&
mmu_l1_èbÀ
, 1, (mmu_l1_èbÀ), 
ioÂ
);

493 
fw_toc_èbÀ
[
£˘no
].
£˘_id
 = sectno + 1;

494 
fw_toc_èbÀ
[
£˘no
].
off£t
 = 
f_off£t
;

495 
fw_toc_èbÀ
[
£˘no
].
£˘_∑
 = (
u32
)
fw_√w_£˘i⁄
.
da
;

496 
fw_toc_èbÀ
[
£˘no
].
£˘_Àn
 = 
fw_√w_£˘i⁄
.
Àn
;

497 
toc_èbÀ_Àngth
 +(
fw_toc_íåy
);

498 
	`Ârötf
(
dÂ
, "0x%.8x 0x%.8x 0x%.8x 0x%.8x\n", ++
£˘no
, 
f_off£t
,

499 (
u32
)
fw_√w_£˘i⁄
.
da
, fw_√w_£˘i⁄.
Àn
);

502 
fw_toc_èbÀ
[
£˘no
].
£˘_id
 = sectno + 1;

503 
fw_toc_èbÀ
[
£˘no
].
off£t
 = -1;

504 
fw_toc_èbÀ
[
£˘no
].
£˘_∑
 = -1;

505 
fw_toc_èbÀ
[
£˘no
].
£˘_Àn
 = -1;

506 
toc_èbÀ_Àngth
 +(
fw_toc_íåy
);

507 
	`Ârötf
(
dÂ
, "0x%.8x 0x%.8x 0x%.8x 0x%.8x\n", ++
£˘no
, -1, -1, -1);

510 
fw_√w_£˘i⁄
.
ty≥
 = 
FW_SIGNATURE
;

511 
fw_√w_£˘i⁄
.
da
 = 
FW_SIGNATURE_BASE_PA
;

512 
fw_√w_£˘i⁄
.
Àn
 = 
toc_èbÀ_Àngth
 + 0x148;

513 
	`fwrôe
(&
fw_√w_£˘i⁄
, 1, 16, 
ioÂ
);

514 
	`fwrôe
(
fw_toc_èbÀ
, 1, 
toc_èbÀ_Àngth
, 
ioÂ
);

515 
toc_off£t
 = 
	`·ñl
(
ioÂ
Ë- 
toc_èbÀ_Àngth
;

517 
	`¥ötf
("\nCuºíàposôi⁄ o‡fûe†0x%lx 0x%lx\n", 
	`·ñl
(
ioÂ
),

518 
	`·ñl
(
dÂ
));

519 
	`fwrôe
(&
toc_off£t
, 1, 4, 
ioÂ
);

521 
	`¥ötf
("TŸÆ TOC sizê0x%x\n", 
toc_èbÀ_Àngth
);

522 
	`¥ötf
("TOC Off£à0x%x\n", 
toc_off£t
);

523 
	`Ârötf
(
dÂ
, "TOC Off£à0x%.8x\n", 
toc_off£t
);

525 
	`f˛o£
(
dÂ
);

528 
	}
}

	@utils/mmudefs.h

33 #i‚de‡
_MMUREGS_H_


34 
	#_MMUREGS_H_


	)

37 
	#SZ_16M
 (1 << 24)

	)

38 
	#SZ_1M
 (1 << 20)

	)

39 
	#SZ_64K
 (1 << 16)

	)

40 
	#SZ_4K
 (1 << 12)

	)

42 
	#MMU_L1_SSECTION
 0

	)

43 
	#MMU_L1_SECTION
 1

	)

44 
	#MMU_L2_LPAGE
 2

	)

45 
	#MMU_L2_SPAGE
 3

	)

48 
	#MMU_L1_SECTION_FLAGS
 (0x00002)

	)

49 
	#MMU_L1_SSECTION_FLAGS
 (0x40002)

	)

50 
	#MMU_L1_PAGE_FLAGS
 (0x01)

	)

51 
	#MMU_L2_LPAGE_FLAGS
 (0x001)

	)

52 
	#MMU_L2_SPAGE_FLAGS
 (0x002)

	)

55 
	#MMU_L1_SECTION_MASK
 (0xFFF00000)

	)

56 
	#MMU_L1_SSECTION_MASK
 (0xFF000000)

	)

57 
	#MMU_L1_PAGE_MASK
 (0xFFFFFC00)

	)

59 
	#MMU_L2_LPAGE_MASK
 (0xFFFF0000)

	)

60 
	#MMU_L2_SPAGE_MASK
 (0xFFFFF000)

	)

	@utils/readrprc.c

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<sys/°©.h
>

39 
	~<°rög.h
>

41 
	~"Ωrcfmt.h
"

43 
dump_image
(* 
d©a
, 
size
);

48 
	$maö
(
¨gc
, * 
¨gv
[])

50 
FILE
 * 
Â
;

51 
°©
 
°
;

52 * 
fûíame
;

53 * 
d©a
;

54 
size
;

55 
°©us
;

57 i‡(
¨gc
 != 2) {

58 
	`Ârötf
(
°dîr
, "Ußge: %†fûíame\n", 
¨gv
[0]);

59 
	`exô
(1);

62 
fûíame
 = 
¨gv
[1];

63 i‡((
Â
 = 
	`f›í
(
fûíame
, "rb")Ë=
NULL
) {

64 
	`Ârötf
(
°dîr
, "%s: couldÇŸ o≥n: %s\n", 
¨gv
[0], 
fûíame
);

65 
	`exô
(2);

68 
	`f°©
(
	`fûío
(
Â
), &
°
);

69 
size
 = 
°
.
°_size
;

70 
d©a
 = 
	`mÆloc
(
size
);

71 
	`‰ód
(
d©a
, 1, 
size
, 
Â
);

72 
	`f˛o£
(
Â
);

74 
°©us
 = 
	`dump_image
(
d©a
, 
size
);

76 
	`‰ì
(
d©a
);

78  
°©us
;

79 
	}
}

84 
	$dump_ªsour˚s
(
Ωroc_fw_£˘i⁄
 * 
s
)

86 
Ωroc_fw_ªsour˚
 * 
ªs
 = (Ωroc_fw_ªsour˚ * )
s
->
c⁄ã¡
;

87 
i
;

89 
	`¥ötf
("ªsour˚ÅabÀ: %d\n", (
Ωroc_fw_ªsour˚
));

90 
i
 = 0; i < 
s
->
Àn
 / (
Ωroc_fw_ªsour˚
); i++) {

91 
	`¥ötf
("resource: %d, da: 0x%8llx,Öa: 0x%8llx,Üen: 0x%8x,Çame: %s\n",

92 
ªs
[
i
].
ty≥
,Ñes[i].
da
,Ñes[i].
∑
,Ñes[i].
Àn
,Ñes[i].
«me
);

94 
	`¥ötf
("\n");

95 
	}
}

100 
	$dump_image
(* 
d©a
, 
size
)

102 
Ωroc_fw_hódî
 *
hdr
;

103 
Ωroc_fw_£˘i⁄
 *
s
;

105 
hdr
 = (
Ωroc_fw_hódî
 *)
d©a
;

108 i‡(
	`memcmp
(
hdr
->
magic
, 
RPROC_FW_MAGIC
, (hdr->magic))) {

109 
	`Ârötf
(
°dîr
, "övÆid magi¯numbî: %.4s\n", 
hdr
->
magic
);

114 
	`¥ötf
("magi¯numbî %.4s\n", 
hdr
->
magic
);

115 
	`¥ötf
("hódî vîsi⁄ %d\n", 
hdr
->
vîsi⁄
);

116 
	`¥ötf
("hódî sizê%d\n", 
hdr
->
hódî_Àn
);

117 
	`¥ötf
("hódî d©a\n%s\n", 
hdr
->
hódî
);

120 
s
 = (
Ωroc_fw_£˘i⁄
 *)(
hdr
->
hódî
 + hdr->
hódî_Àn
);

122 (
u8
 *)
s
 < (u8 *)(
d©a
 + 
size
)) {

123 
	`¥ötf
("£˘i⁄: %d,áddªss: 0x%8Œx, size: 0x%8x\n", 
s
->
ty≥
,

124 
s
->
da
, s->
Àn
);

125 i‡(
s
->
ty≥
 =
FW_RESOURCE
) {

126 
	`dump_ªsour˚s
(
s
);

129 
s
 = ((*)s->
c⁄ã¡
Ë+ s->
Àn
;

133 
	}
}

	@utils/rprcfmt.h

33 #i‚de‡
_RPROCFMT_H_


34 
	#_RPROCFMT_H_


	)

36 
	tu32
;

37 
	tu64
;

38 
	tu8
;

39 
	#__∑cked
 
	`__©åibuã__
 ((
∑cked
))

	)

61 
	#RPROC_FW_MAGIC
 "RPRC"

	)

63 
	eΩroc_fw_ªsour˚_ty≥
 {

64 
	mRSC_CARVEOUT
 = 0,

65 
	mRSC_DEVMEM
 = 1,

66 
	mRSC_DEVICE
 = 2,

67 
	mRSC_IRQ
 = 3,

68 
	mRSC_TRACE
 = 4,

69 
	mRSC_BOOTADDR
 = 5,

70 
	mRSC_CRASHDUMP
 = 6,

71 
	mRSC_SUSPENDADDR
 = 7,

74 
	eΩroc_fw_£˘i⁄_ty≥
 {

75 
	mFW_RESOURCE
 = 0,

76 
	mFW_TEXT
 = 1,

77 
	mFW_DATA
 = 2,

78 
	mFW_MMU
 = 3,

79 
	mFW_SIGNATURE
 = 4,

82 
	sΩroc_fw_ªsour˚
 {

83 
u32
 
	mty≥
;

84 
u64
 
	mda
;

85 
u64
 
	m∑
;

86 
u32
 
	mÀn
;

87 
u32
 
	mÊags
;

88 
u8
 
	m«me
[48];

89 } 
	g__∑cked
;

91 
	sΩroc_fw_£˘i⁄
 {

92 
u32
 
	mty≥
;

93 
u64
 
	mda
;

94 
u32
 
	mÀn
;

95 
	mc⁄ã¡
[0];

96 } 
	g__∑cked
;

98 
	sΩroc_fw_hódî
 {

99 
	mmagic
[4];

100 
u32
 
	mvîsi⁄
;

101 
u32
 
	mhódî_Àn
;

102 
	mhódî
[0];

103 } 
	g__∑cked
;

	@utils/wrints.c

33 
	~<°dio.h
>

34 
	~<°dlib.h
>

36 
	$maö
(
¨gc
, * 
¨gv
[])

38 
i
;

39 
w‹d
;

41 
i
 = 1; i < 
¨gc
; i++) {

42 
w‹d
 = 
	`°πoul
(
¨gv
[
i
], 
NULL
, 0);

43 
	`fwrôe
(&
w‹d
, 4, 1, 
°dout
);

47 
	}
}

	@utils/xdep.c

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<sys/°©.h
>

39 
	~<°rög.h
>

44 
	$maö
(
¨gc
, * 
¨gv
[])

46 
FILE
 * 
Â
;

47 
°©
 
°
;

48 * 
a·okí
;

49 
§˙ame
[500];

50 
‚ame
[500];

51 
¢ame
[500];

52 
toﬁ
[100];

53 
toﬁs
[10][100];

54 
löe
[100];

55 
€xt
[10];

56 
Àn
, 
i
, 
œ°Toﬁ
 = 0;

57 
found
;

59 i‡(!
¨gv
[1]) {

60 
	`exô
(1);

63 
	`°r˝y
(
§˙ame
, 
¨gv
[1]);

64 
a·okí
 = 
	`°r°r
(
§˙ame
, ".x");

66 
	`°r˝y
(
€xt
, 
a·okí
);

67 
	`°∫˝y
(
€xt
, ".o", 2);

69 
	`°∫˝y
(
a·okí
, "_p", 2);

71 
	`•rötf
(
§˙ame
, "%s%s.dï", sr˙ame, 
€xt
);

75 
Àn
 = 
	`°æí
(
§˙ame
);

76 
	`°r˝y
(
¢ame
, 
§˙ame
);

79 *(
¢ame
 + 
Àn
) = 0;

80 
a·okí
 = 
	`°ºchr
(
¢ame
, '/');

81 
Àn
 = 
a·okí
 - 
¢ame
;

83 
	`°∫˝y
(
‚ame
, 
§˙ame
, 
Àn
);

85 
	`°r˝y
(
‚ame
 + 
Àn
, "/package/cfg");

87 
	`•rötf
(
‚ame
, "%s%s", f«me, 
§˙ame
 + 
Àn
);

88 i‡(
	`°©
(
‚ame
, &
°
) == 0) {

91 } 
Àn
 && 
a·okí
 !
NULL
);

93 i‡((
Â
 = 
	`f›í
(
‚ame
, "r")Ë=
NULL
) {

94 
	`exô
(1);

97 
	`fgës
(
löe
, ÷öe), 
Â
Ë!
NULL
) {

98 
a·okí
 = 
	`°r°r
(
löe
, "/packages");

99 i‡(!
a·okí
) {

100 
a·okí
 = 
	`°r°r
(
löe
, "/include");

102 i‡(
a·okí
 !
NULL
) {

103 
Àn
 = 
a·okí
 - 
löe
;

105 
	`°∫˝y
(
toﬁ
, 
löe
, 
Àn
);

107 
	`°r˝y
(
toﬁ
 + 
Àn
, "\n");

109 
a·okí
 = 
	`°ºchr
(
toﬁ
, '/');

110 i‡(
a·okí
 !
NULL
) {

111 
found
 = 0;

112 
i
 = 0; i < 
œ°Toﬁ
; i++) {

114 i‡(!
	`°rcmp
(
toﬁs
[
i
], 
a·okí
 + 1)) {

115 
found
 = 1;

119 i‡(!
found
) {

121 
	`°r˝y
(
toﬁs
[
œ°Toﬁ
], 
a·okí
 + 1);

122 
	`¥ötf
("\t%s", 
toﬁs
[
œ°Toﬁ
]);

123 
œ°Toﬁ
++;

128 
	`f˛o£
(
Â
);

130 
	}
}

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

89 #i‚de‡
__˝lu•lus


90 
	#__is˘y≥
(
c
, 
ty≥
) \

91 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

92 #ñi‡
deföed
 
__USE_EXTERN_INLINES


93 
	#__is˘y≥_f
(
ty≥
) \

94 
__exã∫_ölöe
 \

95 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

97  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

98 
	}

	)
}

101 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

102 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

104 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

106 
__BEGIN_NAMESPACE_STD


112 
__ex˘y≥
 (
iß um
);

113 
__ex˘y≥
 (
ißÕha
);

114 
__ex˘y≥
 (
is˙ål
);

115 
__ex˘y≥
 (
isdigô
);

116 
__ex˘y≥
 (
i¶owî
);

117 
__ex˘y≥
 (
isgøph
);

118 
__ex˘y≥
 (
i•röt
);

119 
__ex˘y≥
 (
i•un˘
);

120 
__ex˘y≥
 (
is•a˚
);

121 
__ex˘y≥
 (
isuµî
);

122 
__ex˘y≥
 (
isxdigô
);

126 
	$tﬁowî
 (
__c
Ë
__THROW
;

129 
	$touµî
 (
__c
Ë
__THROW
;

131 
__END_NAMESPACE_STD


135 #ifdef 
__USE_ISOC99


136 
__BEGIN_NAMESPACE_C99


138 
	`__ex˘y≥
 (
isbœnk
);

140 
__END_NAMESPACE_C99


143 #ifde‡
__USE_GNU


145 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

148 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


152 
	$ißscii
 (
__c
Ë
__THROW
;

156 
	$tﬂscii
 (
__c
Ë
__THROW
;

160 
	`__ex˘y≥
 (
_touµî
);

161 
	`__ex˘y≥
 (
_tﬁowî
);

165 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

166 (
__exãnsi⁄__
 \

167 ({ 
__ªs
; \

168 i‡( (
c
) > 1) \

170 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

172 
__c
 = (
c
); \

173 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

176 
__ªs
 = 
f
 
¨gs
; \

179 
__ªs
 = (
a
)[(Ë(
c
)]; \

180 
__ªs
; 
	}
}))

	)

182 #i‡!
deföed
 
__NO_CTYPE


183 #ifde‡
__is˘y≥_f


184 
	$__is˘y≥_f
 (
Ænum
)

185 
	$__is˘y≥_f
 (
Æpha
)

186 
	$__is˘y≥_f
 (
˙ål
)

187 
	$__is˘y≥_f
 (
digô
)

188 
	$__is˘y≥_f
 (
lowî
)

189 
	$__is˘y≥_f
 (
gøph
)

190 
	$__is˘y≥_f
 (
¥öt
)

191 
	$__is˘y≥_f
 (
pun˘
)

192 
	$__is˘y≥_f
 (
•a˚
)

193 
	$__is˘y≥_f
 (
uµî
)

194 
	$__is˘y≥_f
 (
xdigô
)

195 #ifde‡
__USE_ISOC99


196 
	$__is˘y≥_f
 (
bœnk
)

198 #ñi‡
deföed
 
__is˘y≥


199 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

200 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

201 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

202 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

203 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

204 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

205 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

206 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

207 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

208 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

209 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

210 #ifde‡
__USE_ISOC99


211 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

215 #ifde‡
__USE_EXTERN_INLINES


216 
__exã∫_ölöe
 

217 
	`__NTH
 (
	$tﬁowî
 (
__c
))

219  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

220 
	}
}

222 
__exã∫_ölöe
 

223 
__NTH
 (
	$touµî
 (
__c
))

225  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

226 
	}
}

229 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


230 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

231 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

234 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

236 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

238 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

239 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

245 #ifde‡
__USE_XOPEN2K8


259 
	~<xloˇÀ.h
>

263 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

264 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

266 
	#__ex˘y≥_l
(
«me
) \

267 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

273 
__ex˘y≥_l
 (
iß um_l
);

274 
__ex˘y≥_l
 (
ißÕha_l
);

275 
__ex˘y≥_l
 (
is˙ål_l
);

276 
__ex˘y≥_l
 (
isdigô_l
);

277 
__ex˘y≥_l
 (
i¶owî_l
);

278 
__ex˘y≥_l
 (
isgøph_l
);

279 
__ex˘y≥_l
 (
i•röt_l
);

280 
__ex˘y≥_l
 (
i•un˘_l
);

281 
__ex˘y≥_l
 (
is•a˚_l
);

282 
__ex˘y≥_l
 (
isuµî_l
);

283 
__ex˘y≥_l
 (
isxdigô_l
);

285 
__ex˘y≥_l
 (
isbœnk_l
);

289 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

290 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

296 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


297 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

299 
	#__touµî_l
(
c
, 
loˇÀ
) \

300 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

301 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

302 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

306 #i‚de‡
__NO_CTYPE


307 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

308 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

309 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

310 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

311 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

312 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

313 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

314 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

315 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

316 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

317 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

319 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

321 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


322 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

323 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

326 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

327 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

328 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

329 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

330 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

331 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

332 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

333 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

334 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

335 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

336 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

338 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

340 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


341 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

342 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

349 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

110 
f˙é
 (
__fd
, 
__cmd
, ...);

118 #i‚de‡
__USE_FILE_OFFSET64


119 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

121 #ifde‡
__REDIRECT


122 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

123 
	`__n⁄nuŒ
 ((1));

125 
	#›í
 
›í64


	)

128 #ifde‡
__USE_LARGEFILE64


129 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

132 #ifde‡
__USE_ATFILE


142 #i‚de‡
__USE_FILE_OFFSET64


143 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

144 
	`__n⁄nuŒ
 ((2));

146 #ifde‡
__REDIRECT


147 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

148 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

150 
	#›í©
 
›í©64


	)

153 #ifde‡
__USE_LARGEFILE64


154 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

155 
	`__n⁄nuŒ
 ((2));

164 #i‚de‡
__USE_FILE_OFFSET64


165 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

167 #ifde‡
__REDIRECT


168 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

169 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

171 
	#¸ót
 
¸ót64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

179 && !
deföed
 
__USE_POSIX
))

188 
	#F_ULOCK
 0

	)

189 
	#F_LOCK
 1

	)

190 
	#F_TLOCK
 2

	)

191 
	#F_TEST
 3

	)

193 #i‚de‡
__USE_FILE_OFFSET64


194 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

196 #ifde‡
__REDIRECT


197 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

199 
	#lockf
 
lockf64


	)

202 #ifde‡
__USE_LARGEFILE64


203 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

207 #ifde‡
__USE_XOPEN2K


210 #i‚de‡
__USE_FILE_OFFSET64


211 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

212 
__advi£
Ë
__THROW
;

214 #ifde‡
__REDIRECT_NTH


215 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

216 
__off64_t
 
__Àn
, 
__advi£
),

217 
posix_Ádvi£64
);

219 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

222 #ifde‡
__USE_LARGEFILE64


223 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

224 
__advi£
Ë
__THROW
;

232 #i‚de‡
__USE_FILE_OFFSET64


233 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

235 #ifde‡
__REDIRECT


236 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

237 
__off64_t
 
__Àn
),

238 
posix_ÁŒoˇã64
);

240 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

243 #ifde‡
__USE_LARGEFILE64


244 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

251 && 
deföed
 
__va_¨g_∑ck_Àn


252 
	~<bôs/f˙é2.h
>

255 
__END_DECLS


	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

144 #ifde‡
__USE_GNU


145 
	#SEEK_DATA
 3

	)

146 
	#SEEK_HOLE
 4

	)

150 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


152 
	#P_tmpdú
 "/tmp"

	)

165 
	~<bôs/°dio_lim.h
>

169 
_IO_FILE
 *
°dö
;

170 
_IO_FILE
 *
°dout
;

171 
_IO_FILE
 *
°dîr
;

173 
	#°dö
 
°dö


	)

174 
	#°dout
 
°dout


	)

175 
	#°dîr
 
°dîr


	)

177 
__BEGIN_NAMESPACE_STD


179 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

181 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

182 
__END_NAMESPACE_STD


184 #ifde‡
__USE_ATFILE


186 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

187 
__c⁄°
 *
__√w
Ë
__THROW
;

190 
__BEGIN_NAMESPACE_STD


195 #i‚de‡
__USE_FILE_OFFSET64


196 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

198 #ifde‡
__REDIRECT


199 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

201 
	#tmpfûe
 
tmpfûe64


	)

205 #ifde‡
__USE_LARGEFILE64


206 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

210 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

211 
__END_NAMESPACE_STD


213 #ifde‡
__USE_MISC


216 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

220 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


228 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

229 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

233 
__BEGIN_NAMESPACE_STD


238 
	`f˛o£
 (
FILE
 *
__°ªam
);

243 
	`fÊush
 (
FILE
 *
__°ªam
);

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_MISC


253 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

256 #ifde‡
__USE_GNU


263 
	`f˛o£Æl
 ();

267 
__BEGIN_NAMESPACE_STD


268 #i‚de‡
__USE_FILE_OFFSET64


273 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

274 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

279 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

280 
__c⁄°
 *
__ª°ri˘
 
__modes
,

281 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

283 #ifde‡
__REDIRECT


284 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

285 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

286 
__wur
;

287 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

288 
__c⁄°
 *
__ª°ri˘
 
__modes
,

289 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

290 
__wur
;

292 
	#f›í
 
f›í64


	)

293 
	#‰e›í
 
‰e›í64


	)

296 
__END_NAMESPACE_STD


297 #ifde‡
__USE_LARGEFILE64


298 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

300 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

301 
__c⁄°
 *
__ª°ri˘
 
__modes
,

302 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

305 #ifdef 
__USE_POSIX


307 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

310 #ifdef 
__USE_GNU


313 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

314 
__c⁄°
 *
__ª°ri˘
 
__modes
,

315 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

318 #ifde‡
__USE_XOPEN2K8


320 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

321 
__THROW
 
__wur
;

326 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

330 
__BEGIN_NAMESPACE_STD


333 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

337 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

338 
__modes
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifdef 
__USE_BSD


344 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

345 
size_t
 
__size
Ë
__THROW
;

348 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

352 
__BEGIN_NAMESPACE_STD


357 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

358 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

365 
	$•rötf
 (*
__ª°ri˘
 
__s
,

366 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

372 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

373 
_G_va_li°
 
__¨g
);

378 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

380 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

381 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

382 
__END_NAMESPACE_STD


384 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


385 
__BEGIN_NAMESPACE_C99


387 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

389 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

391 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

392 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

393 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

394 
__END_NAMESPACE_C99


397 #ifde‡
__USE_GNU


400 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

401 
_G_va_li°
 
__¨g
)

402 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

403 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

404 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

405 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

406 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

407 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

408 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

411 #ifde‡
__USE_XOPEN2K8


418 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

419 
_G_va_li°
 
__¨g
)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

421 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

422 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

426 
__BEGIN_NAMESPACE_STD


431 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

432 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

439 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

440 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

442 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

443 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

444 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

445 #ifde‡
__REDIRECT


449 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

450 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_fsˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

453 
__isoc99_sˇnf
Ë
__wur
;

454 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

456 
__isoc99_ssˇnf
);

458 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

459 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

460 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

461 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

462 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

463 
	#fsˇnf
 
__isoc99_fsˇnf


	)

464 
	#sˇnf
 
__isoc99_sˇnf


	)

465 
	#ssˇnf
 
__isoc99_ssˇnf


	)

469 
__END_NAMESPACE_STD


471 #ifdef 
__USE_ISOC99


472 
__BEGIN_NAMESPACE_C99


477 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

478 
_G_va_li°
 
__¨g
)

479 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

485 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

489 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

490 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

491 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

493 #i‡!
deföed
 
__USE_GNU
 \

494 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

495 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

496 #ifde‡
__REDIRECT


500 
	`__REDIRECT
 (
vfsˇnf
,

501 (
FILE
 *
__ª°ri˘
 
__s
,

502 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

503 
__isoc99_vfsˇnf
)

504 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

505 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

506 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

507 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

508 
	`__REDIRECT_NTH
 (
vssˇnf
,

509 (
__c⁄°
 *
__ª°ri˘
 
__s
,

510 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

511 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

512 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

514 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

515 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

518 
_G_va_li°
 
__¨g
Ë
__wur
;

519 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

520 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

521 
_G_va_li°
 
__¨g
Ë
__THROW
;

522 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

523 
	#vsˇnf
 
__isoc99_vsˇnf


	)

524 
	#vssˇnf
 
__isoc99_vssˇnf


	)

528 
__END_NAMESPACE_C99


532 
__BEGIN_NAMESPACE_STD


537 
	`fgëc
 (
FILE
 *
__°ªam
);

538 
	`gëc
 (
FILE
 *
__°ªam
);

544 
	`gëch¨
 ();

545 
__END_NAMESPACE_STD


549 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

551 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


556 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

557 
	`gëch¨_u∆ocked
 ();

560 #ifde‡
__USE_MISC


567 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

571 
__BEGIN_NAMESPACE_STD


579 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

586 
	`putch¨
 (
__c
);

587 
__END_NAMESPACE_STD


591 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

593 #ifde‡
__USE_MISC


600 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


608 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

609 
	`putch¨_u∆ocked
 (
__c
);

613 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

614 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

616 
	`gëw
 (
FILE
 *
__°ªam
);

619 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

623 
__BEGIN_NAMESPACE_STD


628 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

629 
__wur
;

636 *
	$gës
 (*
__s
Ë
__wur
;

637 
__END_NAMESPACE_STD


639 #ifde‡
__USE_GNU


646 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 #ifdef 
__USE_XOPEN2K8


662 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

663 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

664 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

665 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

676 
size_t
 *
__ª°ri˘
 
__n
,

677 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
__BEGIN_NAMESPACE_STD


686 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

692 
	`puts
 (
__c⁄°
 *
__s
);

699 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

706 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

707 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

714 
__END_NAMESPACE_STD


716 #ifde‡
__USE_GNU


723 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

724 
FILE
 *
__ª°ri˘
 
__°ªam
);

727 #ifde‡
__USE_MISC


734 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

736 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

737 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

741 
__BEGIN_NAMESPACE_STD


746 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

751 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

756 
	`ªwöd
 (
FILE
 *
__°ªam
);

757 
__END_NAMESPACE_STD


764 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


765 #i‚de‡
__USE_FILE_OFFSET64


770 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

775 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

777 #ifde‡
__REDIRECT


778 
	`__REDIRECT
 (
f£eko
,

779 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

780 
f£eko64
);

781 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

783 
	#f£eko
 
f£eko64


	)

784 
	#·ñlo
 
·ñlo64


	)

789 
__BEGIN_NAMESPACE_STD


790 #i‚de‡
__USE_FILE_OFFSET64


795 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

800 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

802 #ifde‡
__REDIRECT


803 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

804 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

805 
	`__REDIRECT
 (
f£ços
,

806 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

808 
	#fgëpos
 
fgëpos64


	)

809 
	#f£ços
 
f£ços64


	)

812 
__END_NAMESPACE_STD


814 #ifde‡
__USE_LARGEFILE64


815 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

816 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

817 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

818 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

821 
__BEGIN_NAMESPACE_STD


823 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

825 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

827 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

828 
__END_NAMESPACE_STD


830 #ifde‡
__USE_MISC


832 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

833 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

838 
__BEGIN_NAMESPACE_STD


843 
	`≥º‹
 (
__c⁄°
 *
__s
);

844 
__END_NAMESPACE_STD


850 
	~<bôs/sys_îæi°.h
>

853 #ifdef 
__USE_POSIX


855 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

858 #ifde‡
__USE_MISC


860 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

864 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

865 
deföed
 
__USE_MISC
)

870 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

876 
	`p˛o£
 (
FILE
 *
__°ªam
);

880 #ifdef 
__USE_POSIX


882 *
	$˘îmid
 (*
__s
Ë
__THROW
;

886 #ifde‡
__USE_XOPEN


888 *
	`cu£rid
 (*
__s
);

892 #ifdef 
__USE_GNU


893 
ob°ack
;

896 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

897 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

898 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

899 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

901 
_G_va_li°
 
__¨gs
)

902 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

906 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


910 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

914 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

917 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

920 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


924 
	#__√ed_gë›t


	)

925 
	~<gë›t.h
>

930 #ifde‡
__USE_EXTERN_INLINES


931 
	~<bôs/°dio.h
>

933 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


934 
	~<bôs/°dio2.h
>

936 #ifde‡
__LDBL_COMPAT


937 
	~<bôs/°dio-ldbl.h
>

940 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

315 #ifde‡
__USE_GNU


316 
	#SEEK_DATA
 3

	)

317 
	#SEEK_HOLE
 4

	)

321 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


323 
	#L_SET
 
SEEK_SET


	)

324 
	#L_INCR
 
SEEK_CUR


	)

325 
	#L_XTND
 
SEEK_END


	)

334 #i‚de‡
__USE_FILE_OFFSET64


335 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

337 #ifde‡
__REDIRECT_NTH


338 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

339 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

340 
l£ek64
);

342 
	#l£ek
 
l£ek64


	)

345 #ifde‡
__USE_LARGEFILE64


346 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

347 
__THROW
;

354 
	`˛o£
 (
__fd
);

361 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

367 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

369 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


370 #i‚de‡
__USE_FILE_OFFSET64


377 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

378 
__off_t
 
__off£t
Ë
__wur
;

385 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

386 
__off_t
 
__off£t
Ë
__wur
;

388 #ifde‡
__REDIRECT


389 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

390 
__off64_t
 
__off£t
),

391 
¥ód64
Ë
__wur
;

392 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

393 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

394 
pwrôe64
Ë
__wur
;

396 
	#¥ód
 
¥ód64


	)

397 
	#pwrôe
 
pwrôe64


	)

401 #ifde‡
__USE_LARGEFILE64


405 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

406 
__off64_t
 
__off£t
Ë
__wur
;

409 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

410 
__off64_t
 
__off£t
Ë
__wur
;

418 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

420 #ifde‡
__USE_GNU


423 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

433 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

445 
	`¶ìp
 (
__£c⁄ds
);

447 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

448 || 
deföed
 
__USE_BSD


453 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

454 
__THROW
;

461 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

470 
	`∑u£
 ();

474 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

475 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

477 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


479 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

484 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

485 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

489 #ifde‡
__USE_ATFILE


492 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

493 
__gid_t
 
__group
, 
__Êag
)

494 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

498 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


502 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

512 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

514 #ifdef 
__USE_GNU


518 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

521 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

522 || 
deföed
 
__USE_BSD


526 *
	$gëwd
 (*
__buf
)

527 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

532 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

535 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

537 #ifde‡
__USE_GNU


540 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

544 **
__ívú⁄
;

545 #ifde‡
__USE_GNU


546 **
ívú⁄
;

552 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

553 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

555 #ifde‡
__USE_XOPEN2K8


558 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

559 
__THROW
 
	`__n⁄nuŒ
 ((2));

564 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

575 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

580 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

585 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

586 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

588 #ifde‡
__USE_GNU


591 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

592 *
__c⁄°
 
__ívp
[])

593 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

597 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


599 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

604 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

610 
	~<bôs/c⁄‚ame.h
>

613 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

614 
__THROW
 
	`__n⁄nuŒ
 ((1));

617 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

620 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

622 #ifdef 
__USE_POSIX2


624 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

629 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

632 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

636 #i‚de‡
__FAVOR_BSD


637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

639 #ifde‡
__REDIRECT_NTH


640 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

642 
	#gëpgΩ
 
__gëpgid


	)

647 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


649 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

656 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

658 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


669 #i‚de‡
__FAVOR_BSD


673 
	$£çgΩ
 (Ë
__THROW
;

678 #ifde‡
__REDIRECT_NTH


679 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

681 
	#£çgΩ
 
£çgid


	)

690 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

692 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


694 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

698 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

701 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

704 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

707 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

712 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

714 #ifdef 
__USE_GNU


716 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

723 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


728 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

731 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


733 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

740 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


745 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

748 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


750 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

753 #ifde‡
__USE_GNU


756 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

757 
__THROW
;

761 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

762 
__THROW
;

766 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

767 
__THROW
;

771 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

772 
__THROW
;

779 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

781 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

782 || 
deföed
 
__USE_BSD


787 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

793 *
	$ây«me
 (
__fd
Ë
__THROW
;

797 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

802 
	$ißây
 (
__fd
Ë
__THROW
;

804 #i‡
deföed
 
__USE_BSD
 \

805 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

808 
	$ây¶Ÿ
 (Ë
__THROW
;

813 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


819 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

820 
__c⁄°
 *
__to
, 
__Êags
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

824 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


826 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

832 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

833 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

837 #ifde‡
__USE_ATFILE


839 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

840 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

843 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

844 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

845 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

849 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_ATFILE


853 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

854 
__THROW
 
	`__n⁄nuŒ
 ((2));

858 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

862 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

865 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

872 *
	`gëlogö
 ();

873 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


880 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

883 #ifdef 
__USE_BSD


885 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

889 #ifdef 
__USE_POSIX2


893 
	#__√ed_gë›t


	)

894 
	~<gë›t.h
>

898 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


902 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

906 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

909 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

910 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

914 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

920 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

922 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

929 
	$vh™gup
 (Ë
__THROW
;

932 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

940 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

941 
size_t
 
__off£t
, 
__sˇÀ
)

942 
__THROW
 
	`__n⁄nuŒ
 ((1));

948 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

952 *
	$gëu£rshñl
 (Ë
__THROW
;

953 
	$ídu£rshñl
 (Ë
__THROW
;

954 
	$£tu£rshñl
 (Ë
__THROW
;

960 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

964 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

967 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

971 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

975 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


980 
	`fsync
 (
__fd
);

984 #ifde‡
__USE_GNU


987 
	$syncfs
 (
__fd
Ë
__THROW
;

991 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


994 
	`gëho°id
 ();

997 
	$sync
 (Ë
__THROW
;

1000 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1003 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1008 
	$gëdèbÀsize
 (Ë
__THROW
;

1014 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
åunˇã
,

1023 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1024 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1026 
	#åunˇã
 
åunˇã64


	)

1029 #ifde‡
__USE_LARGEFILE64


1030 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1036 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1039 #i‚de‡
__USE_FILE_OFFSET64


1040 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #ifde‡
__REDIRECT_NTH


1043 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1044 
·runˇã64
Ë
__wur
;

1046 
	#·runˇã
 
·runˇã64


	)

1049 #ifde‡
__USE_LARGEFILE64


1050 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1056 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1057 || 
deföed
 
__USE_MISC


1061 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1067 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1071 #ifde‡
__USE_MISC


1082 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1087 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1099 
	#F_ULOCK
 0

	)

1100 
	#F_LOCK
 1

	)

1101 
	#F_TLOCK
 2

	)

1102 
	#F_TEST
 3

	)

1104 #i‚de‡
__USE_FILE_OFFSET64


1105 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1107 #ifde‡
__REDIRECT


1108 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1109 
lockf64
Ë
__wur
;

1111 
	#lockf
 
lockf64


	)

1114 #ifde‡
__USE_LARGEFILE64


1115 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1120 #ifde‡
__USE_GNU


1125 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1126 (
__exãnsi⁄__
 \

1127 ({ 
__ªsu…
; \

1128 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1129 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1130 
__ªsu…
; 
	}
}))

	)

1133 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1136 
fd©async
 (
__fûdes
);

1142 #ifdef 
__USE_XOPEN


1144 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1145 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 
	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1156 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1157 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1163 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1165 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1170 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1171 
	~<bôs/uni°d.h
>

1174 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_POSIX


101 #unde‡
__USE_POSIX2


102 #unde‡
__USE_POSIX199309


103 #unde‡
__USE_POSIX199506


104 #unde‡
__USE_XOPEN


105 #unde‡
__USE_XOPEN_EXTENDED


106 #unde‡
__USE_UNIX98


107 #unde‡
__USE_XOPEN2K


108 #unde‡
__USE_XOPEN2KXSI


109 #unde‡
__USE_XOPEN2K8


110 #unde‡
__USE_XOPEN2K8XSI


111 #unde‡
__USE_LARGEFILE


112 #unde‡
__USE_LARGEFILE64


113 #unde‡
__USE_FILE_OFFSET64


114 #unde‡
__USE_BSD


115 #unde‡
__USE_SVID


116 #unde‡
__USE_MISC


117 #unde‡
__USE_ATFILE


118 #unde‡
__USE_GNU


119 #unde‡
__USE_REENTRANT


120 #unde‡
__USE_FORTIFY_LEVEL


121 #unde‡
__FAVOR_BSD


122 #unde‡
__KERNEL_STRICT_NAMES


126 #i‚de‡
_LOOSE_KERNEL_NAMES


127 
	#__KERNEL_STRICT_NAMES


	)

131 
	#__USE_ANSI
 1

	)

140 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


141 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

142 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

144 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

149 #i‡
deföed
 
_BSD_SOURCE
 && \

150 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

151 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

152 
	#__FAVOR_BSD
 1

	)

156 #ifde‡
_GNU_SOURCE


157 #unde‡
_ISOC95_SOURCE


158 
	#_ISOC95_SOURCE
 1

	)

159 #unde‡
_ISOC99_SOURCE


160 
	#_ISOC99_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_BSD_SOURCE


172 
	#_BSD_SOURCE
 1

	)

173 #unde‡
_SVID_SOURCE


174 
	#_SVID_SOURCE
 1

	)

175 #unde‡
_ATFILE_SOURCE


176 
	#_ATFILE_SOURCE
 1

	)

181 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

182 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

183 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

184 
	#_BSD_SOURCE
 1

	)

185 
	#_SVID_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

194 
	#__USE_ISOC99
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

200 
	#__USE_ISOC95
 1

	)

205 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

206 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

207 
	#_POSIX_SOURCE
 1

	)

208 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

209 
	#_POSIX_C_SOURCE
 2

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

211 
	#_POSIX_C_SOURCE
 199506L

	)

212 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

213 
	#_POSIX_C_SOURCE
 200112L

	)

215 
	#_POSIX_C_SOURCE
 200809L

	)

217 
	#__USE_POSIX_IMPLICITLY
 1

	)

220 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


221 
	#__USE_POSIX
 1

	)

224 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


225 
	#__USE_POSIX2
 1

	)

228 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

229 
	#__USE_POSIX199309
 1

	)

232 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

233 
	#__USE_POSIX199506
 1

	)

236 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC95


239 
	#__USE_ISOC95
 1

	)

240 #unde‡
__USE_ISOC99


241 
	#__USE_ISOC99
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

245 
	#__USE_XOPEN2K8
 1

	)

246 #unde‡
_ATFILE_SOURCE


247 
	#_ATFILE_SOURCE
 1

	)

250 #ifdef 
_XOPEN_SOURCE


251 
	#__USE_XOPEN
 1

	)

252 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

253 
	#__USE_XOPEN_EXTENDED
 1

	)

254 
	#__USE_UNIX98
 1

	)

255 #unde‡
_LARGEFILE_SOURCE


256 
	#_LARGEFILE_SOURCE
 1

	)

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

258 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

259 
	#__USE_XOPEN2K8
 1

	)

260 
	#__USE_XOPEN2K8XSI
 1

	)

262 
	#__USE_XOPEN2K
 1

	)

263 
	#__USE_XOPEN2KXSI
 1

	)

264 #unde‡
__USE_ISOC95


265 
	#__USE_ISOC95
 1

	)

266 #unde‡
__USE_ISOC99


267 
	#__USE_ISOC99
 1

	)

270 #ifde‡
_XOPEN_SOURCE_EXTENDED


271 
	#__USE_XOPEN_EXTENDED
 1

	)

276 #ifde‡
_LARGEFILE_SOURCE


277 
	#__USE_LARGEFILE
 1

	)

280 #ifde‡
_LARGEFILE64_SOURCE


281 
	#__USE_LARGEFILE64
 1

	)

284 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

285 
	#__USE_FILE_OFFSET64
 1

	)

288 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


289 
	#__USE_MISC
 1

	)

292 #ifdef 
_BSD_SOURCE


293 
	#__USE_BSD
 1

	)

296 #ifdef 
_SVID_SOURCE


297 
	#__USE_SVID
 1

	)

300 #ifdef 
_ATFILE_SOURCE


301 
	#__USE_ATFILE
 1

	)

304 #ifdef 
_GNU_SOURCE


305 
	#__USE_GNU
 1

	)

308 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


309 
	#__USE_REENTRANT
 1

	)

312 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

313 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

314 #i‡
_FORTIFY_SOURCE
 > 1

315 
	#__USE_FORTIFY_LEVEL
 2

	)

317 
	#__USE_FORTIFY_LEVEL
 1

	)

320 
	#__USE_FORTIFY_LEVEL
 0

	)

324 
	~<bôs/¥edefs.h
>

327 
	#__STDC_ISO_10646__
 200009L

	)

335 #unde‡
__GNU_LIBRARY__


336 
	#__GNU_LIBRARY__
 6

	)

340 
	#__GLIBC__
 2

	)

341 
	#__GLIBC_MINOR__
 15

	)

343 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

344 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

347 #i‡
deföed
 
__GNUC__
 \

348 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

349 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

350 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

351 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

355 #i‚de‡
__ASSEMBLER__


356 #i‚de‡
_SYS_CDEFS_H


357 
	~<sys/cdefs.h
>

362 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


363 
	#__USE_LARGEFILE
 1

	)

364 
	#__USE_LARGEFILE64
 1

	)

370 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

371 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

372 && 
deföed
 
	g__exã∫_ölöe


373 
	#__USE_EXTERN_INLINES
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

148 
	#_IO_FLAGS2_NOCLOSE
 32

	)

149 
	#_IO_FLAGS2_CLOEXEC
 64

	)

153 
	#_IO_SKIPWS
 01

	)

154 
	#_IO_LEFT
 02

	)

155 
	#_IO_RIGHT
 04

	)

156 
	#_IO_INTERNAL
 010

	)

157 
	#_IO_DEC
 020

	)

158 
	#_IO_OCT
 040

	)

159 
	#_IO_HEX
 0100

	)

160 
	#_IO_SHOWBASE
 0200

	)

161 
	#_IO_SHOWPOINT
 0400

	)

162 
	#_IO_UPPERCASE
 01000

	)

163 
	#_IO_SHOWPOS
 02000

	)

164 
	#_IO_SCIENTIFIC
 04000

	)

165 
	#_IO_FIXED
 010000

	)

166 
	#_IO_UNITBUF
 020000

	)

167 
	#_IO_STDIO
 040000

	)

168 
	#_IO_DONT_CLOSE
 0100000

	)

169 
	#_IO_BOOLALPHA
 0200000

	)

172 
_IO_jump_t
; 
	g_IO_FILE
;

175 #ifde‡
_IO_MTSAFE_IO


176 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

177 
	~<bôs/°dio-lock.h
>

182 
	t_IO_lock_t
;

188 
	s_IO_m¨kî
 {

189 
_IO_m¨kî
 *
	m_√xt
;

190 
_IO_FILE
 *
	m_sbuf
;

194 
	m_pos
;

196 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

197 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

198 
	mpublic
:

199 
°ªamm¨kî
(
°ªambuf
 *
sb
);

200 ~
°ªamm¨kî
();

201 
ßvög
(Ë{  
	m_•os
 == -2; }

202 
dñè
(
°ªamm¨kî
&);

203 
dñè
();

208 
	e__codecvt_ªsu…


210 
	m__codecvt_ok
,

211 
	m__codecvt_∑πül
,

212 
	m__codecvt_îr‹
,

213 
	m__codecvt_noc⁄v


216 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


219 
	s_IO_codecvt


221 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

222 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

223 
	m__mb°©e_t
 *,

224 c⁄° 
	mwch¨_t
 *,

225 c⁄° 
	mwch¨_t
 *,

226 c⁄° 
	mwch¨_t
 **, *,

228 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

229 
	m__mb°©e_t
 *, *,

231 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

232 
	m__mb°©e_t
 *,

234 c⁄° **, 
	mwch¨_t
 *,

235 
	mwch¨_t
 *, wchar_t **);

236 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

237 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

238 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

239 c⁄° *, c⁄° *, 
	m_IO_size_t
);

240 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

242 
_IO_ic⁄v_t
 
	m__cd_ö
;

243 
_IO_ic⁄v_t
 
	m__cd_out
;

247 
	s_IO_wide_d©a


249 
wch¨_t
 *
	m_IO_ªad_±r
;

250 
wch¨_t
 *
	m_IO_ªad_íd
;

251 
wch¨_t
 *
	m_IO_ªad_ba£
;

252 
wch¨_t
 *
	m_IO_wrôe_ba£
;

253 
wch¨_t
 *
	m_IO_wrôe_±r
;

254 
wch¨_t
 *
	m_IO_wrôe_íd
;

255 
wch¨_t
 *
	m_IO_buf_ba£
;

256 
wch¨_t
 *
	m_IO_buf_íd
;

258 
wch¨_t
 *
	m_IO_ßve_ba£
;

259 
wch¨_t
 *
	m_IO_backup_ba£
;

261 
wch¨_t
 *
	m_IO_ßve_íd
;

263 
__mb°©e_t
 
	m_IO_°©e
;

264 
__mb°©e_t
 
	m_IO_œ°_°©e
;

265 
_IO_codecvt
 
	m_codecvt
;

267 
wch¨_t
 
	m_sh‹tbuf
[1];

269 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

273 
	s_IO_FILE
 {

274 
	m_Êags
;

275 
	#_IO_fûe_Êags
 
_Êags


	)

279 * 
	m_IO_ªad_±r
;

280 * 
	m_IO_ªad_íd
;

281 * 
	m_IO_ªad_ba£
;

282 * 
	m_IO_wrôe_ba£
;

283 * 
	m_IO_wrôe_±r
;

284 * 
	m_IO_wrôe_íd
;

285 * 
	m_IO_buf_ba£
;

286 * 
	m_IO_buf_íd
;

288 *
	m_IO_ßve_ba£
;

289 *
	m_IO_backup_ba£
;

290 *
	m_IO_ßve_íd
;

292 
_IO_m¨kî
 *
	m_m¨kîs
;

294 
_IO_FILE
 *
	m_chaö
;

296 
	m_fûío
;

298 
	m_blksize
;

300 
	m_Êags2
;

302 
_IO_off_t
 
	m_ﬁd_off£t
;

304 
	#__HAVE_COLUMN


	)

306 
	m_cur_cﬁumn
;

307 sig√d 
	m_vèbÀ_off£t
;

308 
	m_sh‹tbuf
[1];

312 
_IO_lock_t
 *
	m_lock
;

313 #ifde‡
_IO_USE_OLD_IO_FILE


316 
	s_IO_FILE_com∂ëe


318 
_IO_FILE
 
	m_fûe
;

320 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

321 
_IO_off64_t
 
	m_off£t
;

322 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


324 
_IO_codecvt
 *
	m_codecvt
;

325 
_IO_wide_d©a
 *
	m_wide_d©a
;

326 
_IO_FILE
 *
	m_‰ìªs_li°
;

327 *
	m_‰ìªs_buf
;

328 
size_t
 
	m_‰ìªs_size
;

330 *
	m__∑d1
;

331 *
	m__∑d2
;

332 *
	m__∑d3
;

333 *
	m__∑d4
;

334 
size_t
 
	m__∑d5
;

336 
	m_mode
;

338 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

342 #i‚de‡
__˝lu•lus


343 
_IO_FILE
 
	t_IO_FILE
;

346 
	g_IO_FILE_∂us
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

349 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

350 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

351 #i‚de‡
_LIBC


352 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

353 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

354 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

356 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

357 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

358 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

366 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

374 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

375 
	tsize_t
 
	t__n
);

383 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

386 
	t__io_˛o£_‚
 (*
	t__cookõ
);

389 #ifde‡
_GNU_SOURCE


391 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

392 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

393 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

394 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

399 
__io_ªad_‚
 *
	mªad
;

400 
__io_wrôe_‚
 *
	mwrôe
;

401 
__io_£ek_‚
 *
	m£ek
;

402 
__io_˛o£_‚
 *
	m˛o£
;

403 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

404 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

406 
	g_IO_cookõ_fûe
;

409 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

410 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

414 #ifde‡
__˝lu•lus


418 
__undîÊow
 (
_IO_FILE
 *);

419 
__uÊow
 (
_IO_FILE
 *);

420 
__ovîÊow
 (
_IO_FILE
 *, );

421 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


422 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

423 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

424 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

427 #i‡ 
__GNUC__
 >= 3

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

430 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

433 
	#_IO_gëc_u∆ocked
(
_Â
) \

434 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

435 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

436 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

437 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

438 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

439 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

440 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

441 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

442 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

443 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

445 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


446 
	#_IO_gëwc_u∆ocked
(
_Â
) \

447 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

448 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

449 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

450 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

451 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

452 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

453 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

454 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

455 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

456 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

459 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

460 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

462 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

463 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

464 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

467 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

470 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

471 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

473 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

474 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

477 #ifde‡
_IO_MTSAFE_IO


478 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

479 
	#_IO_Êockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

481 
	#_IO_fu∆ockfûe
(
_Â
) \

482 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

484 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

485 
	#_IO_Êockfûe
(
_Â
Ë

	)

486 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

487 
	#_IO_·rylockfûe
(
_Â
Ë

	)

488 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

489 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

492 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

493 
_IO_va_li°
, *
__ª°ri˘
);

494 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

495 
_IO_va_li°
);

496 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

497 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

499 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

500 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

502 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

504 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


505 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

506 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

507 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

508 #i‡
__GNUC__
 >= 2

511 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


512 
	~<shlib-com∑t.h
>

513 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

514 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

515 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

516 c⁄° 
_IO_°dö_u£d
;

517 
wók_exã∫
 (
_IO_°dö_u£d
);

520 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


521 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

525 
	#_IO_fwide
(
__Â
, 
__mode
) \

526 ({ 
__ªsu…
 = (
__mode
); \

527 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

529 i‡((
__Â
)->
_mode
 == 0) \

531 (
__Â
)->
_mode
 = -1; \

532 
__ªsu…
 = (
__Â
)->
_mode
; \

534 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

535 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

537 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

538 
__ªsu…
; })

	)

541 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

542 
_IO_va_li°
, *
__ª°ri˘
);

543 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

544 
_IO_va_li°
);

545 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

546 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

549 #ifde‡
__LDBL_COMPAT


550 
	~<bôs/libio-ldbl.h
>

553 #ifde‡
__˝lu•lus


	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

60 
	m__GCONV_SWAP
 = 0x0004

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

68 
	g__gc⁄v_å™s_d©a
;

72 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 
	t__c⁄°
 **, __const *,

74 **, 
	tsize_t
 *, , );

77 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

80 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

81 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

85 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

86 
	t__gc⁄v_°ï_d©a
 *, *,

87 
	t__c⁄°
 *,

88 
	t__c⁄°
 **,

89 
	t__c⁄°
 *, **,

90 
	tsize_t
 *);

93 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

94 
	t__c⁄°
 *,

98 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

99 
	tsize_t
 *);

102 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

103 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

105 
	s__gc⁄v_å™s_d©a


108 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

109 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

110 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

111 *
__d©a
;

112 
__gc⁄v_å™s_d©a
 *
__√xt
;

117 
	s__gc⁄v_°ï


119 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

120 
__c⁄°
 *
__mod«me
;

122 
__cou¡î
;

124 *
__‰om_«me
;

125 *
__to_«me
;

127 
__gc⁄v_f˘
 
__f˘
;

128 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

129 
__gc⁄v_öô_f˘
 
__öô_f˘
;

130 
__gc⁄v_íd_f˘
 
__íd_f˘
;

134 
__mö_√eded_‰om
;

135 
__max_√eded_‰om
;

136 
__mö_√eded_to
;

137 
__max_√eded_to
;

140 
__°©eful
;

142 *
__d©a
;

147 
	s__gc⁄v_°ï_d©a


149 *
__outbuf
;

150 *
__outbu„nd
;

154 
__Êags
;

158 
__övoˇti⁄_cou¡î
;

162 
__öã∫Æ_u£
;

164 
__mb°©e_t
 *
__°©ï
;

165 
__mb°©e_t
 
__°©e
;

169 
__gc⁄v_å™s_d©a
 *
__å™s
;

174 
	s__gc⁄v_öfo


176 
size_t
 
__n°ïs
;

177 
__gc⁄v_°ï
 *
__°ïs
;

178 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

179 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

323 
__THROW
 
__©åibuã_puª__
;

326 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

331 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

332 
__THROW
;

335 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

336 
__END_NAMESPACE_STD


338 #ifde‡
__USE_GNU


341 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

342 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

343 
__THROW
;

347 
__BEGIN_NAMESPACE_STD


350 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

354 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

358 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

362 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

363 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

364 
mb°©e_t
 *
__p
Ë
__THROW
;

367 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

368 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

371 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

372 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

373 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

375 
__END_NAMESPACE_STD


377 #ifde‡
__USE_EXTERN_INLINES


383 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

384 
__exã∫_ölöe
 
wöt_t


385 
	`__NTH
 (
	$btowc
 (
__c
))

386 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

387 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

389 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

390 
__exã∫_ölöe
 

391 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

393 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

395 
__exã∫_ölöe
 
size_t


396 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

397 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

398 {  (
__ps
 !
NULL


399 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

402 
__BEGIN_NAMESPACE_STD


405 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

406 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

407 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

411 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

412 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
__END_NAMESPACE_STD


417 #ifdef 
__USE_XOPEN2K8


420 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

421 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

422 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

426 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

427 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

428 
size_t
 
__nwc
, size_à
__Àn
,

429 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

434 #ifde‡
__USE_XOPEN


436 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

440 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

444 
__BEGIN_NAMESPACE_STD


447 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

448 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

449 
__END_NAMESPACE_STD


451 #ifde‡
__USE_ISOC99


452 
__BEGIN_NAMESPACE_C99


454 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

455 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

456 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

457 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

458 
__END_NAMESPACE_C99


462 
__BEGIN_NAMESPACE_STD


465 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

466 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

470 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

471 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

472 
__THROW
;

473 
__END_NAMESPACE_STD


475 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

476 
__BEGIN_NAMESPACE_C99


479 
__exãnsi⁄__


480 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

481 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

482 
__THROW
;

486 
__exãnsi⁄__


487 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

488 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

489 
__ba£
Ë
__THROW
;

490 
__END_NAMESPACE_C99


493 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


496 
__exãnsi⁄__


497 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

498 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

499 
__THROW
;

503 
__exãnsi⁄__


504 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

505 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

506 
__ba£
Ë
__THROW
;

509 #ifde‡
__USE_GNU


523 
	~<xloˇÀ.h
>

527 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

528 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

529 
__loˇÀ_t
 
__loc
Ë
__THROW
;

531 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

532 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

533 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

535 
__exãnsi⁄__


536 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

537 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

538 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

540 
__exãnsi⁄__


541 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

542 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

543 
__ba£
, 
__loˇÀ_t
 
__loc
)

544 
__THROW
;

546 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

547 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

548 
__THROW
;

550 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

551 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

552 
__THROW
;

554 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

555 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

556 
__loˇÀ_t
 
__loc
Ë
__THROW
;

560 #ifde‡
__USE_XOPEN2K8


563 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

564 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

569 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

570 
__THROW
;

577 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

580 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


581 
__BEGIN_NAMESPACE_STD


584 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

591 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

592 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

598 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

602 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

603 
__THROW
 ;

609 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

610 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

611 
__gnuc_va_li°
 
__¨g
)

617 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

618 
__gnuc_va_li°
 
__¨g
)

622 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

623 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

625 
__THROW
 ;

632 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

633 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

639 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

643 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

644 
__THROW
 ;

646 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

647 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

648 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

649 #ifde‡
__REDIRECT


653 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

654 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

655 
__isoc99_fwsˇnf
)

657 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_wsˇnf
)

660 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

661 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

662 ...), 
__isoc99_swsˇnf
)

665 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

666 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

667 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

669 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

670 
__THROW
;

671 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

672 
	#wsˇnf
 
__isoc99_wsˇnf


	)

673 
	#swsˇnf
 
__isoc99_swsˇnf


	)

677 
__END_NAMESPACE_STD


680 #ifde‡
__USE_ISOC99


681 
__BEGIN_NAMESPACE_C99


686 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

687 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

688 
__gnuc_va_li°
 
__¨g
)

694 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

695 
__gnuc_va_li°
 
__¨g
)

698 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

699 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

700 
__gnuc_va_li°
 
__¨g
)

701 
__THROW
 ;

703 #i‡!
deföed
 
__USE_GNU
 \

704 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

705 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

706 #ifde‡
__REDIRECT


707 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

708 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

709 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

711 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

714 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

715 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

716 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

719 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

720 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

721 
__gnuc_va_li°
 
__¨g
);

722 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

723 
__gnuc_va_li°
 
__¨g
);

724 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

725 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

727 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

728 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

729 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

733 
__END_NAMESPACE_C99


737 
__BEGIN_NAMESPACE_STD


742 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

743 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwch¨
 ();

756 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

757 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

771 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

772 
__FILE
 *
__ª°ri˘
 
__°ªam
);

778 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

779 
__FILE
 *
__ª°ri˘
 
__°ªam
);

786 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

787 
__END_NAMESPACE_STD


790 #ifde‡
__USE_GNU


798 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

799 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

807 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

815 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

824 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

834 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

835 
__FILE
 *
__ª°ri˘
 
__°ªam
);

843 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

844 
__FILE
 *
__ª°ri˘
 
__°ªam
);

848 
__BEGIN_NAMESPACE_C99


852 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

853 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

854 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

855 
__END_NAMESPACE_C99


857 #ifde‡
__USE_GNU


858 
	~<xloˇÀ.h
>

862 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

863 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

864 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

865 
__loˇÀ_t
 
__loc
Ë
__THROW
;

874 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


875 
	#__√ed_iswxxx


	)

876 
	~<w˘y≥.h
>

880 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


881 
	~<bôs/wch¨2.h
>

884 #ifde‡
__LDBL_COMPAT


885 
	~<bôs/wch¨-ldbl.h
>

888 
__END_DECLS


896 #unde‡
__√ed_mb°©e_t


897 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@
1
.
1
/usr/include
123
3100
host/omx_benchmark.c
host/omx_packet.h
host/omx_sample.c
ti/deh/Deh.c
ti/deh/DehDsp.c
ti/deh/Watchdog.c
ti/examples/srvmgr/hwspinlock_task.c
ti/examples/srvmgr/ping_tasks.c
ti/examples/srvmgr/resmgr_task.c
ti/examples/srvmgr/test_omx.c
ti/gates/hwspinlock/HwSpinlock.c
ti/gates/hwspinlock/HwSpinlock.h
ti/gates/hwspinlock/_HwSpinlock.h
ti/grcm/RcmClient.c
ti/grcm/RcmClient.h
ti/grcm/RcmServer.c
ti/grcm/RcmServer.h
ti/grcm/RcmTypes.h
ti/grcm/RcmUtils.c
ti/hdmiwa/HdmiWa.c
ti/ipc/rpmsg/InterruptDsp.c
ti/ipc/rpmsg/InterruptDsp.h
ti/ipc/rpmsg/InterruptIpu.c
ti/ipc/rpmsg/InterruptIpu.h
ti/ipc/rpmsg/InterruptIpu_norouting.c
ti/ipc/rpmsg/InterruptProxy.h
ti/ipc/rpmsg/MessageQCopy.c
ti/ipc/rpmsg/MessageQCopy.h
ti/ipc/rpmsg/OffloadM3.c
ti/ipc/rpmsg/VirtQueue.c
ti/ipc/rpmsg/VirtQueue.h
ti/ipc/rpmsg/VirtQueue_norouting.c
ti/ipc/rpmsg/virtio_ring.h
ti/pm/IpcPower.c
ti/pm/IpcPower.h
ti/pm/IpcPowerDsp.c
ti/pm/_IpcPower.h
ti/resmgr/IpcResource.c
ti/resmgr/IpcResource.h
ti/resmgr/_IpcResource.h
ti/resources/IpcMemory.c
ti/resources/rsc_table_dsp.h
ti/resources/rsc_table_ipu.h
ti/resources/rsc_types.h
ti/srvmgr/NameMap.c
ti/srvmgr/NameMap.h
ti/srvmgr/ServiceMgr.c
ti/srvmgr/ServiceMgr.h
ti/srvmgr/omaprpc/OmapRpc.c
ti/srvmgr/omaprpc/OmapRpc.h
ti/srvmgr/omx/OmxSrvMgr.c
ti/srvmgr/omx_packet.h
ti/srvmgr/rpmsg_omx.h
ti/trace/StackDbg.c
ti/trace/SysMin.c
ti/utils/Version.c
utils/elfload/ArrayList.c
utils/elfload/arm_dynamic.c
utils/elfload/arm_reloc.c
utils/elfload/c60_dynamic.c
utils/elfload/c60_reloc.c
utils/elfload/dload.c
utils/elfload/dload_endian.c
utils/elfload/dlw_client.c
utils/elfload/dlw_debug.c
utils/elfload/dlw_dsbt.c
utils/elfload/dlw_trgmem.c
utils/elfload/elf32.c
utils/elfload/genbase.c
utils/elfload/include/ArrayList.h
utils/elfload/include/Queue.h
utils/elfload/include/Stack.h
utils/elfload/include/Std.h
utils/elfload/include/arm_dynamic.h
utils/elfload/include/arm_elf32.h
utils/elfload/include/c60_dynamic.h
utils/elfload/include/c60_elf32.h
utils/elfload/include/dload.h
utils/elfload/include/dload4430.h
utils/elfload/include/dload_api.h
utils/elfload/include/dload_endian.h
utils/elfload/include/dlw_debug.h
utils/elfload/include/dlw_dsbt.h
utils/elfload/include/dlw_trgmem.h
utils/elfload/include/elf32.h
utils/elfload/include/relocate.h
utils/elfload/include/std_linux.h
utils/elfload/include/symtab.h
utils/elfload/include/util.h
utils/elfload/symtab.c
utils/genextbin.c
utils/mmudefs.h
utils/readrprc.c
utils/rprcfmt.h
utils/wrints.c
utils/xdep.c
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/linux/limits.h
/usr/include/linux/types.h
/usr/include/pthread.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/posix_types.h
/usr/include/sched.h
/usr/include/stdint.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/linux/stddef.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
